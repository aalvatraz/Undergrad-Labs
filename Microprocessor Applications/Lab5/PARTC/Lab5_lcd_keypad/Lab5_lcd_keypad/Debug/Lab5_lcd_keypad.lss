
Lab5_lcd_keypad.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000b8e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000004c  00802000  00000b8e  00000c02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000c4e  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c80  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000b8  00000000  00000000  00000cc0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000118c  00000000  00000000  00000d78  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002c7  00000000  00000000  00001f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002f7  00000000  00000000  000021cb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001dc  00000000  00000000  000024c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a93  00000000  00000000  000026a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000005a1  00000000  00000000  00003133  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000c0  00000000  00000000  000036d4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__ctors_end>
   4:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
   8:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
   c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  10:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  14:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  18:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  1c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  20:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  24:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  28:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  2c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  30:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  34:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  38:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  3c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  40:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  44:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  48:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  4c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  50:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  54:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  58:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  5c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  60:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  64:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  68:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  6c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  70:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  74:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  78:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  7c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  80:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  84:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  88:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  8c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  90:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  94:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  98:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  9c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  a0:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  a4:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  a8:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  ac:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  b0:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  b4:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  b8:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  bc:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  c0:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  c4:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  c8:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  cc:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  d0:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  d4:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  d8:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  dc:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  e0:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  e4:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  e8:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  ec:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  f0:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  f4:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  f8:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
  fc:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 100:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 104:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 108:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 10c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 110:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 114:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 118:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 11c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 120:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 124:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 128:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 12c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 130:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 134:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 138:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 13c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 140:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 144:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 148:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 14c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 150:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 154:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 158:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 15c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 160:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 164:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 168:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 16c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 170:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 174:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 178:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 17c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 180:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 184:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 188:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 18c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 190:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 194:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 198:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 19c:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 1a0:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 1a4:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 1a8:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 1ac:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 1b0:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 1b4:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 1b8:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 1bc:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 1c0:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 1c4:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 1c8:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 1cc:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 1d0:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 1d4:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 1d8:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 1dc:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 1e0:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 1e4:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 1e8:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 1ec:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 1f0:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 1f4:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 1f8:	0c 94 2c 01 	jmp	0x258	; 0x258 <__bad_interrupt>
 1fc:	94 03       	fmuls	r17, r20
 1fe:	94 03       	fmuls	r17, r20
 200:	97 03       	fmuls	r17, r23
 202:	97 03       	fmuls	r17, r23
 204:	9f 03       	fmulsu	r17, r23
 206:	9f 03       	fmulsu	r17, r23
 208:	a2 03       	fmuls	r18, r18
 20a:	a2 03       	fmuls	r18, r18

0000020c <__trampolines_start>:
 20c:	0c 94 97 03 	jmp	0x72e	; 0x72e <main+0x3a>
 210:	0c 94 9f 03 	jmp	0x73e	; 0x73e <main+0x4a>
 214:	0c 94 94 03 	jmp	0x728	; 0x728 <main+0x34>
 218:	0c 94 a2 03 	jmp	0x744	; 0x744 <main+0x50>

0000021c <__ctors_end>:
 21c:	11 24       	eor	r1, r1
 21e:	1f be       	out	0x3f, r1	; 63
 220:	cf ef       	ldi	r28, 0xFF	; 255
 222:	cd bf       	out	0x3d, r28	; 61
 224:	df e3       	ldi	r29, 0x3F	; 63
 226:	de bf       	out	0x3e, r29	; 62
 228:	00 e0       	ldi	r16, 0x00	; 0
 22a:	0c bf       	out	0x3c, r16	; 60
 22c:	18 be       	out	0x38, r1	; 56
 22e:	19 be       	out	0x39, r1	; 57
 230:	1a be       	out	0x3a, r1	; 58
 232:	1b be       	out	0x3b, r1	; 59

00000234 <__do_copy_data>:
 234:	10 e2       	ldi	r17, 0x20	; 32
 236:	a0 e0       	ldi	r26, 0x00	; 0
 238:	b0 e2       	ldi	r27, 0x20	; 32
 23a:	ee e8       	ldi	r30, 0x8E	; 142
 23c:	fb e0       	ldi	r31, 0x0B	; 11
 23e:	00 e0       	ldi	r16, 0x00	; 0
 240:	0b bf       	out	0x3b, r16	; 59
 242:	02 c0       	rjmp	.+4      	; 0x248 <__do_copy_data+0x14>
 244:	07 90       	elpm	r0, Z+
 246:	0d 92       	st	X+, r0
 248:	ac 34       	cpi	r26, 0x4C	; 76
 24a:	b1 07       	cpc	r27, r17
 24c:	d9 f7       	brne	.-10     	; 0x244 <__do_copy_data+0x10>
 24e:	1b be       	out	0x3b, r1	; 59
 250:	0e 94 7a 03 	call	0x6f4	; 0x6f4 <main>
 254:	0c 94 c5 05 	jmp	0xb8a	; 0xb8a <_exit>

00000258 <__bad_interrupt>:
 258:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000025c <keypad_init>:
* INPUTS: None
* OUTPUTS: None
*******************************/
void keypad_init(void)
{
	PORTF_DIR = 0xF0;		//upper nibble as outputs
 25c:	80 ef       	ldi	r24, 0xF0	; 240
 25e:	80 93 a0 06 	sts	0x06A0, r24
	PORTF_DIRCLR = 0x0F;	//lower nibble as inputs
 262:	8f e0       	ldi	r24, 0x0F	; 15
 264:	80 93 a2 06 	sts	0x06A2, r24
	PORTF_PIN0CTRL = 0x10;	//set input pins as pulled down
 268:	80 e1       	ldi	r24, 0x10	; 16
 26a:	80 93 b0 06 	sts	0x06B0, r24
	PORTF_PIN1CTRL = 0x10;
 26e:	80 93 b1 06 	sts	0x06B1, r24
	PORTF_PIN2CTRL = 0x10;
 272:	80 93 b2 06 	sts	0x06B2, r24
	PORTF_PIN3CTRL = 0x10;
 276:	80 93 b3 06 	sts	0x06B3, r24
 27a:	08 95       	ret

0000027c <getKey>:
}

char getKey()
{
 27c:	0f 93       	push	r16
 27e:	1f 93       	push	r17
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	24 e0       	ldi	r18, 0x04	; 4
 286:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t x;
	char result= ' '; //change to 0x00 to get main() to work
 288:	80 e2       	ldi	r24, 0x20	; 32
	for (int i = 0; i<4; i++)
	{
		PORTF_OUT = 1 << (i+4);
 28a:	61 e0       	ldi	r22, 0x01	; 1
 28c:	70 e0       	ldi	r23, 0x00	; 0
 28e:	a4 ea       	ldi	r26, 0xA4	; 164
 290:	b6 e0       	ldi	r27, 0x06	; 6
		asm volatile("nop");
		asm volatile("nop");
		x = (uint8_t) PORTF_IN;
 292:	e8 ea       	ldi	r30, 0xA8	; 168
 294:	f6 e0       	ldi	r31, 0x06	; 6
		if(x == 0x11)
			result = 'D';
 296:	c4 e4       	ldi	r28, 0x44	; 68
		else if(x == 0x12)
			result = 'C';
 298:	d3 e4       	ldi	r29, 0x43	; 67
		else if(x == 0x14)
			result = 'B';
 29a:	12 e4       	ldi	r17, 0x42	; 66
		else if(x == 0x18)
			result = 'A';
 29c:	01 e4       	ldi	r16, 0x41	; 65
{
	uint8_t x;
	char result= ' '; //change to 0x00 to get main() to work
	for (int i = 0; i<4; i++)
	{
		PORTF_OUT = 1 << (i+4);
 29e:	ab 01       	movw	r20, r22
 2a0:	02 2e       	mov	r0, r18
 2a2:	02 c0       	rjmp	.+4      	; 0x2a8 <getKey+0x2c>
 2a4:	44 0f       	add	r20, r20
 2a6:	55 1f       	adc	r21, r21
 2a8:	0a 94       	dec	r0
 2aa:	e2 f7       	brpl	.-8      	; 0x2a4 <getKey+0x28>
 2ac:	4c 93       	st	X, r20
		asm volatile("nop");
 2ae:	00 00       	nop
		asm volatile("nop");
 2b0:	00 00       	nop
		x = (uint8_t) PORTF_IN;
 2b2:	90 81       	ld	r25, Z
		if(x == 0x11)
 2b4:	91 31       	cpi	r25, 0x11	; 17
 2b6:	01 f1       	breq	.+64     	; 0x2f8 <getKey+0x7c>
			result = 'D';
		else if(x == 0x12)
 2b8:	92 31       	cpi	r25, 0x12	; 18
 2ba:	01 f1       	breq	.+64     	; 0x2fc <getKey+0x80>
			result = 'C';
		else if(x == 0x14)
 2bc:	94 31       	cpi	r25, 0x14	; 20
 2be:	01 f1       	breq	.+64     	; 0x300 <getKey+0x84>
			result = 'B';
		else if(x == 0x18)
 2c0:	98 31       	cpi	r25, 0x18	; 24
 2c2:	01 f1       	breq	.+64     	; 0x304 <getKey+0x88>
			result = 'A';
		else if(x == 0x21)
 2c4:	91 32       	cpi	r25, 0x21	; 33
 2c6:	01 f1       	breq	.+64     	; 0x308 <getKey+0x8c>
			result = '#';
		else if(x == 0x22)
 2c8:	92 32       	cpi	r25, 0x22	; 34
 2ca:	01 f1       	breq	.+64     	; 0x30c <getKey+0x90>
			result = '9';
		else if(x == 0x24)
 2cc:	94 32       	cpi	r25, 0x24	; 36
 2ce:	01 f1       	breq	.+64     	; 0x310 <getKey+0x94>
			result = '6';
		else if(x == 0x28)
 2d0:	98 32       	cpi	r25, 0x28	; 40
 2d2:	01 f1       	breq	.+64     	; 0x314 <getKey+0x98>
			result = '3';
		else if(x == 0x41)
 2d4:	91 34       	cpi	r25, 0x41	; 65
 2d6:	01 f1       	breq	.+64     	; 0x318 <getKey+0x9c>
			result = '0';
		else if(x == 0x42)
 2d8:	92 34       	cpi	r25, 0x42	; 66
 2da:	01 f1       	breq	.+64     	; 0x31c <getKey+0xa0>
			result = '8';
		else if(x == 0x44)
 2dc:	94 34       	cpi	r25, 0x44	; 68
 2de:	01 f1       	breq	.+64     	; 0x320 <getKey+0xa4>
			result = '5';
		else if(x == 0x48)
 2e0:	98 34       	cpi	r25, 0x48	; 72
 2e2:	01 f1       	breq	.+64     	; 0x324 <getKey+0xa8>
			result = '2';
		else if(x == 0x81)
 2e4:	91 38       	cpi	r25, 0x81	; 129
 2e6:	01 f1       	breq	.+64     	; 0x328 <getKey+0xac>
			result = '*';
		else if(x == 0x82)
 2e8:	92 38       	cpi	r25, 0x82	; 130
 2ea:	01 f1       	breq	.+64     	; 0x32c <getKey+0xb0>
			result = '7';
		else if(x == 0x84)
 2ec:	94 38       	cpi	r25, 0x84	; 132
 2ee:	01 f1       	breq	.+64     	; 0x330 <getKey+0xb4>
			result = '4';
		else if(x == 0x88)
 2f0:	98 38       	cpi	r25, 0x88	; 136
 2f2:	f9 f4       	brne	.+62     	; 0x332 <getKey+0xb6>
			result = '1';
 2f4:	81 e3       	ldi	r24, 0x31	; 49
 2f6:	1d c0       	rjmp	.+58     	; 0x332 <getKey+0xb6>
		PORTF_OUT = 1 << (i+4);
		asm volatile("nop");
		asm volatile("nop");
		x = (uint8_t) PORTF_IN;
		if(x == 0x11)
			result = 'D';
 2f8:	8c 2f       	mov	r24, r28
 2fa:	1b c0       	rjmp	.+54     	; 0x332 <getKey+0xb6>
		else if(x == 0x12)
			result = 'C';
 2fc:	8d 2f       	mov	r24, r29
 2fe:	19 c0       	rjmp	.+50     	; 0x332 <getKey+0xb6>
		else if(x == 0x14)
			result = 'B';
 300:	81 2f       	mov	r24, r17
 302:	17 c0       	rjmp	.+46     	; 0x332 <getKey+0xb6>
		else if(x == 0x18)
			result = 'A';
 304:	80 2f       	mov	r24, r16
 306:	15 c0       	rjmp	.+42     	; 0x332 <getKey+0xb6>
		else if(x == 0x21)
			result = '#';
 308:	83 e2       	ldi	r24, 0x23	; 35
 30a:	13 c0       	rjmp	.+38     	; 0x332 <getKey+0xb6>
		else if(x == 0x22)
			result = '9';
 30c:	89 e3       	ldi	r24, 0x39	; 57
 30e:	11 c0       	rjmp	.+34     	; 0x332 <getKey+0xb6>
		else if(x == 0x24)
			result = '6';
 310:	86 e3       	ldi	r24, 0x36	; 54
 312:	0f c0       	rjmp	.+30     	; 0x332 <getKey+0xb6>
		else if(x == 0x28)
			result = '3';
 314:	83 e3       	ldi	r24, 0x33	; 51
 316:	0d c0       	rjmp	.+26     	; 0x332 <getKey+0xb6>
		else if(x == 0x41)
			result = '0';
 318:	80 e3       	ldi	r24, 0x30	; 48
 31a:	0b c0       	rjmp	.+22     	; 0x332 <getKey+0xb6>
		else if(x == 0x42)
			result = '8';
 31c:	88 e3       	ldi	r24, 0x38	; 56
 31e:	09 c0       	rjmp	.+18     	; 0x332 <getKey+0xb6>
		else if(x == 0x44)
			result = '5';
 320:	85 e3       	ldi	r24, 0x35	; 53
 322:	07 c0       	rjmp	.+14     	; 0x332 <getKey+0xb6>
		else if(x == 0x48)
			result = '2';
 324:	82 e3       	ldi	r24, 0x32	; 50
 326:	05 c0       	rjmp	.+10     	; 0x332 <getKey+0xb6>
		else if(x == 0x81)
			result = '*';
 328:	8a e2       	ldi	r24, 0x2A	; 42
 32a:	03 c0       	rjmp	.+6      	; 0x332 <getKey+0xb6>
		else if(x == 0x82)
			result = '7';
 32c:	87 e3       	ldi	r24, 0x37	; 55
 32e:	01 c0       	rjmp	.+2      	; 0x332 <getKey+0xb6>
		else if(x == 0x84)
			result = '4';
 330:	84 e3       	ldi	r24, 0x34	; 52
 332:	2f 5f       	subi	r18, 0xFF	; 255
 334:	3f 4f       	sbci	r19, 0xFF	; 255

char getKey()
{
	uint8_t x;
	char result= ' '; //change to 0x00 to get main() to work
	for (int i = 0; i<4; i++)
 336:	28 30       	cpi	r18, 0x08	; 8
 338:	31 05       	cpc	r19, r1
 33a:	09 f0       	breq	.+2      	; 0x33e <getKey+0xc2>
 33c:	b0 cf       	rjmp	.-160    	; 0x29e <getKey+0x22>
			result = '4';
		else if(x == 0x88)
			result = '1';
	}
	return result;
	}
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	1f 91       	pop	r17
 344:	0f 91       	pop	r16
 346:	08 95       	ret

00000348 <ebi_init>:
* INPUTS: None
* OUTPUTS: None
*******************************/
void ebi_init(void)
{
	PORTH.DIRSET = 0x37; // Set RE, WE, CS0, CS1, ALE1 bits as output
 348:	e0 ee       	ldi	r30, 0xE0	; 224
 34a:	f6 e0       	ldi	r31, 0x06	; 6
 34c:	87 e3       	ldi	r24, 0x37	; 55
 34e:	81 83       	std	Z+1, r24	; 0x01
	PORTH.OUTSET = 0x33;
 350:	93 e3       	ldi	r25, 0x33	; 51
 352:	95 83       	std	Z+5, r25	; 0x05
	
	PORTK.DIRSET = 0xFF; // Set PORTK to output (ADDR 7-0/15-8)
 354:	9f ef       	ldi	r25, 0xFF	; 255
 356:	90 93 21 07 	sts	0x0721, r25
	PORTJ.DIRSET = 0xFF; // Set PORTJ to output (DATA7-0)
 35a:	90 93 01 07 	sts	0x0701, r25
	
	EBI.CTRL = EBI_SRMODE_ALE1_gc | EBI_IFMODE_3PORT_gc; // Set EBI to 3 Port (H, J, K) SRAM ALE1 mode.
 35e:	e0 e4       	ldi	r30, 0x40	; 64
 360:	f4 e0       	ldi	r31, 0x04	; 4
 362:	91 e0       	ldi	r25, 0x01	; 1
 364:	90 83       	st	Z, r25
	
	//IO PORT setup on CS0
	EBI.CS0.BASEADDRH = (uint8_t) (IO_ADDR>>16) & 0xFF; //Set highest byte of IO port base address on CS0
 366:	13 8a       	std	Z+19, r1	; 0x13
	EBI.CS0.BASEADDRL = (uint8_t) (IO_ADDR>>8) & 0xFF; // Set middle byte of IO port base address on CS0
 368:	90 e4       	ldi	r25, 0x40	; 64
 36a:	92 8b       	std	Z+18, r25	; 0x12
	EBI.CS0.CTRLA = (uint8_t) 0x19; //set IO Port to 16K address size and SRAM mode
 36c:	99 e1       	ldi	r25, 0x19	; 25
 36e:	90 8b       	std	Z+16, r25	; 0x10
	
	//LCD setup on CS1
	EBI.CS1.BASEADDRH = (uint8_t) (CS1_ADDR>>16) & 0xFF; //Set highest byte of LCD base address on CS1
 370:	87 8b       	std	Z+23, r24	; 0x17
	EBI.CS1.BASEADDRL = (uint8_t) (CS1_ADDR>>8) & 0xFF; //Set middle byte of IO port base address on CS1
 372:	16 8a       	std	Z+22, r1	; 0x16
	EBI.CS1.CTRLA = (uint8_t) EBI_CS_ASPACE_64KB_gc | EBI_CS_MODE_SRAM_gc ;
 374:	81 e2       	ldi	r24, 0x21	; 33
 376:	84 8b       	std	Z+20, r24	; 0x14
 378:	08 95       	ret

0000037a <lcd_wait>:
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_wait(void)
{
	asm volatile ("nop");
 37a:	00 00       	nop
	asm volatile ("nop");
 37c:	00 00       	nop
	while(( __far_mem_read(LCD_instr) >> 7) == 0x01); //wait while busy flag on bit7 is high
 37e:	40 e0       	ldi	r20, 0x00	; 0
 380:	50 ea       	ldi	r21, 0xA0	; 160
 382:	67 e3       	ldi	r22, 0x37	; 55
 384:	70 e0       	ldi	r23, 0x00	; 0
 386:	0b b6       	in	r0, 0x3b	; 59
 388:	6b bf       	out	0x3b, r22	; 59
 38a:	fa 01       	movw	r30, r20
 38c:	80 81       	ld	r24, Z
 38e:	0b be       	out	0x3b, r0	; 59
 390:	88 23       	and	r24, r24
 392:	cc f3       	brlt	.-14     	; 0x386 <lcd_wait+0xc>
}
 394:	08 95       	ret

00000396 <lcd_blink>:
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_blink(uint8_t on)
{
	if(on == 1)
 396:	81 30       	cpi	r24, 0x01	; 1
 398:	69 f4       	brne	.+26     	; 0x3b4 <lcd_blink+0x1e>
	{
		lcd_wait();
 39a:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_wait>
		__far_mem_write( LCD_instr, 0x0F);
 39e:	2f e0       	ldi	r18, 0x0F	; 15
 3a0:	80 e0       	ldi	r24, 0x00	; 0
 3a2:	90 ea       	ldi	r25, 0xA0	; 160
 3a4:	a7 e3       	ldi	r26, 0x37	; 55
 3a6:	b0 e0       	ldi	r27, 0x00	; 0
 3a8:	0b b6       	in	r0, 0x3b	; 59
 3aa:	ab bf       	out	0x3b, r26	; 59
 3ac:	fc 01       	movw	r30, r24
 3ae:	20 83       	st	Z, r18
 3b0:	0b be       	out	0x3b, r0	; 59
 3b2:	08 95       	ret
	}
	else
	{
		lcd_wait();
 3b4:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_wait>
		__far_mem_write( LCD_instr, 0x0C);
 3b8:	2c e0       	ldi	r18, 0x0C	; 12
 3ba:	80 e0       	ldi	r24, 0x00	; 0
 3bc:	90 ea       	ldi	r25, 0xA0	; 160
 3be:	a7 e3       	ldi	r26, 0x37	; 55
 3c0:	b0 e0       	ldi	r27, 0x00	; 0
 3c2:	0b b6       	in	r0, 0x3b	; 59
 3c4:	ab bf       	out	0x3b, r26	; 59
 3c6:	fc 01       	movw	r30, r24
 3c8:	20 83       	st	Z, r18
 3ca:	0b be       	out	0x3b, r0	; 59
 3cc:	08 95       	ret

000003ce <lcd_out>:
* FUNCTION: Send 1 char out to lcd. Must call ebi_init() and lcd_init() first
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_out(char value)
{
 3ce:	cf 93       	push	r28
 3d0:	c8 2f       	mov	r28, r24
	lcd_wait();
 3d2:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_wait>
	__far_mem_write(LCD_data, value);
 3d6:	41 e0       	ldi	r20, 0x01	; 1
 3d8:	50 ea       	ldi	r21, 0xA0	; 160
 3da:	67 e3       	ldi	r22, 0x37	; 55
 3dc:	70 e0       	ldi	r23, 0x00	; 0
 3de:	0b b6       	in	r0, 0x3b	; 59
 3e0:	6b bf       	out	0x3b, r22	; 59
 3e2:	fa 01       	movw	r30, r20
 3e4:	c0 83       	st	Z, r28
 3e6:	0b be       	out	0x3b, r0	; 59
}
 3e8:	cf 91       	pop	r28
 3ea:	08 95       	ret

000003ec <lcd_outstring>:
* FUNCTION: Send char string to LCD. Must call ebi_init() and lcd_init() first
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_outstring(char *value)
{
 3ec:	cf 92       	push	r12
 3ee:	df 92       	push	r13
 3f0:	ef 92       	push	r14
 3f2:	ff 92       	push	r15
 3f4:	cf 93       	push	r28
 3f6:	df 93       	push	r29
 3f8:	ec 01       	movw	r28, r24
	while(*value != 0x00)
 3fa:	88 81       	ld	r24, Y
 3fc:	88 23       	and	r24, r24
 3fe:	a1 f0       	breq	.+40     	; 0x428 <lcd_outstring+0x3c>
	{
		lcd_wait();
		__far_mem_write(LCD_data, *value);
 400:	0f 2e       	mov	r0, r31
 402:	cc 24       	eor	r12, r12
 404:	c3 94       	inc	r12
 406:	f0 ea       	ldi	r31, 0xA0	; 160
 408:	df 2e       	mov	r13, r31
 40a:	f7 e3       	ldi	r31, 0x37	; 55
 40c:	ef 2e       	mov	r14, r31
 40e:	f1 2c       	mov	r15, r1
 410:	f0 2d       	mov	r31, r0
*******************************/
void lcd_outstring(char *value)
{
	while(*value != 0x00)
	{
		lcd_wait();
 412:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_wait>
		__far_mem_write(LCD_data, *value);
 416:	89 91       	ld	r24, Y+
 418:	0b b6       	in	r0, 0x3b	; 59
 41a:	eb be       	out	0x3b, r14	; 59
 41c:	f6 01       	movw	r30, r12
 41e:	80 83       	st	Z, r24
 420:	0b be       	out	0x3b, r0	; 59
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_outstring(char *value)
{
	while(*value != 0x00)
 422:	88 81       	ld	r24, Y
 424:	81 11       	cpse	r24, r1
 426:	f5 cf       	rjmp	.-22     	; 0x412 <lcd_outstring+0x26>
	{
		lcd_wait();
		__far_mem_write(LCD_data, *value);
		value++;
	}
}
 428:	df 91       	pop	r29
 42a:	cf 91       	pop	r28
 42c:	ff 90       	pop	r15
 42e:	ef 90       	pop	r14
 430:	df 90       	pop	r13
 432:	cf 90       	pop	r12
 434:	08 95       	ret

00000436 <lcd_delay>:
* FUNCTION: For use in lcd_init to allow device powerup. Must call ebi_init()first
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_delay(void)
{
 436:	cf 93       	push	r28
 438:	df 93       	push	r29
 43a:	00 d0       	rcall	.+0      	; 0x43c <lcd_delay+0x6>
 43c:	1f 92       	push	r1
 43e:	cd b7       	in	r28, 0x3d	; 61
 440:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t ticks= 0;            //declare volatile so compiler won't optimize
 442:	19 82       	std	Y+1, r1	; 0x01
 444:	1a 82       	std	Y+2, r1	; 0x02
 446:	1b 82       	std	Y+3, r1	; 0x03
 448:	1c 82       	std	Y+4, r1	; 0x04
	while(ticks<=(F_CPU>>10))  //enough delay to allow for LCD powerup
 44a:	89 81       	ldd	r24, Y+1	; 0x01
 44c:	9a 81       	ldd	r25, Y+2	; 0x02
 44e:	ab 81       	ldd	r26, Y+3	; 0x03
 450:	bc 81       	ldd	r27, Y+4	; 0x04
 452:	82 3a       	cpi	r24, 0xA2	; 162
 454:	97 40       	sbci	r25, 0x07	; 7
 456:	a1 05       	cpc	r26, r1
 458:	b1 05       	cpc	r27, r1
 45a:	a0 f4       	brcc	.+40     	; 0x484 <lcd_delay+0x4e>
	{
		ticks++;
 45c:	89 81       	ldd	r24, Y+1	; 0x01
 45e:	9a 81       	ldd	r25, Y+2	; 0x02
 460:	ab 81       	ldd	r26, Y+3	; 0x03
 462:	bc 81       	ldd	r27, Y+4	; 0x04
 464:	01 96       	adiw	r24, 0x01	; 1
 466:	a1 1d       	adc	r26, r1
 468:	b1 1d       	adc	r27, r1
 46a:	89 83       	std	Y+1, r24	; 0x01
 46c:	9a 83       	std	Y+2, r25	; 0x02
 46e:	ab 83       	std	Y+3, r26	; 0x03
 470:	bc 83       	std	Y+4, r27	; 0x04
* OUTPUTS: None
*******************************/
void lcd_delay(void)
{
	volatile uint32_t ticks= 0;            //declare volatile so compiler won't optimize
	while(ticks<=(F_CPU>>10))  //enough delay to allow for LCD powerup
 472:	89 81       	ldd	r24, Y+1	; 0x01
 474:	9a 81       	ldd	r25, Y+2	; 0x02
 476:	ab 81       	ldd	r26, Y+3	; 0x03
 478:	bc 81       	ldd	r27, Y+4	; 0x04
 47a:	82 3a       	cpi	r24, 0xA2	; 162
 47c:	97 40       	sbci	r25, 0x07	; 7
 47e:	a1 05       	cpc	r26, r1
 480:	b1 05       	cpc	r27, r1
 482:	60 f3       	brcs	.-40     	; 0x45c <lcd_delay+0x26>
	{
		ticks++;
	}
}
 484:	24 96       	adiw	r28, 0x04	; 4
 486:	cd bf       	out	0x3d, r28	; 61
 488:	de bf       	out	0x3e, r29	; 62
 48a:	df 91       	pop	r29
 48c:	cf 91       	pop	r28
 48e:	08 95       	ret

00000490 <lcd_clr>:
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_clr(void)
{
	lcd_wait();
 490:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_wait>
	__far_mem_write(LCD_instr, 0x01);
 494:	21 e0       	ldi	r18, 0x01	; 1
 496:	80 e0       	ldi	r24, 0x00	; 0
 498:	90 ea       	ldi	r25, 0xA0	; 160
 49a:	a7 e3       	ldi	r26, 0x37	; 55
 49c:	b0 e0       	ldi	r27, 0x00	; 0
 49e:	0b b6       	in	r0, 0x3b	; 59
 4a0:	ab bf       	out	0x3b, r26	; 59
 4a2:	fc 01       	movw	r30, r24
 4a4:	20 83       	st	Z, r18
 4a6:	0b be       	out	0x3b, r0	; 59
 4a8:	08 95       	ret

000004aa <lcd_pos>:
* FUNCTION: Set LCD cursor to designated position. Must call ebi_init()first
* INPUTS: x position and y position
* OUTPUTS: None
*******************************/
void lcd_pos(uint8_t row, uint8_t col)
{
 4aa:	cf 93       	push	r28
	uint8_t x = 0x00;
	if (row)
 4ac:	88 23       	and	r24, r24
 4ae:	11 f0       	breq	.+4      	; 0x4b4 <lcd_pos+0xa>
	x = 0x40;
 4b0:	c0 e4       	ldi	r28, 0x40	; 64
 4b2:	01 c0       	rjmp	.+2      	; 0x4b6 <lcd_pos+0xc>
* INPUTS: x position and y position
* OUTPUTS: None
*******************************/
void lcd_pos(uint8_t row, uint8_t col)
{
	uint8_t x = 0x00;
 4b4:	c0 e0       	ldi	r28, 0x00	; 0
	if (row)
	x = 0x40;
	x |= (col & 0x0F);
 4b6:	6f 70       	andi	r22, 0x0F	; 15
 4b8:	c6 2b       	or	r28, r22
	x |= (1 << 7);
	lcd_wait();
 4ba:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_wait>
{
	uint8_t x = 0x00;
	if (row)
	x = 0x40;
	x |= (col & 0x0F);
	x |= (1 << 7);
 4be:	c0 68       	ori	r28, 0x80	; 128
	lcd_wait();
	__far_mem_write(LCD_instr, x);
 4c0:	80 e0       	ldi	r24, 0x00	; 0
 4c2:	90 ea       	ldi	r25, 0xA0	; 160
 4c4:	a7 e3       	ldi	r26, 0x37	; 55
 4c6:	b0 e0       	ldi	r27, 0x00	; 0
 4c8:	0b b6       	in	r0, 0x3b	; 59
 4ca:	ab bf       	out	0x3b, r26	; 59
 4cc:	fc 01       	movw	r30, r24
 4ce:	c0 83       	st	Z, r28
 4d0:	0b be       	out	0x3b, r0	; 59
}
 4d2:	cf 91       	pop	r28
 4d4:	08 95       	ret

000004d6 <lcd_init>:
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_init(void)
{
	lcd_delay();//delay to allow device to start up
 4d6:	0e 94 1b 02 	call	0x436	; 0x436 <lcd_delay>
	__far_mem_write(LCD_instr, 0x38); //LCD 8 bit, 2 line mode
 4da:	28 e3       	ldi	r18, 0x38	; 56
 4dc:	80 e0       	ldi	r24, 0x00	; 0
 4de:	90 ea       	ldi	r25, 0xA0	; 160
 4e0:	a7 e3       	ldi	r26, 0x37	; 55
 4e2:	b0 e0       	ldi	r27, 0x00	; 0
 4e4:	0b b6       	in	r0, 0x3b	; 59
 4e6:	ab bf       	out	0x3b, r26	; 59
 4e8:	fc 01       	movw	r30, r24
 4ea:	20 83       	st	Z, r18
 4ec:	0b be       	out	0x3b, r0	; 59
	lcd_wait();
 4ee:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_wait>
	__far_mem_write(LCD_instr, 0x38); //LCD 8 bit, 2 line mode
 4f2:	28 e3       	ldi	r18, 0x38	; 56
 4f4:	80 e0       	ldi	r24, 0x00	; 0
 4f6:	90 ea       	ldi	r25, 0xA0	; 160
 4f8:	a7 e3       	ldi	r26, 0x37	; 55
 4fa:	b0 e0       	ldi	r27, 0x00	; 0
 4fc:	0b b6       	in	r0, 0x3b	; 59
 4fe:	ab bf       	out	0x3b, r26	; 59
 500:	fc 01       	movw	r30, r24
 502:	20 83       	st	Z, r18
 504:	0b be       	out	0x3b, r0	; 59
	lcd_wait();
 506:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_wait>
	__far_mem_write(LCD_instr, 0x0C); //turn LCD display on
 50a:	2c e0       	ldi	r18, 0x0C	; 12
 50c:	80 e0       	ldi	r24, 0x00	; 0
 50e:	90 ea       	ldi	r25, 0xA0	; 160
 510:	a7 e3       	ldi	r26, 0x37	; 55
 512:	b0 e0       	ldi	r27, 0x00	; 0
 514:	0b b6       	in	r0, 0x3b	; 59
 516:	ab bf       	out	0x3b, r26	; 59
 518:	fc 01       	movw	r30, r24
 51a:	20 83       	st	Z, r18
 51c:	0b be       	out	0x3b, r0	; 59
	lcd_clr(); //clear lcd screen
 51e:	0e 94 48 02 	call	0x490	; 0x490 <lcd_clr>
	lcd_wait();
 522:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_wait>
	__far_mem_write(LCD_instr, 0x06);// set cursor shift right and no screen shift
 526:	26 e0       	ldi	r18, 0x06	; 6
 528:	80 e0       	ldi	r24, 0x00	; 0
 52a:	90 ea       	ldi	r25, 0xA0	; 160
 52c:	a7 e3       	ldi	r26, 0x37	; 55
 52e:	b0 e0       	ldi	r27, 0x00	; 0
 530:	0b b6       	in	r0, 0x3b	; 59
 532:	ab bf       	out	0x3b, r26	; 59
 534:	fc 01       	movw	r30, r24
 536:	20 83       	st	Z, r18
 538:	0b be       	out	0x3b, r0	; 59
	lcd_pos(0,0);
 53a:	60 e0       	ldi	r22, 0x00	; 0
 53c:	80 e0       	ldi	r24, 0x00	; 0
 53e:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_pos>
 542:	08 95       	ret

00000544 <lcd_home>:
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_home(void)
{
	lcd_wait();
 544:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_wait>
	__far_mem_write(LCD_instr, 0x02);
 548:	22 e0       	ldi	r18, 0x02	; 2
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	90 ea       	ldi	r25, 0xA0	; 160
 54e:	a7 e3       	ldi	r26, 0x37	; 55
 550:	b0 e0       	ldi	r27, 0x00	; 0
 552:	0b b6       	in	r0, 0x3b	; 59
 554:	ab bf       	out	0x3b, r26	; 59
 556:	fc 01       	movw	r30, r24
 558:	20 83       	st	Z, r18
 55a:	0b be       	out	0x3b, r0	; 59
	lcd_wait();
 55c:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_wait>
	lcd_pos(0,0);
 560:	60 e0       	ldi	r22, 0x00	; 0
 562:	80 e0       	ldi	r24, 0x00	; 0
 564:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_pos>
 568:	08 95       	ret

0000056a <displayName>:
}


void displayName(void)
{
	lcd_clr();
 56a:	0e 94 48 02 	call	0x490	; 0x490 <lcd_clr>
	lcd_home();
 56e:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_home>
	char *name = "Adrian Alvarez";
	lcd_outstring(name);
 572:	80 e0       	ldi	r24, 0x00	; 0
 574:	90 e2       	ldi	r25, 0x20	; 32
 576:	0e 94 f6 01 	call	0x3ec	; 0x3ec <lcd_outstring>
 57a:	08 95       	ret

0000057c <displaySchwartz>:
}

void displaySchwartz(void)
{
	lcd_clr();
 57c:	0e 94 48 02 	call	0x490	; 0x490 <lcd_clr>
	lcd_home();
 580:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_home>
	char* top = "May the Schwartz";
	char* bottom = "be with you!";
	lcd_outstring(top);
 584:	8f e0       	ldi	r24, 0x0F	; 15
 586:	90 e2       	ldi	r25, 0x20	; 32
 588:	0e 94 f6 01 	call	0x3ec	; 0x3ec <lcd_outstring>
	lcd_pos(1,0);
 58c:	60 e0       	ldi	r22, 0x00	; 0
 58e:	81 e0       	ldi	r24, 0x01	; 1
 590:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_pos>
	lcd_outstring(bottom);
 594:	80 e2       	ldi	r24, 0x20	; 32
 596:	90 e2       	ldi	r25, 0x20	; 32
 598:	0e 94 f6 01 	call	0x3ec	; 0x3ec <lcd_outstring>
 59c:	08 95       	ret

0000059e <extra>:
	__far_mem_write(LCD_instr, x);
}

void extra(void)
{
	lcd_clr();
 59e:	0e 94 48 02 	call	0x490	; 0x490 <lcd_clr>
	lcd_home();
 5a2:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_home>
	char* dumble = " It's dangerous";
	char* dore = "  to go alone!";
	lcd_outstring(dumble);
 5a6:	8d e2       	ldi	r24, 0x2D	; 45
 5a8:	90 e2       	ldi	r25, 0x20	; 32
 5aa:	0e 94 f6 01 	call	0x3ec	; 0x3ec <lcd_outstring>
	lcd_pos(1, 0);
 5ae:	60 e0       	ldi	r22, 0x00	; 0
 5b0:	81 e0       	ldi	r24, 0x01	; 1
 5b2:	0e 94 55 02 	call	0x4aa	; 0x4aa <lcd_pos>
	lcd_outstring(dore);
 5b6:	8d e3       	ldi	r24, 0x3D	; 61
 5b8:	90 e2       	ldi	r25, 0x20	; 32
 5ba:	0e 94 f6 01 	call	0x3ec	; 0x3ec <lcd_outstring>
 5be:	08 95       	ret

000005c0 <getVoltage>:
* FUNCTION: Get voltage from ADC (single conversion). must call adc_init() first
* INPUTS: None
* OUTPUTS: float type value for voltage
*******************************/
float getVoltage(void)
{
 5c0:	cf 93       	push	r28
 5c2:	df 93       	push	r29
	ADCB.CTRLA = 0x05; //start channel 0 conversion, single ended
 5c4:	85 e0       	ldi	r24, 0x05	; 5
 5c6:	80 93 40 02 	sts	0x0240, r24
	while((ADCB.CH0.INTFLAGS & 0x01) == 0 );
 5ca:	e0 e4       	ldi	r30, 0x40	; 64
 5cc:	f2 e0       	ldi	r31, 0x02	; 2
 5ce:	83 a1       	ldd	r24, Z+35	; 0x23
 5d0:	80 ff       	sbrs	r24, 0
 5d2:	fd cf       	rjmp	.-6      	; 0x5ce <getVoltage+0xe>
	float x = (float) (ADCB.CH0.RES) ;
 5d4:	c0 e4       	ldi	r28, 0x40	; 64
 5d6:	d2 e0       	ldi	r29, 0x02	; 2
 5d8:	6c a1       	ldd	r22, Y+36	; 0x24
 5da:	7d a1       	ldd	r23, Y+37	; 0x25
 5dc:	80 e0       	ldi	r24, 0x00	; 0
 5de:	90 e0       	ldi	r25, 0x00	; 0
 5e0:	0e 94 c1 04 	call	0x982	; 0x982 <__floatunsisf>
	{
		x = 0;
	}
	else
	{
		x *= 5.0; //convert to volts
 5e4:	20 e0       	ldi	r18, 0x00	; 0
 5e6:	30 e0       	ldi	r19, 0x00	; 0
 5e8:	40 ea       	ldi	r20, 0xA0	; 160
 5ea:	50 e4       	ldi	r21, 0x40	; 64
 5ec:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__mulsf3>
		x /= 2047.0;
	}
	ADCB.CH0.INTFLAGS ^= 1 << 0;
 5f0:	3b a1       	ldd	r19, Y+35	; 0x23
 5f2:	21 e0       	ldi	r18, 0x01	; 1
 5f4:	23 27       	eor	r18, r19
 5f6:	2b a3       	std	Y+35, r18	; 0x23
		x = 0;
	}
	else
	{
		x *= 5.0; //convert to volts
		x /= 2047.0;
 5f8:	20 e0       	ldi	r18, 0x00	; 0
 5fa:	30 ee       	ldi	r19, 0xE0	; 224
 5fc:	4f ef       	ldi	r20, 0xFF	; 255
 5fe:	54 e4       	ldi	r21, 0x44	; 68
 600:	0e 94 19 04 	call	0x832	; 0x832 <__divsf3>
	}
	ADCB.CH0.INTFLAGS ^= 1 << 0;
	return x;
}
 604:	df 91       	pop	r29
 606:	cf 91       	pop	r28
 608:	08 95       	ret

0000060a <lcd_voltage>:
* FUNCTION: display voltage on LCD
* INPUTS: float value for voltage from ADC
* OUTPUTS: None
*******************************/
void lcd_voltage(float voltage)
{
 60a:	8f 92       	push	r8
 60c:	9f 92       	push	r9
 60e:	af 92       	push	r10
 610:	bf 92       	push	r11
 612:	cf 92       	push	r12
 614:	df 92       	push	r13
 616:	ef 92       	push	r14
 618:	ff 92       	push	r15
 61a:	4b 01       	movw	r8, r22
 61c:	5c 01       	movw	r10, r24
	char firstdigit, seconddigit, thirddigit;// to get digit values
	firstdigit = (int) voltage; //cast voltage as int to get first digit
 61e:	0e 94 8b 04 	call	0x916	; 0x916 <__fixsfsi>
 622:	6b 01       	movw	r12, r22
 624:	7c 01       	movw	r14, r24
	lcd_out((char) (firstdigit + 0x30));	//display first digit
 626:	80 e3       	ldi	r24, 0x30	; 48
 628:	8c 0d       	add	r24, r12
 62a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_out>
	lcd_out('.');
 62e:	8e e2       	ldi	r24, 0x2E	; 46
 630:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_out>
	float voltage2 = 10*(voltage - firstdigit); //move next digit to 1s place
 634:	dd 24       	eor	r13, r13
 636:	b6 01       	movw	r22, r12
 638:	dd 0c       	add	r13, r13
 63a:	88 0b       	sbc	r24, r24
 63c:	99 0b       	sbc	r25, r25
 63e:	0e 94 c3 04 	call	0x986	; 0x986 <__floatsisf>
 642:	9b 01       	movw	r18, r22
 644:	ac 01       	movw	r20, r24
 646:	c5 01       	movw	r24, r10
 648:	b4 01       	movw	r22, r8
 64a:	0e 94 ac 03 	call	0x758	; 0x758 <__subsf3>
 64e:	20 e0       	ldi	r18, 0x00	; 0
 650:	30 e0       	ldi	r19, 0x00	; 0
 652:	40 e2       	ldi	r20, 0x20	; 32
 654:	51 e4       	ldi	r21, 0x41	; 65
 656:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__mulsf3>
 65a:	4b 01       	movw	r8, r22
 65c:	5c 01       	movw	r10, r24
	seconddigit = (int) voltage2;	//get second digit via type cast
 65e:	0e 94 8b 04 	call	0x916	; 0x916 <__fixsfsi>
 662:	6b 01       	movw	r12, r22
 664:	7c 01       	movw	r14, r24
	lcd_out((char) (seconddigit + 0x30));	//display 2nd digit
 666:	80 e3       	ldi	r24, 0x30	; 48
 668:	8c 0d       	add	r24, r12
 66a:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_out>
	float voltage3 = 10*(voltage2 - seconddigit); //get and display 3rd digit
 66e:	dd 24       	eor	r13, r13
 670:	b6 01       	movw	r22, r12
 672:	dd 0c       	add	r13, r13
 674:	88 0b       	sbc	r24, r24
 676:	99 0b       	sbc	r25, r25
 678:	0e 94 c3 04 	call	0x986	; 0x986 <__floatsisf>
 67c:	9b 01       	movw	r18, r22
 67e:	ac 01       	movw	r20, r24
 680:	c5 01       	movw	r24, r10
 682:	b4 01       	movw	r22, r8
 684:	0e 94 ac 03 	call	0x758	; 0x758 <__subsf3>
 688:	20 e0       	ldi	r18, 0x00	; 0
 68a:	30 e0       	ldi	r19, 0x00	; 0
 68c:	40 e2       	ldi	r20, 0x20	; 32
 68e:	51 e4       	ldi	r21, 0x41	; 65
 690:	0e 94 4f 05 	call	0xa9e	; 0xa9e <__mulsf3>
	thirddigit = (int) voltage3;
 694:	0e 94 8b 04 	call	0x916	; 0x916 <__fixsfsi>
	lcd_out((char) (thirddigit + 0x30));
 698:	80 e3       	ldi	r24, 0x30	; 48
 69a:	86 0f       	add	r24, r22
 69c:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_out>
	lcd_out('V');
 6a0:	86 e5       	ldi	r24, 0x56	; 86
 6a2:	0e 94 e7 01 	call	0x3ce	; 0x3ce <lcd_out>
	// don't have the hex display here yet

}
 6a6:	ff 90       	pop	r15
 6a8:	ef 90       	pop	r14
 6aa:	df 90       	pop	r13
 6ac:	cf 90       	pop	r12
 6ae:	bf 90       	pop	r11
 6b0:	af 90       	pop	r10
 6b2:	9f 90       	pop	r9
 6b4:	8f 90       	pop	r8
 6b6:	08 95       	ret

000006b8 <displayVoltage>:
}

void displayVoltage(void)
{
	float voltage;
	lcd_clr();
 6b8:	0e 94 48 02 	call	0x490	; 0x490 <lcd_clr>
	lcd_home();
 6bc:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_home>
	voltage = getVoltage();
 6c0:	0e 94 e0 02 	call	0x5c0	; 0x5c0 <getVoltage>
	lcd_voltage(voltage);
 6c4:	0e 94 05 03 	call	0x60a	; 0x60a <lcd_voltage>
 6c8:	08 95       	ret

000006ca <adc_init>:
* INPUTS: None
* OUTPUTS: None
*******************************/
void adc_init(void)
{
	PORTB.DIRCLR = PIN7_bm | PIN0_bm; //set pin7 and pin0(2.5V ref) as input
 6ca:	81 e8       	ldi	r24, 0x81	; 129
 6cc:	80 93 22 06 	sts	0x0622, r24
	
	ADCB.CTRLA = ADC_FLUSH_bm;
 6d0:	e0 e4       	ldi	r30, 0x40	; 64
 6d2:	f2 e0       	ldi	r31, 0x02	; 2
 6d4:	82 e0       	ldi	r24, 0x02	; 2
 6d6:	80 83       	st	Z, r24
	ADCB.CTRLB = ADC_CONMODE_bm | ADC_RESOLUTION_12BIT_gc;
 6d8:	80 e1       	ldi	r24, 0x10	; 16
 6da:	81 83       	std	Z+1, r24	; 0x01
	ADCB.REFCTRL = ADC_REFSEL_AREFB_gc;
 6dc:	80 e3       	ldi	r24, 0x30	; 48
 6de:	82 83       	std	Z+2, r24	; 0x02
	ADCB.PRESCALER = ADC_PRESCALER_DIV64_gc;
 6e0:	84 e0       	ldi	r24, 0x04	; 4
 6e2:	84 83       	std	Z+4, r24	; 0x04
	ADCB.CTRLA= ADC_ENABLE_bm;
 6e4:	81 e0       	ldi	r24, 0x01	; 1
 6e6:	80 83       	st	Z, r24
	ADCB.CH0.CTRL = ADC_CH_INPUTMODE_DIFF_gc | ADC_CH0START_bm;
 6e8:	86 e0       	ldi	r24, 0x06	; 6
 6ea:	80 a3       	std	Z+32, r24	; 0x20
	ADCB.CH0.MUXCTRL = 0x3F;
 6ec:	8f e3       	ldi	r24, 0x3F	; 63
 6ee:	81 a3       	std	Z+33, r24	; 0x21
	ADCB.CH0.INTCTRL= 0;
 6f0:	12 a2       	std	Z+34, r1	; 0x22
 6f2:	08 95       	ret

000006f4 <main>:
void lcd_voltage(float voltage);

int main(void)
{
    /* Replace with your application code */
	ebi_init();
 6f4:	0e 94 a4 01 	call	0x348	; 0x348 <ebi_init>
	lcd_init();
 6f8:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <lcd_init>
	adc_init();
 6fc:	0e 94 65 03 	call	0x6ca	; 0x6ca <adc_init>
	keypad_init();
 700:	0e 94 2e 01 	call	0x25c	; 0x25c <keypad_init>
	char key= ' ';
 704:	80 e2       	ldi	r24, 0x20	; 32
 706:	02 c0       	rjmp	.+4      	; 0x70c <main+0x18>
	//lcd_out(key);
while(1)
{
   while(key == ' ')
		{
			key = getKey();
 708:	0e 94 3e 01 	call	0x27c	; 0x27c <getKey>
	keypad_init();
	char key= ' ';
	//lcd_out(key);
while(1)
{
   while(key == ' ')
 70c:	80 32       	cpi	r24, 0x20	; 32
 70e:	e1 f3       	breq	.-8      	; 0x708 <main+0x14>
		{
			key = getKey();
		}
		switch(key)
 710:	90 e0       	ldi	r25, 0x00	; 0
 712:	fc 01       	movw	r30, r24
 714:	f0 97       	sbiw	r30, 0x30	; 48
 716:	e8 30       	cpi	r30, 0x08	; 8
 718:	f1 05       	cpc	r31, r1
 71a:	b8 f4       	brcc	.+46     	; 0x74a <main+0x56>
 71c:	88 27       	eor	r24, r24
 71e:	e2 50       	subi	r30, 0x02	; 2
 720:	ff 4f       	sbci	r31, 0xFF	; 255
 722:	8f 4f       	sbci	r24, 0xFF	; 255
 724:	0c 94 bc 05 	jmp	0xb78	; 0xb78 <__tablejump2__>
		{
			case '0': case '1':
				displayName();
 728:	0e 94 b5 02 	call	0x56a	; 0x56a <displayName>
				break;
 72c:	10 c0       	rjmp	.+32     	; 0x74e <main+0x5a>
				
			case '2' : case '3':
				lcd_clr();
 72e:	0e 94 48 02 	call	0x490	; 0x490 <lcd_clr>
				lcd_home();
 732:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_home>
				lcd_blink(1);
 736:	81 e0       	ldi	r24, 0x01	; 1
 738:	0e 94 cb 01 	call	0x396	; 0x396 <lcd_blink>
				break;
 73c:	08 c0       	rjmp	.+16     	; 0x74e <main+0x5a>
				
			case '4' : case '5':
				displaySchwartz();
 73e:	0e 94 be 02 	call	0x57c	; 0x57c <displaySchwartz>
				break;
 742:	05 c0       	rjmp	.+10     	; 0x74e <main+0x5a>
				
			case '6' : case '7':
				displayVoltage();
 744:	0e 94 5c 03 	call	0x6b8	; 0x6b8 <displayVoltage>
				break;
 748:	02 c0       	rjmp	.+4      	; 0x74e <main+0x5a>
			default:
				extra();
 74a:	0e 94 cf 02 	call	0x59e	; 0x59e <extra>
				break;
    }
	key = ' ';
	lcd_blink(0);
 74e:	80 e0       	ldi	r24, 0x00	; 0
 750:	0e 94 cb 01 	call	0x396	; 0x396 <lcd_blink>
				break;
			default:
				extra();
				break;
    }
	key = ' ';
 754:	80 e2       	ldi	r24, 0x20	; 32
	lcd_blink(0);
}
 756:	da cf       	rjmp	.-76     	; 0x70c <main+0x18>

00000758 <__subsf3>:
 758:	50 58       	subi	r21, 0x80	; 128

0000075a <__addsf3>:
 75a:	bb 27       	eor	r27, r27
 75c:	aa 27       	eor	r26, r26
 75e:	0e 94 c4 03 	call	0x788	; 0x788 <__addsf3x>
 762:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <__fp_round>
 766:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fp_pscA>
 76a:	38 f0       	brcs	.+14     	; 0x77a <__addsf3+0x20>
 76c:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__fp_pscB>
 770:	20 f0       	brcs	.+8      	; 0x77a <__addsf3+0x20>
 772:	39 f4       	brne	.+14     	; 0x782 <__addsf3+0x28>
 774:	9f 3f       	cpi	r25, 0xFF	; 255
 776:	19 f4       	brne	.+6      	; 0x77e <__addsf3+0x24>
 778:	26 f4       	brtc	.+8      	; 0x782 <__addsf3+0x28>
 77a:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__fp_nan>
 77e:	0e f4       	brtc	.+2      	; 0x782 <__addsf3+0x28>
 780:	e0 95       	com	r30
 782:	e7 fb       	bst	r30, 7
 784:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__fp_inf>

00000788 <__addsf3x>:
 788:	e9 2f       	mov	r30, r25
 78a:	0e 94 26 05 	call	0xa4c	; 0xa4c <__fp_split3>
 78e:	58 f3       	brcs	.-42     	; 0x766 <__addsf3+0xc>
 790:	ba 17       	cp	r27, r26
 792:	62 07       	cpc	r22, r18
 794:	73 07       	cpc	r23, r19
 796:	84 07       	cpc	r24, r20
 798:	95 07       	cpc	r25, r21
 79a:	20 f0       	brcs	.+8      	; 0x7a4 <__addsf3x+0x1c>
 79c:	79 f4       	brne	.+30     	; 0x7bc <__addsf3x+0x34>
 79e:	a6 f5       	brtc	.+104    	; 0x808 <__addsf3x+0x80>
 7a0:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_zero>
 7a4:	0e f4       	brtc	.+2      	; 0x7a8 <__addsf3x+0x20>
 7a6:	e0 95       	com	r30
 7a8:	0b 2e       	mov	r0, r27
 7aa:	ba 2f       	mov	r27, r26
 7ac:	a0 2d       	mov	r26, r0
 7ae:	0b 01       	movw	r0, r22
 7b0:	b9 01       	movw	r22, r18
 7b2:	90 01       	movw	r18, r0
 7b4:	0c 01       	movw	r0, r24
 7b6:	ca 01       	movw	r24, r20
 7b8:	a0 01       	movw	r20, r0
 7ba:	11 24       	eor	r1, r1
 7bc:	ff 27       	eor	r31, r31
 7be:	59 1b       	sub	r21, r25
 7c0:	99 f0       	breq	.+38     	; 0x7e8 <__addsf3x+0x60>
 7c2:	59 3f       	cpi	r21, 0xF9	; 249
 7c4:	50 f4       	brcc	.+20     	; 0x7da <__addsf3x+0x52>
 7c6:	50 3e       	cpi	r21, 0xE0	; 224
 7c8:	68 f1       	brcs	.+90     	; 0x824 <__addsf3x+0x9c>
 7ca:	1a 16       	cp	r1, r26
 7cc:	f0 40       	sbci	r31, 0x00	; 0
 7ce:	a2 2f       	mov	r26, r18
 7d0:	23 2f       	mov	r18, r19
 7d2:	34 2f       	mov	r19, r20
 7d4:	44 27       	eor	r20, r20
 7d6:	58 5f       	subi	r21, 0xF8	; 248
 7d8:	f3 cf       	rjmp	.-26     	; 0x7c0 <__addsf3x+0x38>
 7da:	46 95       	lsr	r20
 7dc:	37 95       	ror	r19
 7de:	27 95       	ror	r18
 7e0:	a7 95       	ror	r26
 7e2:	f0 40       	sbci	r31, 0x00	; 0
 7e4:	53 95       	inc	r21
 7e6:	c9 f7       	brne	.-14     	; 0x7da <__addsf3x+0x52>
 7e8:	7e f4       	brtc	.+30     	; 0x808 <__addsf3x+0x80>
 7ea:	1f 16       	cp	r1, r31
 7ec:	ba 0b       	sbc	r27, r26
 7ee:	62 0b       	sbc	r22, r18
 7f0:	73 0b       	sbc	r23, r19
 7f2:	84 0b       	sbc	r24, r20
 7f4:	ba f0       	brmi	.+46     	; 0x824 <__addsf3x+0x9c>
 7f6:	91 50       	subi	r25, 0x01	; 1
 7f8:	a1 f0       	breq	.+40     	; 0x822 <__addsf3x+0x9a>
 7fa:	ff 0f       	add	r31, r31
 7fc:	bb 1f       	adc	r27, r27
 7fe:	66 1f       	adc	r22, r22
 800:	77 1f       	adc	r23, r23
 802:	88 1f       	adc	r24, r24
 804:	c2 f7       	brpl	.-16     	; 0x7f6 <__addsf3x+0x6e>
 806:	0e c0       	rjmp	.+28     	; 0x824 <__addsf3x+0x9c>
 808:	ba 0f       	add	r27, r26
 80a:	62 1f       	adc	r22, r18
 80c:	73 1f       	adc	r23, r19
 80e:	84 1f       	adc	r24, r20
 810:	48 f4       	brcc	.+18     	; 0x824 <__addsf3x+0x9c>
 812:	87 95       	ror	r24
 814:	77 95       	ror	r23
 816:	67 95       	ror	r22
 818:	b7 95       	ror	r27
 81a:	f7 95       	ror	r31
 81c:	9e 3f       	cpi	r25, 0xFE	; 254
 81e:	08 f0       	brcs	.+2      	; 0x822 <__addsf3x+0x9a>
 820:	b0 cf       	rjmp	.-160    	; 0x782 <__addsf3+0x28>
 822:	93 95       	inc	r25
 824:	88 0f       	add	r24, r24
 826:	08 f0       	brcs	.+2      	; 0x82a <__addsf3x+0xa2>
 828:	99 27       	eor	r25, r25
 82a:	ee 0f       	add	r30, r30
 82c:	97 95       	ror	r25
 82e:	87 95       	ror	r24
 830:	08 95       	ret

00000832 <__divsf3>:
 832:	0e 94 2d 04 	call	0x85a	; 0x85a <__divsf3x>
 836:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <__fp_round>
 83a:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__fp_pscB>
 83e:	58 f0       	brcs	.+22     	; 0x856 <__divsf3+0x24>
 840:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fp_pscA>
 844:	40 f0       	brcs	.+16     	; 0x856 <__divsf3+0x24>
 846:	29 f4       	brne	.+10     	; 0x852 <__divsf3+0x20>
 848:	5f 3f       	cpi	r21, 0xFF	; 255
 84a:	29 f0       	breq	.+10     	; 0x856 <__divsf3+0x24>
 84c:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__fp_inf>
 850:	51 11       	cpse	r21, r1
 852:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_szero>
 856:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__fp_nan>

0000085a <__divsf3x>:
 85a:	0e 94 26 05 	call	0xa4c	; 0xa4c <__fp_split3>
 85e:	68 f3       	brcs	.-38     	; 0x83a <__divsf3+0x8>

00000860 <__divsf3_pse>:
 860:	99 23       	and	r25, r25
 862:	b1 f3       	breq	.-20     	; 0x850 <__divsf3+0x1e>
 864:	55 23       	and	r21, r21
 866:	91 f3       	breq	.-28     	; 0x84c <__divsf3+0x1a>
 868:	95 1b       	sub	r25, r21
 86a:	55 0b       	sbc	r21, r21
 86c:	bb 27       	eor	r27, r27
 86e:	aa 27       	eor	r26, r26
 870:	62 17       	cp	r22, r18
 872:	73 07       	cpc	r23, r19
 874:	84 07       	cpc	r24, r20
 876:	38 f0       	brcs	.+14     	; 0x886 <__divsf3_pse+0x26>
 878:	9f 5f       	subi	r25, 0xFF	; 255
 87a:	5f 4f       	sbci	r21, 0xFF	; 255
 87c:	22 0f       	add	r18, r18
 87e:	33 1f       	adc	r19, r19
 880:	44 1f       	adc	r20, r20
 882:	aa 1f       	adc	r26, r26
 884:	a9 f3       	breq	.-22     	; 0x870 <__divsf3_pse+0x10>
 886:	35 d0       	rcall	.+106    	; 0x8f2 <__divsf3_pse+0x92>
 888:	0e 2e       	mov	r0, r30
 88a:	3a f0       	brmi	.+14     	; 0x89a <__divsf3_pse+0x3a>
 88c:	e0 e8       	ldi	r30, 0x80	; 128
 88e:	32 d0       	rcall	.+100    	; 0x8f4 <__divsf3_pse+0x94>
 890:	91 50       	subi	r25, 0x01	; 1
 892:	50 40       	sbci	r21, 0x00	; 0
 894:	e6 95       	lsr	r30
 896:	00 1c       	adc	r0, r0
 898:	ca f7       	brpl	.-14     	; 0x88c <__divsf3_pse+0x2c>
 89a:	2b d0       	rcall	.+86     	; 0x8f2 <__divsf3_pse+0x92>
 89c:	fe 2f       	mov	r31, r30
 89e:	29 d0       	rcall	.+82     	; 0x8f2 <__divsf3_pse+0x92>
 8a0:	66 0f       	add	r22, r22
 8a2:	77 1f       	adc	r23, r23
 8a4:	88 1f       	adc	r24, r24
 8a6:	bb 1f       	adc	r27, r27
 8a8:	26 17       	cp	r18, r22
 8aa:	37 07       	cpc	r19, r23
 8ac:	48 07       	cpc	r20, r24
 8ae:	ab 07       	cpc	r26, r27
 8b0:	b0 e8       	ldi	r27, 0x80	; 128
 8b2:	09 f0       	breq	.+2      	; 0x8b6 <__divsf3_pse+0x56>
 8b4:	bb 0b       	sbc	r27, r27
 8b6:	80 2d       	mov	r24, r0
 8b8:	bf 01       	movw	r22, r30
 8ba:	ff 27       	eor	r31, r31
 8bc:	93 58       	subi	r25, 0x83	; 131
 8be:	5f 4f       	sbci	r21, 0xFF	; 255
 8c0:	3a f0       	brmi	.+14     	; 0x8d0 <__divsf3_pse+0x70>
 8c2:	9e 3f       	cpi	r25, 0xFE	; 254
 8c4:	51 05       	cpc	r21, r1
 8c6:	78 f0       	brcs	.+30     	; 0x8e6 <__divsf3_pse+0x86>
 8c8:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__fp_inf>
 8cc:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_szero>
 8d0:	5f 3f       	cpi	r21, 0xFF	; 255
 8d2:	e4 f3       	brlt	.-8      	; 0x8cc <__divsf3_pse+0x6c>
 8d4:	98 3e       	cpi	r25, 0xE8	; 232
 8d6:	d4 f3       	brlt	.-12     	; 0x8cc <__divsf3_pse+0x6c>
 8d8:	86 95       	lsr	r24
 8da:	77 95       	ror	r23
 8dc:	67 95       	ror	r22
 8de:	b7 95       	ror	r27
 8e0:	f7 95       	ror	r31
 8e2:	9f 5f       	subi	r25, 0xFF	; 255
 8e4:	c9 f7       	brne	.-14     	; 0x8d8 <__divsf3_pse+0x78>
 8e6:	88 0f       	add	r24, r24
 8e8:	91 1d       	adc	r25, r1
 8ea:	96 95       	lsr	r25
 8ec:	87 95       	ror	r24
 8ee:	97 f9       	bld	r25, 7
 8f0:	08 95       	ret
 8f2:	e1 e0       	ldi	r30, 0x01	; 1
 8f4:	66 0f       	add	r22, r22
 8f6:	77 1f       	adc	r23, r23
 8f8:	88 1f       	adc	r24, r24
 8fa:	bb 1f       	adc	r27, r27
 8fc:	62 17       	cp	r22, r18
 8fe:	73 07       	cpc	r23, r19
 900:	84 07       	cpc	r24, r20
 902:	ba 07       	cpc	r27, r26
 904:	20 f0       	brcs	.+8      	; 0x90e <__divsf3_pse+0xae>
 906:	62 1b       	sub	r22, r18
 908:	73 0b       	sbc	r23, r19
 90a:	84 0b       	sbc	r24, r20
 90c:	ba 0b       	sbc	r27, r26
 90e:	ee 1f       	adc	r30, r30
 910:	88 f7       	brcc	.-30     	; 0x8f4 <__divsf3_pse+0x94>
 912:	e0 95       	com	r30
 914:	08 95       	ret

00000916 <__fixsfsi>:
 916:	0e 94 92 04 	call	0x924	; 0x924 <__fixunssfsi>
 91a:	68 94       	set
 91c:	b1 11       	cpse	r27, r1
 91e:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_szero>
 922:	08 95       	ret

00000924 <__fixunssfsi>:
 924:	0e 94 2e 05 	call	0xa5c	; 0xa5c <__fp_splitA>
 928:	88 f0       	brcs	.+34     	; 0x94c <__fixunssfsi+0x28>
 92a:	9f 57       	subi	r25, 0x7F	; 127
 92c:	98 f0       	brcs	.+38     	; 0x954 <__fixunssfsi+0x30>
 92e:	b9 2f       	mov	r27, r25
 930:	99 27       	eor	r25, r25
 932:	b7 51       	subi	r27, 0x17	; 23
 934:	b0 f0       	brcs	.+44     	; 0x962 <__fixunssfsi+0x3e>
 936:	e1 f0       	breq	.+56     	; 0x970 <__fixunssfsi+0x4c>
 938:	66 0f       	add	r22, r22
 93a:	77 1f       	adc	r23, r23
 93c:	88 1f       	adc	r24, r24
 93e:	99 1f       	adc	r25, r25
 940:	1a f0       	brmi	.+6      	; 0x948 <__fixunssfsi+0x24>
 942:	ba 95       	dec	r27
 944:	c9 f7       	brne	.-14     	; 0x938 <__fixunssfsi+0x14>
 946:	14 c0       	rjmp	.+40     	; 0x970 <__fixunssfsi+0x4c>
 948:	b1 30       	cpi	r27, 0x01	; 1
 94a:	91 f0       	breq	.+36     	; 0x970 <__fixunssfsi+0x4c>
 94c:	0e 94 48 05 	call	0xa90	; 0xa90 <__fp_zero>
 950:	b1 e0       	ldi	r27, 0x01	; 1
 952:	08 95       	ret
 954:	0c 94 48 05 	jmp	0xa90	; 0xa90 <__fp_zero>
 958:	67 2f       	mov	r22, r23
 95a:	78 2f       	mov	r23, r24
 95c:	88 27       	eor	r24, r24
 95e:	b8 5f       	subi	r27, 0xF8	; 248
 960:	39 f0       	breq	.+14     	; 0x970 <__fixunssfsi+0x4c>
 962:	b9 3f       	cpi	r27, 0xF9	; 249
 964:	cc f3       	brlt	.-14     	; 0x958 <__fixunssfsi+0x34>
 966:	86 95       	lsr	r24
 968:	77 95       	ror	r23
 96a:	67 95       	ror	r22
 96c:	b3 95       	inc	r27
 96e:	d9 f7       	brne	.-10     	; 0x966 <__fixunssfsi+0x42>
 970:	3e f4       	brtc	.+14     	; 0x980 <__fixunssfsi+0x5c>
 972:	90 95       	com	r25
 974:	80 95       	com	r24
 976:	70 95       	com	r23
 978:	61 95       	neg	r22
 97a:	7f 4f       	sbci	r23, 0xFF	; 255
 97c:	8f 4f       	sbci	r24, 0xFF	; 255
 97e:	9f 4f       	sbci	r25, 0xFF	; 255
 980:	08 95       	ret

00000982 <__floatunsisf>:
 982:	e8 94       	clt
 984:	09 c0       	rjmp	.+18     	; 0x998 <__floatsisf+0x12>

00000986 <__floatsisf>:
 986:	97 fb       	bst	r25, 7
 988:	3e f4       	brtc	.+14     	; 0x998 <__floatsisf+0x12>
 98a:	90 95       	com	r25
 98c:	80 95       	com	r24
 98e:	70 95       	com	r23
 990:	61 95       	neg	r22
 992:	7f 4f       	sbci	r23, 0xFF	; 255
 994:	8f 4f       	sbci	r24, 0xFF	; 255
 996:	9f 4f       	sbci	r25, 0xFF	; 255
 998:	99 23       	and	r25, r25
 99a:	a9 f0       	breq	.+42     	; 0x9c6 <__floatsisf+0x40>
 99c:	f9 2f       	mov	r31, r25
 99e:	96 e9       	ldi	r25, 0x96	; 150
 9a0:	bb 27       	eor	r27, r27
 9a2:	93 95       	inc	r25
 9a4:	f6 95       	lsr	r31
 9a6:	87 95       	ror	r24
 9a8:	77 95       	ror	r23
 9aa:	67 95       	ror	r22
 9ac:	b7 95       	ror	r27
 9ae:	f1 11       	cpse	r31, r1
 9b0:	f8 cf       	rjmp	.-16     	; 0x9a2 <__floatsisf+0x1c>
 9b2:	fa f4       	brpl	.+62     	; 0x9f2 <__floatsisf+0x6c>
 9b4:	bb 0f       	add	r27, r27
 9b6:	11 f4       	brne	.+4      	; 0x9bc <__floatsisf+0x36>
 9b8:	60 ff       	sbrs	r22, 0
 9ba:	1b c0       	rjmp	.+54     	; 0x9f2 <__floatsisf+0x6c>
 9bc:	6f 5f       	subi	r22, 0xFF	; 255
 9be:	7f 4f       	sbci	r23, 0xFF	; 255
 9c0:	8f 4f       	sbci	r24, 0xFF	; 255
 9c2:	9f 4f       	sbci	r25, 0xFF	; 255
 9c4:	16 c0       	rjmp	.+44     	; 0x9f2 <__floatsisf+0x6c>
 9c6:	88 23       	and	r24, r24
 9c8:	11 f0       	breq	.+4      	; 0x9ce <__floatsisf+0x48>
 9ca:	96 e9       	ldi	r25, 0x96	; 150
 9cc:	11 c0       	rjmp	.+34     	; 0x9f0 <__floatsisf+0x6a>
 9ce:	77 23       	and	r23, r23
 9d0:	21 f0       	breq	.+8      	; 0x9da <__floatsisf+0x54>
 9d2:	9e e8       	ldi	r25, 0x8E	; 142
 9d4:	87 2f       	mov	r24, r23
 9d6:	76 2f       	mov	r23, r22
 9d8:	05 c0       	rjmp	.+10     	; 0x9e4 <__floatsisf+0x5e>
 9da:	66 23       	and	r22, r22
 9dc:	71 f0       	breq	.+28     	; 0x9fa <__floatsisf+0x74>
 9de:	96 e8       	ldi	r25, 0x86	; 134
 9e0:	86 2f       	mov	r24, r22
 9e2:	70 e0       	ldi	r23, 0x00	; 0
 9e4:	60 e0       	ldi	r22, 0x00	; 0
 9e6:	2a f0       	brmi	.+10     	; 0x9f2 <__floatsisf+0x6c>
 9e8:	9a 95       	dec	r25
 9ea:	66 0f       	add	r22, r22
 9ec:	77 1f       	adc	r23, r23
 9ee:	88 1f       	adc	r24, r24
 9f0:	da f7       	brpl	.-10     	; 0x9e8 <__floatsisf+0x62>
 9f2:	88 0f       	add	r24, r24
 9f4:	96 95       	lsr	r25
 9f6:	87 95       	ror	r24
 9f8:	97 f9       	bld	r25, 7
 9fa:	08 95       	ret

000009fc <__fp_inf>:
 9fc:	97 f9       	bld	r25, 7
 9fe:	9f 67       	ori	r25, 0x7F	; 127
 a00:	80 e8       	ldi	r24, 0x80	; 128
 a02:	70 e0       	ldi	r23, 0x00	; 0
 a04:	60 e0       	ldi	r22, 0x00	; 0
 a06:	08 95       	ret

00000a08 <__fp_nan>:
 a08:	9f ef       	ldi	r25, 0xFF	; 255
 a0a:	80 ec       	ldi	r24, 0xC0	; 192
 a0c:	08 95       	ret

00000a0e <__fp_pscA>:
 a0e:	00 24       	eor	r0, r0
 a10:	0a 94       	dec	r0
 a12:	16 16       	cp	r1, r22
 a14:	17 06       	cpc	r1, r23
 a16:	18 06       	cpc	r1, r24
 a18:	09 06       	cpc	r0, r25
 a1a:	08 95       	ret

00000a1c <__fp_pscB>:
 a1c:	00 24       	eor	r0, r0
 a1e:	0a 94       	dec	r0
 a20:	12 16       	cp	r1, r18
 a22:	13 06       	cpc	r1, r19
 a24:	14 06       	cpc	r1, r20
 a26:	05 06       	cpc	r0, r21
 a28:	08 95       	ret

00000a2a <__fp_round>:
 a2a:	09 2e       	mov	r0, r25
 a2c:	03 94       	inc	r0
 a2e:	00 0c       	add	r0, r0
 a30:	11 f4       	brne	.+4      	; 0xa36 <__fp_round+0xc>
 a32:	88 23       	and	r24, r24
 a34:	52 f0       	brmi	.+20     	; 0xa4a <__fp_round+0x20>
 a36:	bb 0f       	add	r27, r27
 a38:	40 f4       	brcc	.+16     	; 0xa4a <__fp_round+0x20>
 a3a:	bf 2b       	or	r27, r31
 a3c:	11 f4       	brne	.+4      	; 0xa42 <__fp_round+0x18>
 a3e:	60 ff       	sbrs	r22, 0
 a40:	04 c0       	rjmp	.+8      	; 0xa4a <__fp_round+0x20>
 a42:	6f 5f       	subi	r22, 0xFF	; 255
 a44:	7f 4f       	sbci	r23, 0xFF	; 255
 a46:	8f 4f       	sbci	r24, 0xFF	; 255
 a48:	9f 4f       	sbci	r25, 0xFF	; 255
 a4a:	08 95       	ret

00000a4c <__fp_split3>:
 a4c:	57 fd       	sbrc	r21, 7
 a4e:	90 58       	subi	r25, 0x80	; 128
 a50:	44 0f       	add	r20, r20
 a52:	55 1f       	adc	r21, r21
 a54:	59 f0       	breq	.+22     	; 0xa6c <__fp_splitA+0x10>
 a56:	5f 3f       	cpi	r21, 0xFF	; 255
 a58:	71 f0       	breq	.+28     	; 0xa76 <__fp_splitA+0x1a>
 a5a:	47 95       	ror	r20

00000a5c <__fp_splitA>:
 a5c:	88 0f       	add	r24, r24
 a5e:	97 fb       	bst	r25, 7
 a60:	99 1f       	adc	r25, r25
 a62:	61 f0       	breq	.+24     	; 0xa7c <__fp_splitA+0x20>
 a64:	9f 3f       	cpi	r25, 0xFF	; 255
 a66:	79 f0       	breq	.+30     	; 0xa86 <__fp_splitA+0x2a>
 a68:	87 95       	ror	r24
 a6a:	08 95       	ret
 a6c:	12 16       	cp	r1, r18
 a6e:	13 06       	cpc	r1, r19
 a70:	14 06       	cpc	r1, r20
 a72:	55 1f       	adc	r21, r21
 a74:	f2 cf       	rjmp	.-28     	; 0xa5a <__fp_split3+0xe>
 a76:	46 95       	lsr	r20
 a78:	f1 df       	rcall	.-30     	; 0xa5c <__fp_splitA>
 a7a:	08 c0       	rjmp	.+16     	; 0xa8c <__fp_splitA+0x30>
 a7c:	16 16       	cp	r1, r22
 a7e:	17 06       	cpc	r1, r23
 a80:	18 06       	cpc	r1, r24
 a82:	99 1f       	adc	r25, r25
 a84:	f1 cf       	rjmp	.-30     	; 0xa68 <__fp_splitA+0xc>
 a86:	86 95       	lsr	r24
 a88:	71 05       	cpc	r23, r1
 a8a:	61 05       	cpc	r22, r1
 a8c:	08 94       	sec
 a8e:	08 95       	ret

00000a90 <__fp_zero>:
 a90:	e8 94       	clt

00000a92 <__fp_szero>:
 a92:	bb 27       	eor	r27, r27
 a94:	66 27       	eor	r22, r22
 a96:	77 27       	eor	r23, r23
 a98:	cb 01       	movw	r24, r22
 a9a:	97 f9       	bld	r25, 7
 a9c:	08 95       	ret

00000a9e <__mulsf3>:
 a9e:	0e 94 62 05 	call	0xac4	; 0xac4 <__mulsf3x>
 aa2:	0c 94 15 05 	jmp	0xa2a	; 0xa2a <__fp_round>
 aa6:	0e 94 07 05 	call	0xa0e	; 0xa0e <__fp_pscA>
 aaa:	38 f0       	brcs	.+14     	; 0xaba <__mulsf3+0x1c>
 aac:	0e 94 0e 05 	call	0xa1c	; 0xa1c <__fp_pscB>
 ab0:	20 f0       	brcs	.+8      	; 0xaba <__mulsf3+0x1c>
 ab2:	95 23       	and	r25, r21
 ab4:	11 f0       	breq	.+4      	; 0xaba <__mulsf3+0x1c>
 ab6:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__fp_inf>
 aba:	0c 94 04 05 	jmp	0xa08	; 0xa08 <__fp_nan>
 abe:	11 24       	eor	r1, r1
 ac0:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_szero>

00000ac4 <__mulsf3x>:
 ac4:	0e 94 26 05 	call	0xa4c	; 0xa4c <__fp_split3>
 ac8:	70 f3       	brcs	.-36     	; 0xaa6 <__mulsf3+0x8>

00000aca <__mulsf3_pse>:
 aca:	95 9f       	mul	r25, r21
 acc:	c1 f3       	breq	.-16     	; 0xabe <__mulsf3+0x20>
 ace:	95 0f       	add	r25, r21
 ad0:	50 e0       	ldi	r21, 0x00	; 0
 ad2:	55 1f       	adc	r21, r21
 ad4:	62 9f       	mul	r22, r18
 ad6:	f0 01       	movw	r30, r0
 ad8:	72 9f       	mul	r23, r18
 ada:	bb 27       	eor	r27, r27
 adc:	f0 0d       	add	r31, r0
 ade:	b1 1d       	adc	r27, r1
 ae0:	63 9f       	mul	r22, r19
 ae2:	aa 27       	eor	r26, r26
 ae4:	f0 0d       	add	r31, r0
 ae6:	b1 1d       	adc	r27, r1
 ae8:	aa 1f       	adc	r26, r26
 aea:	64 9f       	mul	r22, r20
 aec:	66 27       	eor	r22, r22
 aee:	b0 0d       	add	r27, r0
 af0:	a1 1d       	adc	r26, r1
 af2:	66 1f       	adc	r22, r22
 af4:	82 9f       	mul	r24, r18
 af6:	22 27       	eor	r18, r18
 af8:	b0 0d       	add	r27, r0
 afa:	a1 1d       	adc	r26, r1
 afc:	62 1f       	adc	r22, r18
 afe:	73 9f       	mul	r23, r19
 b00:	b0 0d       	add	r27, r0
 b02:	a1 1d       	adc	r26, r1
 b04:	62 1f       	adc	r22, r18
 b06:	83 9f       	mul	r24, r19
 b08:	a0 0d       	add	r26, r0
 b0a:	61 1d       	adc	r22, r1
 b0c:	22 1f       	adc	r18, r18
 b0e:	74 9f       	mul	r23, r20
 b10:	33 27       	eor	r19, r19
 b12:	a0 0d       	add	r26, r0
 b14:	61 1d       	adc	r22, r1
 b16:	23 1f       	adc	r18, r19
 b18:	84 9f       	mul	r24, r20
 b1a:	60 0d       	add	r22, r0
 b1c:	21 1d       	adc	r18, r1
 b1e:	82 2f       	mov	r24, r18
 b20:	76 2f       	mov	r23, r22
 b22:	6a 2f       	mov	r22, r26
 b24:	11 24       	eor	r1, r1
 b26:	9f 57       	subi	r25, 0x7F	; 127
 b28:	50 40       	sbci	r21, 0x00	; 0
 b2a:	9a f0       	brmi	.+38     	; 0xb52 <__mulsf3_pse+0x88>
 b2c:	f1 f0       	breq	.+60     	; 0xb6a <__mulsf3_pse+0xa0>
 b2e:	88 23       	and	r24, r24
 b30:	4a f0       	brmi	.+18     	; 0xb44 <__mulsf3_pse+0x7a>
 b32:	ee 0f       	add	r30, r30
 b34:	ff 1f       	adc	r31, r31
 b36:	bb 1f       	adc	r27, r27
 b38:	66 1f       	adc	r22, r22
 b3a:	77 1f       	adc	r23, r23
 b3c:	88 1f       	adc	r24, r24
 b3e:	91 50       	subi	r25, 0x01	; 1
 b40:	50 40       	sbci	r21, 0x00	; 0
 b42:	a9 f7       	brne	.-22     	; 0xb2e <__mulsf3_pse+0x64>
 b44:	9e 3f       	cpi	r25, 0xFE	; 254
 b46:	51 05       	cpc	r21, r1
 b48:	80 f0       	brcs	.+32     	; 0xb6a <__mulsf3_pse+0xa0>
 b4a:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__fp_inf>
 b4e:	0c 94 49 05 	jmp	0xa92	; 0xa92 <__fp_szero>
 b52:	5f 3f       	cpi	r21, 0xFF	; 255
 b54:	e4 f3       	brlt	.-8      	; 0xb4e <__mulsf3_pse+0x84>
 b56:	98 3e       	cpi	r25, 0xE8	; 232
 b58:	d4 f3       	brlt	.-12     	; 0xb4e <__mulsf3_pse+0x84>
 b5a:	86 95       	lsr	r24
 b5c:	77 95       	ror	r23
 b5e:	67 95       	ror	r22
 b60:	b7 95       	ror	r27
 b62:	f7 95       	ror	r31
 b64:	e7 95       	ror	r30
 b66:	9f 5f       	subi	r25, 0xFF	; 255
 b68:	c1 f7       	brne	.-16     	; 0xb5a <__mulsf3_pse+0x90>
 b6a:	fe 2b       	or	r31, r30
 b6c:	88 0f       	add	r24, r24
 b6e:	91 1d       	adc	r25, r1
 b70:	96 95       	lsr	r25
 b72:	87 95       	ror	r24
 b74:	97 f9       	bld	r25, 7
 b76:	08 95       	ret

00000b78 <__tablejump2__>:
 b78:	ee 0f       	add	r30, r30
 b7a:	ff 1f       	adc	r31, r31
 b7c:	88 1f       	adc	r24, r24
 b7e:	8b bf       	out	0x3b, r24	; 59
 b80:	07 90       	elpm	r0, Z+
 b82:	f6 91       	elpm	r31, Z
 b84:	e0 2d       	mov	r30, r0
 b86:	1b be       	out	0x3b, r1	; 59
 b88:	19 94       	eijmp

00000b8a <_exit>:
 b8a:	f8 94       	cli

00000b8c <__stop_program>:
 b8c:	ff cf       	rjmp	.-2      	; 0xb8c <__stop_program>
