
Lab5_lcd_voltage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000097e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00802000  00802000  000009d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000009d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000a04  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000098  00000000  00000000  00000a44  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000fe5  00000000  00000000  00000adc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000002e7  00000000  00000000  00001ac1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000026b  00000000  00000000  00001da8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000188  00000000  00000000  00002014  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000a66  00000000  00000000  0000219c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000004c2  00000000  00000000  00002c02  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a0  00000000  00000000  000030c4  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
   8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
   c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  10:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  14:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  18:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  1c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  20:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  24:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  28:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  2c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  30:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  34:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  38:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  3c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  40:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  44:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  48:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  4c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  50:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  54:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  58:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  5c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  60:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  64:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  68:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  6c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  70:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  74:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  78:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  7c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  80:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  84:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  88:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  8c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  90:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  94:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  98:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  9c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  a8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  ac:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  b8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  bc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  c8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  cc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  d8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  dc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  e8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  ec:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  f8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
  fc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 100:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 104:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 108:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 10c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 110:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 114:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 118:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 11c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 120:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 124:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 128:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 12c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 130:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 134:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 138:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 13c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 140:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 144:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 148:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 14c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 150:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 154:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 158:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 15c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 160:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 164:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 168:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 16c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 170:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 174:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 178:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 17c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 180:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 184:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 188:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 18c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 190:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 194:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 198:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 19c:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1a8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1ac:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1b8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1bc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1c8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1cc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1d8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1dc:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1e8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1ec:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f0:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f4:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>
 1f8:	0c 94 0e 01 	jmp	0x21c	; 0x21c <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59
 214:	0e 94 69 02 	call	0x4d2	; 0x4d2 <main>
 218:	0c 94 bd 04 	jmp	0x97a	; 0x97a <_exit>

0000021c <__bad_interrupt>:
 21c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000220 <adc_init>:
* INPUTS: None
* OUTPUTS: None
*******************************/
void adc_init(void)
{
	PORTB.DIRCLR = PIN7_bm | PIN0_bm; //set pin7 and pin0(2.5V ref) as input
 220:	81 e8       	ldi	r24, 0x81	; 129
 222:	80 93 22 06 	sts	0x0622, r24
	ADCB.CH0.INTCTRL = 0x00; //int flag on conversion only (resets itself via hardware)
	ADCB.CH0.MUXCTRL = 0x31 ;// use ADCB7 as Input
	ADCB.CTRLA = ADC_ENABLE_bm; //enable ADC
	ADCB.CH0.CTRL = 0x81; //start channel 0, single ended*/
	
	ADCB.CTRLA = ADC_FLUSH_bm;
 226:	e0 e4       	ldi	r30, 0x40	; 64
 228:	f2 e0       	ldi	r31, 0x02	; 2
 22a:	82 e0       	ldi	r24, 0x02	; 2
 22c:	80 83       	st	Z, r24
	ADCB.CTRLB = ADC_CONMODE_bm | ADC_RESOLUTION_12BIT_gc;
 22e:	80 e1       	ldi	r24, 0x10	; 16
 230:	81 83       	std	Z+1, r24	; 0x01
	ADCB.REFCTRL = ADC_REFSEL_AREFB_gc;
 232:	80 e3       	ldi	r24, 0x30	; 48
 234:	82 83       	std	Z+2, r24	; 0x02
	ADCB.PRESCALER = ADC_PRESCALER_DIV64_gc;
 236:	84 e0       	ldi	r24, 0x04	; 4
 238:	84 83       	std	Z+4, r24	; 0x04
	ADCB.CTRLA= ADC_ENABLE_bm;
 23a:	81 e0       	ldi	r24, 0x01	; 1
 23c:	80 83       	st	Z, r24
	ADCB.CH0.CTRL = ADC_CH_INPUTMODE_DIFF_gc | ADC_CH0START_bm;
 23e:	86 e0       	ldi	r24, 0x06	; 6
 240:	80 a3       	std	Z+32, r24	; 0x20
	ADCB.CH0.MUXCTRL = 0x3F;
 242:	8f e3       	ldi	r24, 0x3F	; 63
 244:	81 a3       	std	Z+33, r24	; 0x21
	ADCB.CH0.INTCTRL= 0;
 246:	12 a2       	std	Z+34, r1	; 0x22
 248:	08 95       	ret

0000024a <getVoltage>:
* INPUTS: None
* OUTPUTS: float type value for voltage
*******************************/
float getVoltage(void)
{
	ADCB.CTRLA = 0x05; //start channel 0 conversion, single ended	
 24a:	85 e0       	ldi	r24, 0x05	; 5
 24c:	80 93 40 02 	sts	0x0240, r24
	while((ADCB.CH0.INTFLAGS & 0x01) == 0 );
 250:	e0 e4       	ldi	r30, 0x40	; 64
 252:	f2 e0       	ldi	r31, 0x02	; 2
 254:	83 a1       	ldd	r24, Z+35	; 0x23
 256:	80 ff       	sbrs	r24, 0
 258:	fd cf       	rjmp	.-6      	; 0x254 <getVoltage+0xa>
	float x = (float) (ADCB.CH0.RES) ;
 25a:	60 91 64 02 	lds	r22, 0x0264
 25e:	70 91 65 02 	lds	r23, 0x0265
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	90 e0       	ldi	r25, 0x00	; 0
 266:	0e 94 99 03 	call	0x732	; 0x732 <__floatunsisf>
		x= 0;
	}
	else
	{
		//x -= 200;
		x *= 5.0; //convert to volts
 26a:	20 e0       	ldi	r18, 0x00	; 0
 26c:	30 e0       	ldi	r19, 0x00	; 0
 26e:	40 ea       	ldi	r20, 0xA0	; 160
 270:	50 e4       	ldi	r21, 0x40	; 64
 272:	0e 94 2c 04 	call	0x858	; 0x858 <__mulsf3>
		x /= 2047.0;
 276:	20 e0       	ldi	r18, 0x00	; 0
 278:	30 ee       	ldi	r19, 0xE0	; 224
 27a:	4f ef       	ldi	r20, 0xFF	; 255
 27c:	54 e4       	ldi	r21, 0x44	; 68
 27e:	0e 94 f1 02 	call	0x5e2	; 0x5e2 <__divsf3>
	}
	return x;
}
 282:	08 95       	ret

00000284 <ebi_init>:
* INPUTS: None
* OUTPUTS: None
*******************************/
void ebi_init(void)
{
	PORTH.DIRSET = 0x37; // Set RE, WE, CS0, CS1, ALE1 bits as output
 284:	e0 ee       	ldi	r30, 0xE0	; 224
 286:	f6 e0       	ldi	r31, 0x06	; 6
 288:	87 e3       	ldi	r24, 0x37	; 55
 28a:	81 83       	std	Z+1, r24	; 0x01
	PORTH.OUTSET = 0x33;
 28c:	93 e3       	ldi	r25, 0x33	; 51
 28e:	95 83       	std	Z+5, r25	; 0x05
	
	PORTK.DIRSET = 0xFF; // Set PORTK to output (ADDR 7-0/15-8)
 290:	9f ef       	ldi	r25, 0xFF	; 255
 292:	90 93 21 07 	sts	0x0721, r25
	PORTJ.DIRSET = 0xFF; // Set PORTJ to output (DATA7-0)
 296:	90 93 01 07 	sts	0x0701, r25
	
	EBI.CTRL = EBI_SRMODE_ALE1_gc | EBI_IFMODE_3PORT_gc; // Set EBI to 3 Port (H, J, K) SRAM ALE1 mode.
 29a:	e0 e4       	ldi	r30, 0x40	; 64
 29c:	f4 e0       	ldi	r31, 0x04	; 4
 29e:	91 e0       	ldi	r25, 0x01	; 1
 2a0:	90 83       	st	Z, r25
	
	//IO PORT setup on CS0
	EBI.CS0.BASEADDRH = (uint8_t) (IO_ADDR>>16) & 0xFF; //Set highest byte of IO port base address on CS0
 2a2:	13 8a       	std	Z+19, r1	; 0x13
	EBI.CS0.BASEADDRL = (uint8_t) (IO_ADDR>>8) & 0xFF; // Set middle byte of IO port base address on CS0
 2a4:	90 e4       	ldi	r25, 0x40	; 64
 2a6:	92 8b       	std	Z+18, r25	; 0x12
	EBI.CS0.CTRLA = (uint8_t) 0x19; //set IO Port to 16K address size and SRAM mode
 2a8:	99 e1       	ldi	r25, 0x19	; 25
 2aa:	90 8b       	std	Z+16, r25	; 0x10
	
	//LCD setup on CS1
	EBI.CS1.BASEADDRH = (uint8_t) (CS1_ADDR>>16) & 0xFF; //Set highest byte of LCD base address on CS1
 2ac:	87 8b       	std	Z+23, r24	; 0x17
	EBI.CS1.BASEADDRL = (uint8_t) (CS1_ADDR>>8) & 0xFF; //Set middle byte of IO port base address on CS1
 2ae:	16 8a       	std	Z+22, r1	; 0x16
	EBI.CS1.CTRLA = (uint8_t) EBI_CS_ASPACE_64KB_gc | EBI_CS_MODE_SRAM_gc ;
 2b0:	81 e2       	ldi	r24, 0x21	; 33
 2b2:	84 8b       	std	Z+20, r24	; 0x14
 2b4:	08 95       	ret

000002b6 <lcd_wait>:
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_wait(void)
{
	asm volatile ("nop");
 2b6:	00 00       	nop
	asm volatile ("nop");
 2b8:	00 00       	nop
	while(( __far_mem_read(LCD_instr) >> 7) == 0x01); //wait while busy flag on bit7 is high
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	50 ea       	ldi	r21, 0xA0	; 160
 2be:	67 e3       	ldi	r22, 0x37	; 55
 2c0:	70 e0       	ldi	r23, 0x00	; 0
 2c2:	0b b6       	in	r0, 0x3b	; 59
 2c4:	6b bf       	out	0x3b, r22	; 59
 2c6:	fa 01       	movw	r30, r20
 2c8:	80 81       	ld	r24, Z
 2ca:	0b be       	out	0x3b, r0	; 59
 2cc:	88 23       	and	r24, r24
 2ce:	cc f3       	brlt	.-14     	; 0x2c2 <lcd_wait+0xc>
}
 2d0:	08 95       	ret

000002d2 <lcd_out>:
* FUNCTION: Send 1 char out to lcd. Must call ebi_init() and lcd_init() first
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_out(char value)
{
 2d2:	cf 93       	push	r28
 2d4:	c8 2f       	mov	r28, r24
	lcd_wait();
 2d6:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lcd_wait>
	__far_mem_write(LCD_data, value);
 2da:	41 e0       	ldi	r20, 0x01	; 1
 2dc:	50 ea       	ldi	r21, 0xA0	; 160
 2de:	67 e3       	ldi	r22, 0x37	; 55
 2e0:	70 e0       	ldi	r23, 0x00	; 0
 2e2:	0b b6       	in	r0, 0x3b	; 59
 2e4:	6b bf       	out	0x3b, r22	; 59
 2e6:	fa 01       	movw	r30, r20
 2e8:	c0 83       	st	Z, r28
 2ea:	0b be       	out	0x3b, r0	; 59
}
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <lcd_voltage>:
* FUNCTION: display voltage on LCD
* INPUTS: float value for voltage from ADC
* OUTPUTS: None
*******************************/
void lcd_voltage(float voltage)
{
 2f0:	8f 92       	push	r8
 2f2:	9f 92       	push	r9
 2f4:	af 92       	push	r10
 2f6:	bf 92       	push	r11
 2f8:	cf 92       	push	r12
 2fa:	df 92       	push	r13
 2fc:	ef 92       	push	r14
 2fe:	ff 92       	push	r15
 300:	4b 01       	movw	r8, r22
 302:	5c 01       	movw	r10, r24
	char firstdigit, seconddigit, thirddigit;// to get digit values
	firstdigit = (int) voltage; //cast voltage as int to get first digit
 304:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__fixsfsi>
 308:	6b 01       	movw	r12, r22
 30a:	7c 01       	movw	r14, r24
	lcd_out((char) (firstdigit + 0x30));	//display first digit
 30c:	80 e3       	ldi	r24, 0x30	; 48
 30e:	8c 0d       	add	r24, r12
 310:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_out>
	lcd_out('.');
 314:	8e e2       	ldi	r24, 0x2E	; 46
 316:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_out>
	float voltage2 = 10*(voltage - firstdigit); //move next digit to 1s place
 31a:	dd 24       	eor	r13, r13
 31c:	b6 01       	movw	r22, r12
 31e:	dd 0c       	add	r13, r13
 320:	88 0b       	sbc	r24, r24
 322:	99 0b       	sbc	r25, r25
 324:	0e 94 9b 03 	call	0x736	; 0x736 <__floatsisf>
 328:	9b 01       	movw	r18, r22
 32a:	ac 01       	movw	r20, r24
 32c:	c5 01       	movw	r24, r10
 32e:	b4 01       	movw	r22, r8
 330:	0e 94 84 02 	call	0x508	; 0x508 <__subsf3>
 334:	20 e0       	ldi	r18, 0x00	; 0
 336:	30 e0       	ldi	r19, 0x00	; 0
 338:	40 e2       	ldi	r20, 0x20	; 32
 33a:	51 e4       	ldi	r21, 0x41	; 65
 33c:	0e 94 2c 04 	call	0x858	; 0x858 <__mulsf3>
 340:	4b 01       	movw	r8, r22
 342:	5c 01       	movw	r10, r24
	seconddigit = (int) voltage2;	//get second digit via type cast
 344:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__fixsfsi>
 348:	6b 01       	movw	r12, r22
 34a:	7c 01       	movw	r14, r24
	lcd_out((char) (seconddigit + 0x30));	//display 2nd digit
 34c:	80 e3       	ldi	r24, 0x30	; 48
 34e:	8c 0d       	add	r24, r12
 350:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_out>
	float voltage3 = 10*(voltage2 - seconddigit); //get and display 3rd digit
 354:	dd 24       	eor	r13, r13
 356:	b6 01       	movw	r22, r12
 358:	dd 0c       	add	r13, r13
 35a:	88 0b       	sbc	r24, r24
 35c:	99 0b       	sbc	r25, r25
 35e:	0e 94 9b 03 	call	0x736	; 0x736 <__floatsisf>
 362:	9b 01       	movw	r18, r22
 364:	ac 01       	movw	r20, r24
 366:	c5 01       	movw	r24, r10
 368:	b4 01       	movw	r22, r8
 36a:	0e 94 84 02 	call	0x508	; 0x508 <__subsf3>
 36e:	20 e0       	ldi	r18, 0x00	; 0
 370:	30 e0       	ldi	r19, 0x00	; 0
 372:	40 e2       	ldi	r20, 0x20	; 32
 374:	51 e4       	ldi	r21, 0x41	; 65
 376:	0e 94 2c 04 	call	0x858	; 0x858 <__mulsf3>
	thirddigit = (int) voltage3;
 37a:	0e 94 63 03 	call	0x6c6	; 0x6c6 <__fixsfsi>
	lcd_out((char) (thirddigit + 0x30));
 37e:	80 e3       	ldi	r24, 0x30	; 48
 380:	86 0f       	add	r24, r22
 382:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_out>
	lcd_out('V');
 386:	86 e5       	ldi	r24, 0x56	; 86
 388:	0e 94 69 01 	call	0x2d2	; 0x2d2 <lcd_out>
	// don't have the hex display here yet

}
 38c:	ff 90       	pop	r15
 38e:	ef 90       	pop	r14
 390:	df 90       	pop	r13
 392:	cf 90       	pop	r12
 394:	bf 90       	pop	r11
 396:	af 90       	pop	r10
 398:	9f 90       	pop	r9
 39a:	8f 90       	pop	r8
 39c:	08 95       	ret

0000039e <lcd_delay>:
* FUNCTION: For use in lcd_init to allow device powerup. Must call ebi_init()first
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_delay(void)
{
 39e:	cf 93       	push	r28
 3a0:	df 93       	push	r29
 3a2:	00 d0       	rcall	.+0      	; 0x3a4 <lcd_delay+0x6>
 3a4:	1f 92       	push	r1
 3a6:	cd b7       	in	r28, 0x3d	; 61
 3a8:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t ticks= 0;            //declare volatile so compiler won't optimize
 3aa:	19 82       	std	Y+1, r1	; 0x01
 3ac:	1a 82       	std	Y+2, r1	; 0x02
 3ae:	1b 82       	std	Y+3, r1	; 0x03
 3b0:	1c 82       	std	Y+4, r1	; 0x04
	while(ticks<=(F_CPU>>10))  //enough delay to allow for LCD powerup
 3b2:	89 81       	ldd	r24, Y+1	; 0x01
 3b4:	9a 81       	ldd	r25, Y+2	; 0x02
 3b6:	ab 81       	ldd	r26, Y+3	; 0x03
 3b8:	bc 81       	ldd	r27, Y+4	; 0x04
 3ba:	82 3a       	cpi	r24, 0xA2	; 162
 3bc:	97 40       	sbci	r25, 0x07	; 7
 3be:	a1 05       	cpc	r26, r1
 3c0:	b1 05       	cpc	r27, r1
 3c2:	a0 f4       	brcc	.+40     	; 0x3ec <lcd_delay+0x4e>
	{
		ticks++;
 3c4:	89 81       	ldd	r24, Y+1	; 0x01
 3c6:	9a 81       	ldd	r25, Y+2	; 0x02
 3c8:	ab 81       	ldd	r26, Y+3	; 0x03
 3ca:	bc 81       	ldd	r27, Y+4	; 0x04
 3cc:	01 96       	adiw	r24, 0x01	; 1
 3ce:	a1 1d       	adc	r26, r1
 3d0:	b1 1d       	adc	r27, r1
 3d2:	89 83       	std	Y+1, r24	; 0x01
 3d4:	9a 83       	std	Y+2, r25	; 0x02
 3d6:	ab 83       	std	Y+3, r26	; 0x03
 3d8:	bc 83       	std	Y+4, r27	; 0x04
* OUTPUTS: None
*******************************/
void lcd_delay(void)
{
	volatile uint32_t ticks= 0;            //declare volatile so compiler won't optimize
	while(ticks<=(F_CPU>>10))  //enough delay to allow for LCD powerup
 3da:	89 81       	ldd	r24, Y+1	; 0x01
 3dc:	9a 81       	ldd	r25, Y+2	; 0x02
 3de:	ab 81       	ldd	r26, Y+3	; 0x03
 3e0:	bc 81       	ldd	r27, Y+4	; 0x04
 3e2:	82 3a       	cpi	r24, 0xA2	; 162
 3e4:	97 40       	sbci	r25, 0x07	; 7
 3e6:	a1 05       	cpc	r26, r1
 3e8:	b1 05       	cpc	r27, r1
 3ea:	60 f3       	brcs	.-40     	; 0x3c4 <lcd_delay+0x26>
	{
		ticks++;
	}
}
 3ec:	24 96       	adiw	r28, 0x04	; 4
 3ee:	cd bf       	out	0x3d, r28	; 61
 3f0:	de bf       	out	0x3e, r29	; 62
 3f2:	df 91       	pop	r29
 3f4:	cf 91       	pop	r28
 3f6:	08 95       	ret

000003f8 <lcd_clr>:
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_clr(void)
{
	lcd_wait();
 3f8:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lcd_wait>
	__far_mem_write(LCD_instr, 0x01);
 3fc:	21 e0       	ldi	r18, 0x01	; 1
 3fe:	80 e0       	ldi	r24, 0x00	; 0
 400:	90 ea       	ldi	r25, 0xA0	; 160
 402:	a7 e3       	ldi	r26, 0x37	; 55
 404:	b0 e0       	ldi	r27, 0x00	; 0
 406:	0b b6       	in	r0, 0x3b	; 59
 408:	ab bf       	out	0x3b, r26	; 59
 40a:	fc 01       	movw	r30, r24
 40c:	20 83       	st	Z, r18
 40e:	0b be       	out	0x3b, r0	; 59
 410:	08 95       	ret

00000412 <lcd_pos>:
* FUNCTION: Set LCD cursor to designated position. Must call ebi_init()first
* INPUTS: x position and y position
* OUTPUTS: None
*******************************/
void lcd_pos(uint8_t row, uint8_t col)
{
 412:	cf 93       	push	r28
	uint8_t x = 0x00;
	if (row)
 414:	88 23       	and	r24, r24
 416:	11 f0       	breq	.+4      	; 0x41c <lcd_pos+0xa>
	x = 0x40;
 418:	c0 e4       	ldi	r28, 0x40	; 64
 41a:	01 c0       	rjmp	.+2      	; 0x41e <lcd_pos+0xc>
* INPUTS: x position and y position
* OUTPUTS: None
*******************************/
void lcd_pos(uint8_t row, uint8_t col)
{
	uint8_t x = 0x00;
 41c:	c0 e0       	ldi	r28, 0x00	; 0
	if (row)
	x = 0x40;
	x |= (col & 0x0F);
 41e:	6f 70       	andi	r22, 0x0F	; 15
 420:	c6 2b       	or	r28, r22
	x |= (1 << 7);
	lcd_wait();
 422:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lcd_wait>
{
	uint8_t x = 0x00;
	if (row)
	x = 0x40;
	x |= (col & 0x0F);
	x |= (1 << 7);
 426:	c0 68       	ori	r28, 0x80	; 128
	lcd_wait();
	__far_mem_write(LCD_instr, x);
 428:	80 e0       	ldi	r24, 0x00	; 0
 42a:	90 ea       	ldi	r25, 0xA0	; 160
 42c:	a7 e3       	ldi	r26, 0x37	; 55
 42e:	b0 e0       	ldi	r27, 0x00	; 0
 430:	0b b6       	in	r0, 0x3b	; 59
 432:	ab bf       	out	0x3b, r26	; 59
 434:	fc 01       	movw	r30, r24
 436:	c0 83       	st	Z, r28
 438:	0b be       	out	0x3b, r0	; 59
}
 43a:	cf 91       	pop	r28
 43c:	08 95       	ret

0000043e <lcd_init>:
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_init(void)
{
	lcd_delay();//delay to allow device to start up
 43e:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_delay>
	__far_mem_write(LCD_instr, 0x38); //LCD 8 bit, 2 line mode
 442:	28 e3       	ldi	r18, 0x38	; 56
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	90 ea       	ldi	r25, 0xA0	; 160
 448:	a7 e3       	ldi	r26, 0x37	; 55
 44a:	b0 e0       	ldi	r27, 0x00	; 0
 44c:	0b b6       	in	r0, 0x3b	; 59
 44e:	ab bf       	out	0x3b, r26	; 59
 450:	fc 01       	movw	r30, r24
 452:	20 83       	st	Z, r18
 454:	0b be       	out	0x3b, r0	; 59
	lcd_wait();
 456:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lcd_wait>
	__far_mem_write(LCD_instr, 0x38); //LCD 8 bit, 2 line mode
 45a:	28 e3       	ldi	r18, 0x38	; 56
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	90 ea       	ldi	r25, 0xA0	; 160
 460:	a7 e3       	ldi	r26, 0x37	; 55
 462:	b0 e0       	ldi	r27, 0x00	; 0
 464:	0b b6       	in	r0, 0x3b	; 59
 466:	ab bf       	out	0x3b, r26	; 59
 468:	fc 01       	movw	r30, r24
 46a:	20 83       	st	Z, r18
 46c:	0b be       	out	0x3b, r0	; 59
	lcd_wait();
 46e:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lcd_wait>
	__far_mem_write(LCD_instr, 0x0C); //turn LCD display on
 472:	2c e0       	ldi	r18, 0x0C	; 12
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	90 ea       	ldi	r25, 0xA0	; 160
 478:	a7 e3       	ldi	r26, 0x37	; 55
 47a:	b0 e0       	ldi	r27, 0x00	; 0
 47c:	0b b6       	in	r0, 0x3b	; 59
 47e:	ab bf       	out	0x3b, r26	; 59
 480:	fc 01       	movw	r30, r24
 482:	20 83       	st	Z, r18
 484:	0b be       	out	0x3b, r0	; 59
	lcd_clr(); //clear lcd screen
 486:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <lcd_clr>
	lcd_wait();
 48a:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lcd_wait>
	__far_mem_write(LCD_instr, 0x06);// set cursor shift right and no screen shift
 48e:	26 e0       	ldi	r18, 0x06	; 6
 490:	80 e0       	ldi	r24, 0x00	; 0
 492:	90 ea       	ldi	r25, 0xA0	; 160
 494:	a7 e3       	ldi	r26, 0x37	; 55
 496:	b0 e0       	ldi	r27, 0x00	; 0
 498:	0b b6       	in	r0, 0x3b	; 59
 49a:	ab bf       	out	0x3b, r26	; 59
 49c:	fc 01       	movw	r30, r24
 49e:	20 83       	st	Z, r18
 4a0:	0b be       	out	0x3b, r0	; 59
	lcd_pos(0,0);
 4a2:	60 e0       	ldi	r22, 0x00	; 0
 4a4:	80 e0       	ldi	r24, 0x00	; 0
 4a6:	0e 94 09 02 	call	0x412	; 0x412 <lcd_pos>
 4aa:	08 95       	ret

000004ac <lcd_home>:
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_home(void)
{
	lcd_wait();
 4ac:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lcd_wait>
	__far_mem_write(LCD_instr, 0x02);
 4b0:	22 e0       	ldi	r18, 0x02	; 2
 4b2:	80 e0       	ldi	r24, 0x00	; 0
 4b4:	90 ea       	ldi	r25, 0xA0	; 160
 4b6:	a7 e3       	ldi	r26, 0x37	; 55
 4b8:	b0 e0       	ldi	r27, 0x00	; 0
 4ba:	0b b6       	in	r0, 0x3b	; 59
 4bc:	ab bf       	out	0x3b, r26	; 59
 4be:	fc 01       	movw	r30, r24
 4c0:	20 83       	st	Z, r18
 4c2:	0b be       	out	0x3b, r0	; 59
	lcd_wait();
 4c4:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <lcd_wait>
	lcd_pos(0,0);
 4c8:	60 e0       	ldi	r22, 0x00	; 0
 4ca:	80 e0       	ldi	r24, 0x00	; 0
 4cc:	0e 94 09 02 	call	0x412	; 0x412 <lcd_pos>
 4d0:	08 95       	ret

000004d2 <main>:

}

int main(void)
{
    ebi_init();
 4d2:	0e 94 42 01 	call	0x284	; 0x284 <ebi_init>
	lcd_init();
 4d6:	0e 94 1f 02 	call	0x43e	; 0x43e <lcd_init>
	adc_init();
 4da:	0e 94 10 01 	call	0x220	; 0x220 <adc_init>
	float voltage;
	int16_t voltage16;
	
    while (1) 
    {
		lcd_home();
 4de:	0e 94 56 02 	call	0x4ac	; 0x4ac <lcd_home>
		voltage= getVoltage();//3.142; //
 4e2:	0e 94 25 01 	call	0x24a	; 0x24a <getVoltage>
 4e6:	6b 01       	movw	r12, r22
 4e8:	7c 01       	movw	r14, r24
		if(voltage >= 0.01)
 4ea:	2a e0       	ldi	r18, 0x0A	; 10
 4ec:	37 ed       	ldi	r19, 0xD7	; 215
 4ee:	43 e2       	ldi	r20, 0x23	; 35
 4f0:	5c e3       	ldi	r21, 0x3C	; 60
 4f2:	0e 94 27 04 	call	0x84e	; 0x84e <__gesf2>
 4f6:	88 23       	and	r24, r24
 4f8:	24 f0       	brlt	.+8      	; 0x502 <main+0x30>
		lcd_voltage(voltage);
 4fa:	c7 01       	movw	r24, r14
 4fc:	b6 01       	movw	r22, r12
 4fe:	0e 94 78 01 	call	0x2f0	; 0x2f0 <lcd_voltage>
		lcd_delay();
 502:	0e 94 cf 01 	call	0x39e	; 0x39e <lcd_delay>
	}
 506:	eb cf       	rjmp	.-42     	; 0x4de <main+0xc>

00000508 <__subsf3>:
 508:	50 58       	subi	r21, 0x80	; 128

0000050a <__addsf3>:
 50a:	bb 27       	eor	r27, r27
 50c:	aa 27       	eor	r26, r26
 50e:	0e 94 9c 02 	call	0x538	; 0x538 <__addsf3x>
 512:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__fp_round>
 516:	0e 94 df 03 	call	0x7be	; 0x7be <__fp_pscA>
 51a:	38 f0       	brcs	.+14     	; 0x52a <__addsf3+0x20>
 51c:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__fp_pscB>
 520:	20 f0       	brcs	.+8      	; 0x52a <__addsf3+0x20>
 522:	39 f4       	brne	.+14     	; 0x532 <__addsf3+0x28>
 524:	9f 3f       	cpi	r25, 0xFF	; 255
 526:	19 f4       	brne	.+6      	; 0x52e <__addsf3+0x24>
 528:	26 f4       	brtc	.+8      	; 0x532 <__addsf3+0x28>
 52a:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <__fp_nan>
 52e:	0e f4       	brtc	.+2      	; 0x532 <__addsf3+0x28>
 530:	e0 95       	com	r30
 532:	e7 fb       	bst	r30, 7
 534:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__fp_inf>

00000538 <__addsf3x>:
 538:	e9 2f       	mov	r30, r25
 53a:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__fp_split3>
 53e:	58 f3       	brcs	.-42     	; 0x516 <__addsf3+0xc>
 540:	ba 17       	cp	r27, r26
 542:	62 07       	cpc	r22, r18
 544:	73 07       	cpc	r23, r19
 546:	84 07       	cpc	r24, r20
 548:	95 07       	cpc	r25, r21
 54a:	20 f0       	brcs	.+8      	; 0x554 <__addsf3x+0x1c>
 54c:	79 f4       	brne	.+30     	; 0x56c <__addsf3x+0x34>
 54e:	a6 f5       	brtc	.+104    	; 0x5b8 <__addsf3x+0x80>
 550:	0c 94 20 04 	jmp	0x840	; 0x840 <__fp_zero>
 554:	0e f4       	brtc	.+2      	; 0x558 <__addsf3x+0x20>
 556:	e0 95       	com	r30
 558:	0b 2e       	mov	r0, r27
 55a:	ba 2f       	mov	r27, r26
 55c:	a0 2d       	mov	r26, r0
 55e:	0b 01       	movw	r0, r22
 560:	b9 01       	movw	r22, r18
 562:	90 01       	movw	r18, r0
 564:	0c 01       	movw	r0, r24
 566:	ca 01       	movw	r24, r20
 568:	a0 01       	movw	r20, r0
 56a:	11 24       	eor	r1, r1
 56c:	ff 27       	eor	r31, r31
 56e:	59 1b       	sub	r21, r25
 570:	99 f0       	breq	.+38     	; 0x598 <__addsf3x+0x60>
 572:	59 3f       	cpi	r21, 0xF9	; 249
 574:	50 f4       	brcc	.+20     	; 0x58a <__addsf3x+0x52>
 576:	50 3e       	cpi	r21, 0xE0	; 224
 578:	68 f1       	brcs	.+90     	; 0x5d4 <__addsf3x+0x9c>
 57a:	1a 16       	cp	r1, r26
 57c:	f0 40       	sbci	r31, 0x00	; 0
 57e:	a2 2f       	mov	r26, r18
 580:	23 2f       	mov	r18, r19
 582:	34 2f       	mov	r19, r20
 584:	44 27       	eor	r20, r20
 586:	58 5f       	subi	r21, 0xF8	; 248
 588:	f3 cf       	rjmp	.-26     	; 0x570 <__addsf3x+0x38>
 58a:	46 95       	lsr	r20
 58c:	37 95       	ror	r19
 58e:	27 95       	ror	r18
 590:	a7 95       	ror	r26
 592:	f0 40       	sbci	r31, 0x00	; 0
 594:	53 95       	inc	r21
 596:	c9 f7       	brne	.-14     	; 0x58a <__addsf3x+0x52>
 598:	7e f4       	brtc	.+30     	; 0x5b8 <__addsf3x+0x80>
 59a:	1f 16       	cp	r1, r31
 59c:	ba 0b       	sbc	r27, r26
 59e:	62 0b       	sbc	r22, r18
 5a0:	73 0b       	sbc	r23, r19
 5a2:	84 0b       	sbc	r24, r20
 5a4:	ba f0       	brmi	.+46     	; 0x5d4 <__addsf3x+0x9c>
 5a6:	91 50       	subi	r25, 0x01	; 1
 5a8:	a1 f0       	breq	.+40     	; 0x5d2 <__addsf3x+0x9a>
 5aa:	ff 0f       	add	r31, r31
 5ac:	bb 1f       	adc	r27, r27
 5ae:	66 1f       	adc	r22, r22
 5b0:	77 1f       	adc	r23, r23
 5b2:	88 1f       	adc	r24, r24
 5b4:	c2 f7       	brpl	.-16     	; 0x5a6 <__addsf3x+0x6e>
 5b6:	0e c0       	rjmp	.+28     	; 0x5d4 <__addsf3x+0x9c>
 5b8:	ba 0f       	add	r27, r26
 5ba:	62 1f       	adc	r22, r18
 5bc:	73 1f       	adc	r23, r19
 5be:	84 1f       	adc	r24, r20
 5c0:	48 f4       	brcc	.+18     	; 0x5d4 <__addsf3x+0x9c>
 5c2:	87 95       	ror	r24
 5c4:	77 95       	ror	r23
 5c6:	67 95       	ror	r22
 5c8:	b7 95       	ror	r27
 5ca:	f7 95       	ror	r31
 5cc:	9e 3f       	cpi	r25, 0xFE	; 254
 5ce:	08 f0       	brcs	.+2      	; 0x5d2 <__addsf3x+0x9a>
 5d0:	b0 cf       	rjmp	.-160    	; 0x532 <__addsf3+0x28>
 5d2:	93 95       	inc	r25
 5d4:	88 0f       	add	r24, r24
 5d6:	08 f0       	brcs	.+2      	; 0x5da <__addsf3x+0xa2>
 5d8:	99 27       	eor	r25, r25
 5da:	ee 0f       	add	r30, r30
 5dc:	97 95       	ror	r25
 5de:	87 95       	ror	r24
 5e0:	08 95       	ret

000005e2 <__divsf3>:
 5e2:	0e 94 05 03 	call	0x60a	; 0x60a <__divsf3x>
 5e6:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__fp_round>
 5ea:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__fp_pscB>
 5ee:	58 f0       	brcs	.+22     	; 0x606 <__divsf3+0x24>
 5f0:	0e 94 df 03 	call	0x7be	; 0x7be <__fp_pscA>
 5f4:	40 f0       	brcs	.+16     	; 0x606 <__divsf3+0x24>
 5f6:	29 f4       	brne	.+10     	; 0x602 <__divsf3+0x20>
 5f8:	5f 3f       	cpi	r21, 0xFF	; 255
 5fa:	29 f0       	breq	.+10     	; 0x606 <__divsf3+0x24>
 5fc:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__fp_inf>
 600:	51 11       	cpse	r21, r1
 602:	0c 94 21 04 	jmp	0x842	; 0x842 <__fp_szero>
 606:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <__fp_nan>

0000060a <__divsf3x>:
 60a:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__fp_split3>
 60e:	68 f3       	brcs	.-38     	; 0x5ea <__divsf3+0x8>

00000610 <__divsf3_pse>:
 610:	99 23       	and	r25, r25
 612:	b1 f3       	breq	.-20     	; 0x600 <__divsf3+0x1e>
 614:	55 23       	and	r21, r21
 616:	91 f3       	breq	.-28     	; 0x5fc <__divsf3+0x1a>
 618:	95 1b       	sub	r25, r21
 61a:	55 0b       	sbc	r21, r21
 61c:	bb 27       	eor	r27, r27
 61e:	aa 27       	eor	r26, r26
 620:	62 17       	cp	r22, r18
 622:	73 07       	cpc	r23, r19
 624:	84 07       	cpc	r24, r20
 626:	38 f0       	brcs	.+14     	; 0x636 <__divsf3_pse+0x26>
 628:	9f 5f       	subi	r25, 0xFF	; 255
 62a:	5f 4f       	sbci	r21, 0xFF	; 255
 62c:	22 0f       	add	r18, r18
 62e:	33 1f       	adc	r19, r19
 630:	44 1f       	adc	r20, r20
 632:	aa 1f       	adc	r26, r26
 634:	a9 f3       	breq	.-22     	; 0x620 <__divsf3_pse+0x10>
 636:	35 d0       	rcall	.+106    	; 0x6a2 <__divsf3_pse+0x92>
 638:	0e 2e       	mov	r0, r30
 63a:	3a f0       	brmi	.+14     	; 0x64a <__divsf3_pse+0x3a>
 63c:	e0 e8       	ldi	r30, 0x80	; 128
 63e:	32 d0       	rcall	.+100    	; 0x6a4 <__divsf3_pse+0x94>
 640:	91 50       	subi	r25, 0x01	; 1
 642:	50 40       	sbci	r21, 0x00	; 0
 644:	e6 95       	lsr	r30
 646:	00 1c       	adc	r0, r0
 648:	ca f7       	brpl	.-14     	; 0x63c <__divsf3_pse+0x2c>
 64a:	2b d0       	rcall	.+86     	; 0x6a2 <__divsf3_pse+0x92>
 64c:	fe 2f       	mov	r31, r30
 64e:	29 d0       	rcall	.+82     	; 0x6a2 <__divsf3_pse+0x92>
 650:	66 0f       	add	r22, r22
 652:	77 1f       	adc	r23, r23
 654:	88 1f       	adc	r24, r24
 656:	bb 1f       	adc	r27, r27
 658:	26 17       	cp	r18, r22
 65a:	37 07       	cpc	r19, r23
 65c:	48 07       	cpc	r20, r24
 65e:	ab 07       	cpc	r26, r27
 660:	b0 e8       	ldi	r27, 0x80	; 128
 662:	09 f0       	breq	.+2      	; 0x666 <__divsf3_pse+0x56>
 664:	bb 0b       	sbc	r27, r27
 666:	80 2d       	mov	r24, r0
 668:	bf 01       	movw	r22, r30
 66a:	ff 27       	eor	r31, r31
 66c:	93 58       	subi	r25, 0x83	; 131
 66e:	5f 4f       	sbci	r21, 0xFF	; 255
 670:	3a f0       	brmi	.+14     	; 0x680 <__divsf3_pse+0x70>
 672:	9e 3f       	cpi	r25, 0xFE	; 254
 674:	51 05       	cpc	r21, r1
 676:	78 f0       	brcs	.+30     	; 0x696 <__divsf3_pse+0x86>
 678:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__fp_inf>
 67c:	0c 94 21 04 	jmp	0x842	; 0x842 <__fp_szero>
 680:	5f 3f       	cpi	r21, 0xFF	; 255
 682:	e4 f3       	brlt	.-8      	; 0x67c <__divsf3_pse+0x6c>
 684:	98 3e       	cpi	r25, 0xE8	; 232
 686:	d4 f3       	brlt	.-12     	; 0x67c <__divsf3_pse+0x6c>
 688:	86 95       	lsr	r24
 68a:	77 95       	ror	r23
 68c:	67 95       	ror	r22
 68e:	b7 95       	ror	r27
 690:	f7 95       	ror	r31
 692:	9f 5f       	subi	r25, 0xFF	; 255
 694:	c9 f7       	brne	.-14     	; 0x688 <__divsf3_pse+0x78>
 696:	88 0f       	add	r24, r24
 698:	91 1d       	adc	r25, r1
 69a:	96 95       	lsr	r25
 69c:	87 95       	ror	r24
 69e:	97 f9       	bld	r25, 7
 6a0:	08 95       	ret
 6a2:	e1 e0       	ldi	r30, 0x01	; 1
 6a4:	66 0f       	add	r22, r22
 6a6:	77 1f       	adc	r23, r23
 6a8:	88 1f       	adc	r24, r24
 6aa:	bb 1f       	adc	r27, r27
 6ac:	62 17       	cp	r22, r18
 6ae:	73 07       	cpc	r23, r19
 6b0:	84 07       	cpc	r24, r20
 6b2:	ba 07       	cpc	r27, r26
 6b4:	20 f0       	brcs	.+8      	; 0x6be <__divsf3_pse+0xae>
 6b6:	62 1b       	sub	r22, r18
 6b8:	73 0b       	sbc	r23, r19
 6ba:	84 0b       	sbc	r24, r20
 6bc:	ba 0b       	sbc	r27, r26
 6be:	ee 1f       	adc	r30, r30
 6c0:	88 f7       	brcc	.-30     	; 0x6a4 <__divsf3_pse+0x94>
 6c2:	e0 95       	com	r30
 6c4:	08 95       	ret

000006c6 <__fixsfsi>:
 6c6:	0e 94 6a 03 	call	0x6d4	; 0x6d4 <__fixunssfsi>
 6ca:	68 94       	set
 6cc:	b1 11       	cpse	r27, r1
 6ce:	0c 94 21 04 	jmp	0x842	; 0x842 <__fp_szero>
 6d2:	08 95       	ret

000006d4 <__fixunssfsi>:
 6d4:	0e 94 06 04 	call	0x80c	; 0x80c <__fp_splitA>
 6d8:	88 f0       	brcs	.+34     	; 0x6fc <__fixunssfsi+0x28>
 6da:	9f 57       	subi	r25, 0x7F	; 127
 6dc:	98 f0       	brcs	.+38     	; 0x704 <__fixunssfsi+0x30>
 6de:	b9 2f       	mov	r27, r25
 6e0:	99 27       	eor	r25, r25
 6e2:	b7 51       	subi	r27, 0x17	; 23
 6e4:	b0 f0       	brcs	.+44     	; 0x712 <__fixunssfsi+0x3e>
 6e6:	e1 f0       	breq	.+56     	; 0x720 <__fixunssfsi+0x4c>
 6e8:	66 0f       	add	r22, r22
 6ea:	77 1f       	adc	r23, r23
 6ec:	88 1f       	adc	r24, r24
 6ee:	99 1f       	adc	r25, r25
 6f0:	1a f0       	brmi	.+6      	; 0x6f8 <__fixunssfsi+0x24>
 6f2:	ba 95       	dec	r27
 6f4:	c9 f7       	brne	.-14     	; 0x6e8 <__fixunssfsi+0x14>
 6f6:	14 c0       	rjmp	.+40     	; 0x720 <__fixunssfsi+0x4c>
 6f8:	b1 30       	cpi	r27, 0x01	; 1
 6fa:	91 f0       	breq	.+36     	; 0x720 <__fixunssfsi+0x4c>
 6fc:	0e 94 20 04 	call	0x840	; 0x840 <__fp_zero>
 700:	b1 e0       	ldi	r27, 0x01	; 1
 702:	08 95       	ret
 704:	0c 94 20 04 	jmp	0x840	; 0x840 <__fp_zero>
 708:	67 2f       	mov	r22, r23
 70a:	78 2f       	mov	r23, r24
 70c:	88 27       	eor	r24, r24
 70e:	b8 5f       	subi	r27, 0xF8	; 248
 710:	39 f0       	breq	.+14     	; 0x720 <__fixunssfsi+0x4c>
 712:	b9 3f       	cpi	r27, 0xF9	; 249
 714:	cc f3       	brlt	.-14     	; 0x708 <__fixunssfsi+0x34>
 716:	86 95       	lsr	r24
 718:	77 95       	ror	r23
 71a:	67 95       	ror	r22
 71c:	b3 95       	inc	r27
 71e:	d9 f7       	brne	.-10     	; 0x716 <__fixunssfsi+0x42>
 720:	3e f4       	brtc	.+14     	; 0x730 <__fixunssfsi+0x5c>
 722:	90 95       	com	r25
 724:	80 95       	com	r24
 726:	70 95       	com	r23
 728:	61 95       	neg	r22
 72a:	7f 4f       	sbci	r23, 0xFF	; 255
 72c:	8f 4f       	sbci	r24, 0xFF	; 255
 72e:	9f 4f       	sbci	r25, 0xFF	; 255
 730:	08 95       	ret

00000732 <__floatunsisf>:
 732:	e8 94       	clt
 734:	09 c0       	rjmp	.+18     	; 0x748 <__floatsisf+0x12>

00000736 <__floatsisf>:
 736:	97 fb       	bst	r25, 7
 738:	3e f4       	brtc	.+14     	; 0x748 <__floatsisf+0x12>
 73a:	90 95       	com	r25
 73c:	80 95       	com	r24
 73e:	70 95       	com	r23
 740:	61 95       	neg	r22
 742:	7f 4f       	sbci	r23, 0xFF	; 255
 744:	8f 4f       	sbci	r24, 0xFF	; 255
 746:	9f 4f       	sbci	r25, 0xFF	; 255
 748:	99 23       	and	r25, r25
 74a:	a9 f0       	breq	.+42     	; 0x776 <__floatsisf+0x40>
 74c:	f9 2f       	mov	r31, r25
 74e:	96 e9       	ldi	r25, 0x96	; 150
 750:	bb 27       	eor	r27, r27
 752:	93 95       	inc	r25
 754:	f6 95       	lsr	r31
 756:	87 95       	ror	r24
 758:	77 95       	ror	r23
 75a:	67 95       	ror	r22
 75c:	b7 95       	ror	r27
 75e:	f1 11       	cpse	r31, r1
 760:	f8 cf       	rjmp	.-16     	; 0x752 <__floatsisf+0x1c>
 762:	fa f4       	brpl	.+62     	; 0x7a2 <__floatsisf+0x6c>
 764:	bb 0f       	add	r27, r27
 766:	11 f4       	brne	.+4      	; 0x76c <__floatsisf+0x36>
 768:	60 ff       	sbrs	r22, 0
 76a:	1b c0       	rjmp	.+54     	; 0x7a2 <__floatsisf+0x6c>
 76c:	6f 5f       	subi	r22, 0xFF	; 255
 76e:	7f 4f       	sbci	r23, 0xFF	; 255
 770:	8f 4f       	sbci	r24, 0xFF	; 255
 772:	9f 4f       	sbci	r25, 0xFF	; 255
 774:	16 c0       	rjmp	.+44     	; 0x7a2 <__floatsisf+0x6c>
 776:	88 23       	and	r24, r24
 778:	11 f0       	breq	.+4      	; 0x77e <__floatsisf+0x48>
 77a:	96 e9       	ldi	r25, 0x96	; 150
 77c:	11 c0       	rjmp	.+34     	; 0x7a0 <__floatsisf+0x6a>
 77e:	77 23       	and	r23, r23
 780:	21 f0       	breq	.+8      	; 0x78a <__floatsisf+0x54>
 782:	9e e8       	ldi	r25, 0x8E	; 142
 784:	87 2f       	mov	r24, r23
 786:	76 2f       	mov	r23, r22
 788:	05 c0       	rjmp	.+10     	; 0x794 <__floatsisf+0x5e>
 78a:	66 23       	and	r22, r22
 78c:	71 f0       	breq	.+28     	; 0x7aa <__floatsisf+0x74>
 78e:	96 e8       	ldi	r25, 0x86	; 134
 790:	86 2f       	mov	r24, r22
 792:	70 e0       	ldi	r23, 0x00	; 0
 794:	60 e0       	ldi	r22, 0x00	; 0
 796:	2a f0       	brmi	.+10     	; 0x7a2 <__floatsisf+0x6c>
 798:	9a 95       	dec	r25
 79a:	66 0f       	add	r22, r22
 79c:	77 1f       	adc	r23, r23
 79e:	88 1f       	adc	r24, r24
 7a0:	da f7       	brpl	.-10     	; 0x798 <__floatsisf+0x62>
 7a2:	88 0f       	add	r24, r24
 7a4:	96 95       	lsr	r25
 7a6:	87 95       	ror	r24
 7a8:	97 f9       	bld	r25, 7
 7aa:	08 95       	ret

000007ac <__fp_inf>:
 7ac:	97 f9       	bld	r25, 7
 7ae:	9f 67       	ori	r25, 0x7F	; 127
 7b0:	80 e8       	ldi	r24, 0x80	; 128
 7b2:	70 e0       	ldi	r23, 0x00	; 0
 7b4:	60 e0       	ldi	r22, 0x00	; 0
 7b6:	08 95       	ret

000007b8 <__fp_nan>:
 7b8:	9f ef       	ldi	r25, 0xFF	; 255
 7ba:	80 ec       	ldi	r24, 0xC0	; 192
 7bc:	08 95       	ret

000007be <__fp_pscA>:
 7be:	00 24       	eor	r0, r0
 7c0:	0a 94       	dec	r0
 7c2:	16 16       	cp	r1, r22
 7c4:	17 06       	cpc	r1, r23
 7c6:	18 06       	cpc	r1, r24
 7c8:	09 06       	cpc	r0, r25
 7ca:	08 95       	ret

000007cc <__fp_pscB>:
 7cc:	00 24       	eor	r0, r0
 7ce:	0a 94       	dec	r0
 7d0:	12 16       	cp	r1, r18
 7d2:	13 06       	cpc	r1, r19
 7d4:	14 06       	cpc	r1, r20
 7d6:	05 06       	cpc	r0, r21
 7d8:	08 95       	ret

000007da <__fp_round>:
 7da:	09 2e       	mov	r0, r25
 7dc:	03 94       	inc	r0
 7de:	00 0c       	add	r0, r0
 7e0:	11 f4       	brne	.+4      	; 0x7e6 <__fp_round+0xc>
 7e2:	88 23       	and	r24, r24
 7e4:	52 f0       	brmi	.+20     	; 0x7fa <__fp_round+0x20>
 7e6:	bb 0f       	add	r27, r27
 7e8:	40 f4       	brcc	.+16     	; 0x7fa <__fp_round+0x20>
 7ea:	bf 2b       	or	r27, r31
 7ec:	11 f4       	brne	.+4      	; 0x7f2 <__fp_round+0x18>
 7ee:	60 ff       	sbrs	r22, 0
 7f0:	04 c0       	rjmp	.+8      	; 0x7fa <__fp_round+0x20>
 7f2:	6f 5f       	subi	r22, 0xFF	; 255
 7f4:	7f 4f       	sbci	r23, 0xFF	; 255
 7f6:	8f 4f       	sbci	r24, 0xFF	; 255
 7f8:	9f 4f       	sbci	r25, 0xFF	; 255
 7fa:	08 95       	ret

000007fc <__fp_split3>:
 7fc:	57 fd       	sbrc	r21, 7
 7fe:	90 58       	subi	r25, 0x80	; 128
 800:	44 0f       	add	r20, r20
 802:	55 1f       	adc	r21, r21
 804:	59 f0       	breq	.+22     	; 0x81c <__fp_splitA+0x10>
 806:	5f 3f       	cpi	r21, 0xFF	; 255
 808:	71 f0       	breq	.+28     	; 0x826 <__fp_splitA+0x1a>
 80a:	47 95       	ror	r20

0000080c <__fp_splitA>:
 80c:	88 0f       	add	r24, r24
 80e:	97 fb       	bst	r25, 7
 810:	99 1f       	adc	r25, r25
 812:	61 f0       	breq	.+24     	; 0x82c <__fp_splitA+0x20>
 814:	9f 3f       	cpi	r25, 0xFF	; 255
 816:	79 f0       	breq	.+30     	; 0x836 <__fp_splitA+0x2a>
 818:	87 95       	ror	r24
 81a:	08 95       	ret
 81c:	12 16       	cp	r1, r18
 81e:	13 06       	cpc	r1, r19
 820:	14 06       	cpc	r1, r20
 822:	55 1f       	adc	r21, r21
 824:	f2 cf       	rjmp	.-28     	; 0x80a <__fp_split3+0xe>
 826:	46 95       	lsr	r20
 828:	f1 df       	rcall	.-30     	; 0x80c <__fp_splitA>
 82a:	08 c0       	rjmp	.+16     	; 0x83c <__fp_splitA+0x30>
 82c:	16 16       	cp	r1, r22
 82e:	17 06       	cpc	r1, r23
 830:	18 06       	cpc	r1, r24
 832:	99 1f       	adc	r25, r25
 834:	f1 cf       	rjmp	.-30     	; 0x818 <__fp_splitA+0xc>
 836:	86 95       	lsr	r24
 838:	71 05       	cpc	r23, r1
 83a:	61 05       	cpc	r22, r1
 83c:	08 94       	sec
 83e:	08 95       	ret

00000840 <__fp_zero>:
 840:	e8 94       	clt

00000842 <__fp_szero>:
 842:	bb 27       	eor	r27, r27
 844:	66 27       	eor	r22, r22
 846:	77 27       	eor	r23, r23
 848:	cb 01       	movw	r24, r22
 84a:	97 f9       	bld	r25, 7
 84c:	08 95       	ret

0000084e <__gesf2>:
 84e:	0e 94 99 04 	call	0x932	; 0x932 <__fp_cmp>
 852:	08 f4       	brcc	.+2      	; 0x856 <__gesf2+0x8>
 854:	8f ef       	ldi	r24, 0xFF	; 255
 856:	08 95       	ret

00000858 <__mulsf3>:
 858:	0e 94 3f 04 	call	0x87e	; 0x87e <__mulsf3x>
 85c:	0c 94 ed 03 	jmp	0x7da	; 0x7da <__fp_round>
 860:	0e 94 df 03 	call	0x7be	; 0x7be <__fp_pscA>
 864:	38 f0       	brcs	.+14     	; 0x874 <__mulsf3+0x1c>
 866:	0e 94 e6 03 	call	0x7cc	; 0x7cc <__fp_pscB>
 86a:	20 f0       	brcs	.+8      	; 0x874 <__mulsf3+0x1c>
 86c:	95 23       	and	r25, r21
 86e:	11 f0       	breq	.+4      	; 0x874 <__mulsf3+0x1c>
 870:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__fp_inf>
 874:	0c 94 dc 03 	jmp	0x7b8	; 0x7b8 <__fp_nan>
 878:	11 24       	eor	r1, r1
 87a:	0c 94 21 04 	jmp	0x842	; 0x842 <__fp_szero>

0000087e <__mulsf3x>:
 87e:	0e 94 fe 03 	call	0x7fc	; 0x7fc <__fp_split3>
 882:	70 f3       	brcs	.-36     	; 0x860 <__mulsf3+0x8>

00000884 <__mulsf3_pse>:
 884:	95 9f       	mul	r25, r21
 886:	c1 f3       	breq	.-16     	; 0x878 <__mulsf3+0x20>
 888:	95 0f       	add	r25, r21
 88a:	50 e0       	ldi	r21, 0x00	; 0
 88c:	55 1f       	adc	r21, r21
 88e:	62 9f       	mul	r22, r18
 890:	f0 01       	movw	r30, r0
 892:	72 9f       	mul	r23, r18
 894:	bb 27       	eor	r27, r27
 896:	f0 0d       	add	r31, r0
 898:	b1 1d       	adc	r27, r1
 89a:	63 9f       	mul	r22, r19
 89c:	aa 27       	eor	r26, r26
 89e:	f0 0d       	add	r31, r0
 8a0:	b1 1d       	adc	r27, r1
 8a2:	aa 1f       	adc	r26, r26
 8a4:	64 9f       	mul	r22, r20
 8a6:	66 27       	eor	r22, r22
 8a8:	b0 0d       	add	r27, r0
 8aa:	a1 1d       	adc	r26, r1
 8ac:	66 1f       	adc	r22, r22
 8ae:	82 9f       	mul	r24, r18
 8b0:	22 27       	eor	r18, r18
 8b2:	b0 0d       	add	r27, r0
 8b4:	a1 1d       	adc	r26, r1
 8b6:	62 1f       	adc	r22, r18
 8b8:	73 9f       	mul	r23, r19
 8ba:	b0 0d       	add	r27, r0
 8bc:	a1 1d       	adc	r26, r1
 8be:	62 1f       	adc	r22, r18
 8c0:	83 9f       	mul	r24, r19
 8c2:	a0 0d       	add	r26, r0
 8c4:	61 1d       	adc	r22, r1
 8c6:	22 1f       	adc	r18, r18
 8c8:	74 9f       	mul	r23, r20
 8ca:	33 27       	eor	r19, r19
 8cc:	a0 0d       	add	r26, r0
 8ce:	61 1d       	adc	r22, r1
 8d0:	23 1f       	adc	r18, r19
 8d2:	84 9f       	mul	r24, r20
 8d4:	60 0d       	add	r22, r0
 8d6:	21 1d       	adc	r18, r1
 8d8:	82 2f       	mov	r24, r18
 8da:	76 2f       	mov	r23, r22
 8dc:	6a 2f       	mov	r22, r26
 8de:	11 24       	eor	r1, r1
 8e0:	9f 57       	subi	r25, 0x7F	; 127
 8e2:	50 40       	sbci	r21, 0x00	; 0
 8e4:	9a f0       	brmi	.+38     	; 0x90c <__mulsf3_pse+0x88>
 8e6:	f1 f0       	breq	.+60     	; 0x924 <__mulsf3_pse+0xa0>
 8e8:	88 23       	and	r24, r24
 8ea:	4a f0       	brmi	.+18     	; 0x8fe <__mulsf3_pse+0x7a>
 8ec:	ee 0f       	add	r30, r30
 8ee:	ff 1f       	adc	r31, r31
 8f0:	bb 1f       	adc	r27, r27
 8f2:	66 1f       	adc	r22, r22
 8f4:	77 1f       	adc	r23, r23
 8f6:	88 1f       	adc	r24, r24
 8f8:	91 50       	subi	r25, 0x01	; 1
 8fa:	50 40       	sbci	r21, 0x00	; 0
 8fc:	a9 f7       	brne	.-22     	; 0x8e8 <__mulsf3_pse+0x64>
 8fe:	9e 3f       	cpi	r25, 0xFE	; 254
 900:	51 05       	cpc	r21, r1
 902:	80 f0       	brcs	.+32     	; 0x924 <__mulsf3_pse+0xa0>
 904:	0c 94 d6 03 	jmp	0x7ac	; 0x7ac <__fp_inf>
 908:	0c 94 21 04 	jmp	0x842	; 0x842 <__fp_szero>
 90c:	5f 3f       	cpi	r21, 0xFF	; 255
 90e:	e4 f3       	brlt	.-8      	; 0x908 <__mulsf3_pse+0x84>
 910:	98 3e       	cpi	r25, 0xE8	; 232
 912:	d4 f3       	brlt	.-12     	; 0x908 <__mulsf3_pse+0x84>
 914:	86 95       	lsr	r24
 916:	77 95       	ror	r23
 918:	67 95       	ror	r22
 91a:	b7 95       	ror	r27
 91c:	f7 95       	ror	r31
 91e:	e7 95       	ror	r30
 920:	9f 5f       	subi	r25, 0xFF	; 255
 922:	c1 f7       	brne	.-16     	; 0x914 <__mulsf3_pse+0x90>
 924:	fe 2b       	or	r31, r30
 926:	88 0f       	add	r24, r24
 928:	91 1d       	adc	r25, r1
 92a:	96 95       	lsr	r25
 92c:	87 95       	ror	r24
 92e:	97 f9       	bld	r25, 7
 930:	08 95       	ret

00000932 <__fp_cmp>:
 932:	99 0f       	add	r25, r25
 934:	00 08       	sbc	r0, r0
 936:	55 0f       	add	r21, r21
 938:	aa 0b       	sbc	r26, r26
 93a:	e0 e8       	ldi	r30, 0x80	; 128
 93c:	fe ef       	ldi	r31, 0xFE	; 254
 93e:	16 16       	cp	r1, r22
 940:	17 06       	cpc	r1, r23
 942:	e8 07       	cpc	r30, r24
 944:	f9 07       	cpc	r31, r25
 946:	c0 f0       	brcs	.+48     	; 0x978 <__fp_cmp+0x46>
 948:	12 16       	cp	r1, r18
 94a:	13 06       	cpc	r1, r19
 94c:	e4 07       	cpc	r30, r20
 94e:	f5 07       	cpc	r31, r21
 950:	98 f0       	brcs	.+38     	; 0x978 <__fp_cmp+0x46>
 952:	62 1b       	sub	r22, r18
 954:	73 0b       	sbc	r23, r19
 956:	84 0b       	sbc	r24, r20
 958:	95 0b       	sbc	r25, r21
 95a:	39 f4       	brne	.+14     	; 0x96a <__fp_cmp+0x38>
 95c:	0a 26       	eor	r0, r26
 95e:	61 f0       	breq	.+24     	; 0x978 <__fp_cmp+0x46>
 960:	23 2b       	or	r18, r19
 962:	24 2b       	or	r18, r20
 964:	25 2b       	or	r18, r21
 966:	21 f4       	brne	.+8      	; 0x970 <__fp_cmp+0x3e>
 968:	08 95       	ret
 96a:	0a 26       	eor	r0, r26
 96c:	09 f4       	brne	.+2      	; 0x970 <__fp_cmp+0x3e>
 96e:	a1 40       	sbci	r26, 0x01	; 1
 970:	a6 95       	lsr	r26
 972:	8f ef       	ldi	r24, 0xFF	; 255
 974:	81 1d       	adc	r24, r1
 976:	81 1d       	adc	r24, r1
 978:	08 95       	ret

0000097a <_exit>:
 97a:	f8 94       	cli

0000097c <__stop_program>:
 97c:	ff cf       	rjmp	.-2      	; 0x97c <__stop_program>
