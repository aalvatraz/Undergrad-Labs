
Lab5_lcd_name.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000436  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000010  00802000  00000436  000004aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000004ba  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000004ec  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000070  00000000  00000000  0000052c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000946  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001f8  00000000  00000000  00000ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000001e5  00000000  00000000  000010da  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000010c  00000000  00000000  000012c0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000066d  00000000  00000000  000013cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000256  00000000  00000000  00001a39  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001c8f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 fe 00 	jmp	0x1fc	; 0x1fc <__ctors_end>
   4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
   c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  10:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  14:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  18:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  1c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  20:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  24:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  28:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  2c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  30:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  34:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  38:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  3c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  40:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  44:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  48:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  4c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  50:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  54:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  58:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  5c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  60:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  64:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  68:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  6c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  70:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  74:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  78:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  7c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  80:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  84:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  88:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  8c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  90:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  94:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  98:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  9c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
  fc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 100:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 104:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 108:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 10c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 110:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 114:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 118:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 11c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 120:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 124:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 128:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 12c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 130:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 134:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 138:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 13c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 140:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 144:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 148:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 14c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 150:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 154:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 158:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 15c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 160:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 164:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 168:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 16c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 170:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 174:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 178:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 17c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 180:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 184:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 188:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 18c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 190:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 194:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 198:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 19c:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1a8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ac:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1b8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1bc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1c8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1cc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1d8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1dc:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1e8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1ec:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f0:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f4:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>
 1f8:	0c 94 1c 01 	jmp	0x238	; 0x238 <__bad_interrupt>

000001fc <__ctors_end>:
 1fc:	11 24       	eor	r1, r1
 1fe:	1f be       	out	0x3f, r1	; 63
 200:	cf ef       	ldi	r28, 0xFF	; 255
 202:	cd bf       	out	0x3d, r28	; 61
 204:	df e3       	ldi	r29, 0x3F	; 63
 206:	de bf       	out	0x3e, r29	; 62
 208:	00 e0       	ldi	r16, 0x00	; 0
 20a:	0c bf       	out	0x3c, r16	; 60
 20c:	18 be       	out	0x38, r1	; 56
 20e:	19 be       	out	0x39, r1	; 57
 210:	1a be       	out	0x3a, r1	; 58
 212:	1b be       	out	0x3b, r1	; 59

00000214 <__do_copy_data>:
 214:	10 e2       	ldi	r17, 0x20	; 32
 216:	a0 e0       	ldi	r26, 0x00	; 0
 218:	b0 e2       	ldi	r27, 0x20	; 32
 21a:	e6 e3       	ldi	r30, 0x36	; 54
 21c:	f4 e0       	ldi	r31, 0x04	; 4
 21e:	00 e0       	ldi	r16, 0x00	; 0
 220:	0b bf       	out	0x3b, r16	; 59
 222:	02 c0       	rjmp	.+4      	; 0x228 <__do_copy_data+0x14>
 224:	07 90       	elpm	r0, Z+
 226:	0d 92       	st	X+, r0
 228:	a0 31       	cpi	r26, 0x10	; 16
 22a:	b1 07       	cpc	r27, r17
 22c:	d9 f7       	brne	.-10     	; 0x224 <__do_copy_data+0x10>
 22e:	1b be       	out	0x3b, r1	; 59
 230:	0e 94 0a 02 	call	0x414	; 0x414 <main>
 234:	0c 94 19 02 	jmp	0x432	; 0x432 <_exit>

00000238 <__bad_interrupt>:
 238:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000023c <ebi_init>:
* INPUTS: None
* OUTPUTS: None
*******************************/
void ebi_init(void)
{
	PORTH.DIRSET = 0x37; // Set RE, WE, CS0, CS1, ALE1 bits as output
 23c:	e0 ee       	ldi	r30, 0xE0	; 224
 23e:	f6 e0       	ldi	r31, 0x06	; 6
 240:	87 e3       	ldi	r24, 0x37	; 55
 242:	81 83       	std	Z+1, r24	; 0x01
	PORTH.OUTSET = 0x33;
 244:	93 e3       	ldi	r25, 0x33	; 51
 246:	95 83       	std	Z+5, r25	; 0x05
	
	PORTK.DIRSET = 0xFF; // Set PORTK to output (ADDR 7-0/15-8)
 248:	9f ef       	ldi	r25, 0xFF	; 255
 24a:	90 93 21 07 	sts	0x0721, r25
	PORTJ.DIRSET = 0xFF; // Set PORTJ to output (DATA7-0)
 24e:	90 93 01 07 	sts	0x0701, r25
	
	EBI.CTRL = EBI_SRMODE_ALE1_gc | EBI_IFMODE_3PORT_gc; // Set EBI to 3 Port (H, J, K) SRAM ALE1 mode.
 252:	e0 e4       	ldi	r30, 0x40	; 64
 254:	f4 e0       	ldi	r31, 0x04	; 4
 256:	91 e0       	ldi	r25, 0x01	; 1
 258:	90 83       	st	Z, r25
	
	//IO PORT setup on CS0
	EBI.CS0.BASEADDRH = (uint8_t) (IO_ADDR>>16) & 0xFF; //Set highest byte of IO port base address on CS0
 25a:	13 8a       	std	Z+19, r1	; 0x13
	EBI.CS0.BASEADDRL = (uint8_t) (IO_ADDR>>8) & 0xFF; // Set middle byte of IO port base address on CS0
 25c:	90 e4       	ldi	r25, 0x40	; 64
 25e:	92 8b       	std	Z+18, r25	; 0x12
	EBI.CS0.CTRLA = (uint8_t) 0x19; //set IO Port to 16K address size and SRAM mode
 260:	99 e1       	ldi	r25, 0x19	; 25
 262:	90 8b       	std	Z+16, r25	; 0x10
	
	//LCD setup on CS1
	EBI.CS1.BASEADDRH = (uint8_t) (CS1_ADDR>>16) & 0xFF; //Set highest byte of LCD base address on CS1
 264:	87 8b       	std	Z+23, r24	; 0x17
	EBI.CS1.BASEADDRL = (uint8_t) (CS1_ADDR>>8) & 0xFF; //Set middle byte of IO port base address on CS1
 266:	16 8a       	std	Z+22, r1	; 0x16
	EBI.CS1.CTRLA = (uint8_t) EBI_CS_ASPACE_64KB_gc | EBI_CS_MODE_SRAM_gc ;
 268:	81 e2       	ldi	r24, 0x21	; 33
 26a:	84 8b       	std	Z+20, r24	; 0x14
 26c:	08 95       	ret

0000026e <lcd_wait>:
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_wait(void)
{
	asm volatile ("nop");
 26e:	00 00       	nop
	asm volatile ("nop");
 270:	00 00       	nop
	while(( __far_mem_read(LCD_instr) >> 7) == 0x01); //wait while busy flag on bit7 is high
 272:	40 e0       	ldi	r20, 0x00	; 0
 274:	50 ea       	ldi	r21, 0xA0	; 160
 276:	67 e3       	ldi	r22, 0x37	; 55
 278:	70 e0       	ldi	r23, 0x00	; 0
 27a:	0b b6       	in	r0, 0x3b	; 59
 27c:	6b bf       	out	0x3b, r22	; 59
 27e:	fa 01       	movw	r30, r20
 280:	80 81       	ld	r24, Z
 282:	0b be       	out	0x3b, r0	; 59
 284:	88 23       	and	r24, r24
 286:	cc f3       	brlt	.-14     	; 0x27a <lcd_wait+0xc>
}
 288:	08 95       	ret

0000028a <lcd_blink_tgl>:
* FUNCTION: Blink Cursor. Must call ebi_init() and lcd_init() first
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_blink_tgl(void)
{
 28a:	cf 93       	push	r28
	uint8_t x = (uint8_t)__far_mem_read(LCD_instr);
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	90 ea       	ldi	r25, 0xA0	; 160
 290:	a7 e3       	ldi	r26, 0x37	; 55
 292:	b0 e0       	ldi	r27, 0x00	; 0
 294:	0b b6       	in	r0, 0x3b	; 59
 296:	ab bf       	out	0x3b, r26	; 59
 298:	fc 01       	movw	r30, r24
 29a:	c0 81       	ld	r28, Z
 29c:	0b be       	out	0x3b, r0	; 59
	lcd_wait();
 29e:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_wait>
	x ^= 1 << 0 ;	//toggle bit 0 (blink bit)
 2a2:	81 e0       	ldi	r24, 0x01	; 1
 2a4:	8c 27       	eor	r24, r28
	__far_mem_write( LCD_instr, x);
 2a6:	40 e0       	ldi	r20, 0x00	; 0
 2a8:	50 ea       	ldi	r21, 0xA0	; 160
 2aa:	67 e3       	ldi	r22, 0x37	; 55
 2ac:	70 e0       	ldi	r23, 0x00	; 0
 2ae:	0b b6       	in	r0, 0x3b	; 59
 2b0:	6b bf       	out	0x3b, r22	; 59
 2b2:	fa 01       	movw	r30, r20
 2b4:	80 83       	st	Z, r24
 2b6:	0b be       	out	0x3b, r0	; 59
}
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <lcd_outstring>:
* FUNCTION: Send char string to LCD. Must call ebi_init() and lcd_init() first
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_outstring(char *value)
{
 2bc:	cf 92       	push	r12
 2be:	df 92       	push	r13
 2c0:	ef 92       	push	r14
 2c2:	ff 92       	push	r15
 2c4:	cf 93       	push	r28
 2c6:	df 93       	push	r29
 2c8:	ec 01       	movw	r28, r24
	while(*value != 0x00)
 2ca:	88 81       	ld	r24, Y
 2cc:	88 23       	and	r24, r24
 2ce:	a1 f0       	breq	.+40     	; 0x2f8 <lcd_outstring+0x3c>
	{
	lcd_wait();
	__far_mem_write(LCD_data, *value);
 2d0:	0f 2e       	mov	r0, r31
 2d2:	cc 24       	eor	r12, r12
 2d4:	c3 94       	inc	r12
 2d6:	f0 ea       	ldi	r31, 0xA0	; 160
 2d8:	df 2e       	mov	r13, r31
 2da:	f7 e3       	ldi	r31, 0x37	; 55
 2dc:	ef 2e       	mov	r14, r31
 2de:	f1 2c       	mov	r15, r1
 2e0:	f0 2d       	mov	r31, r0
*******************************/
void lcd_outstring(char *value)
{
	while(*value != 0x00)
	{
	lcd_wait();
 2e2:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_wait>
	__far_mem_write(LCD_data, *value);
 2e6:	89 91       	ld	r24, Y+
 2e8:	0b b6       	in	r0, 0x3b	; 59
 2ea:	eb be       	out	0x3b, r14	; 59
 2ec:	f6 01       	movw	r30, r12
 2ee:	80 83       	st	Z, r24
 2f0:	0b be       	out	0x3b, r0	; 59
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_outstring(char *value)
{
	while(*value != 0x00)
 2f2:	88 81       	ld	r24, Y
 2f4:	81 11       	cpse	r24, r1
 2f6:	f5 cf       	rjmp	.-22     	; 0x2e2 <lcd_outstring+0x26>
	{
	lcd_wait();
	__far_mem_write(LCD_data, *value);
	value++;
	}
}
 2f8:	df 91       	pop	r29
 2fa:	cf 91       	pop	r28
 2fc:	ff 90       	pop	r15
 2fe:	ef 90       	pop	r14
 300:	df 90       	pop	r13
 302:	cf 90       	pop	r12
 304:	08 95       	ret

00000306 <lcd_delay>:
* FUNCTION: For use in lcd_init to allow device powerup. Must call ebi_init()first
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_delay(void)
{
 306:	cf 93       	push	r28
 308:	df 93       	push	r29
 30a:	00 d0       	rcall	.+0      	; 0x30c <lcd_delay+0x6>
 30c:	1f 92       	push	r1
 30e:	cd b7       	in	r28, 0x3d	; 61
 310:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t ticks= 0;            //declare volatile so compiler won't optimize
 312:	19 82       	std	Y+1, r1	; 0x01
 314:	1a 82       	std	Y+2, r1	; 0x02
 316:	1b 82       	std	Y+3, r1	; 0x03
 318:	1c 82       	std	Y+4, r1	; 0x04
	while(ticks<=(F_CPU>>10))  //enough delay to allow for LCD powerup
 31a:	89 81       	ldd	r24, Y+1	; 0x01
 31c:	9a 81       	ldd	r25, Y+2	; 0x02
 31e:	ab 81       	ldd	r26, Y+3	; 0x03
 320:	bc 81       	ldd	r27, Y+4	; 0x04
 322:	82 3a       	cpi	r24, 0xA2	; 162
 324:	97 40       	sbci	r25, 0x07	; 7
 326:	a1 05       	cpc	r26, r1
 328:	b1 05       	cpc	r27, r1
 32a:	a0 f4       	brcc	.+40     	; 0x354 <lcd_delay+0x4e>
	{
		ticks++;
 32c:	89 81       	ldd	r24, Y+1	; 0x01
 32e:	9a 81       	ldd	r25, Y+2	; 0x02
 330:	ab 81       	ldd	r26, Y+3	; 0x03
 332:	bc 81       	ldd	r27, Y+4	; 0x04
 334:	01 96       	adiw	r24, 0x01	; 1
 336:	a1 1d       	adc	r26, r1
 338:	b1 1d       	adc	r27, r1
 33a:	89 83       	std	Y+1, r24	; 0x01
 33c:	9a 83       	std	Y+2, r25	; 0x02
 33e:	ab 83       	std	Y+3, r26	; 0x03
 340:	bc 83       	std	Y+4, r27	; 0x04
* OUTPUTS: None
*******************************/
void lcd_delay(void)
{
	volatile uint32_t ticks= 0;            //declare volatile so compiler won't optimize
	while(ticks<=(F_CPU>>10))  //enough delay to allow for LCD powerup
 342:	89 81       	ldd	r24, Y+1	; 0x01
 344:	9a 81       	ldd	r25, Y+2	; 0x02
 346:	ab 81       	ldd	r26, Y+3	; 0x03
 348:	bc 81       	ldd	r27, Y+4	; 0x04
 34a:	82 3a       	cpi	r24, 0xA2	; 162
 34c:	97 40       	sbci	r25, 0x07	; 7
 34e:	a1 05       	cpc	r26, r1
 350:	b1 05       	cpc	r27, r1
 352:	60 f3       	brcs	.-40     	; 0x32c <lcd_delay+0x26>
	{
		ticks++;
	}	
}
 354:	24 96       	adiw	r28, 0x04	; 4
 356:	cd bf       	out	0x3d, r28	; 61
 358:	de bf       	out	0x3e, r29	; 62
 35a:	df 91       	pop	r29
 35c:	cf 91       	pop	r28
 35e:	08 95       	ret

00000360 <lcd_clr>:
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_clr(void)
{
	lcd_wait();
 360:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_wait>
	__far_mem_write(LCD_instr, 0x01);
 364:	21 e0       	ldi	r18, 0x01	; 1
 366:	80 e0       	ldi	r24, 0x00	; 0
 368:	90 ea       	ldi	r25, 0xA0	; 160
 36a:	a7 e3       	ldi	r26, 0x37	; 55
 36c:	b0 e0       	ldi	r27, 0x00	; 0
 36e:	0b b6       	in	r0, 0x3b	; 59
 370:	ab bf       	out	0x3b, r26	; 59
 372:	fc 01       	movw	r30, r24
 374:	20 83       	st	Z, r18
 376:	0b be       	out	0x3b, r0	; 59
 378:	08 95       	ret

0000037a <lcd_pos>:
* FUNCTION: Set LCD cursor to designated position. Must call ebi_init()first
* INPUTS: x position and y position
* OUTPUTS: None
*******************************/
void lcd_pos(uint8_t row, uint8_t col)
{
 37a:	cf 93       	push	r28
	uint8_t x = 0x00;
	if (row)
 37c:	88 23       	and	r24, r24
 37e:	11 f0       	breq	.+4      	; 0x384 <lcd_pos+0xa>
		x = 0x40;
 380:	c0 e4       	ldi	r28, 0x40	; 64
 382:	01 c0       	rjmp	.+2      	; 0x386 <lcd_pos+0xc>
* INPUTS: x position and y position
* OUTPUTS: None
*******************************/
void lcd_pos(uint8_t row, uint8_t col)
{
	uint8_t x = 0x00;
 384:	c0 e0       	ldi	r28, 0x00	; 0
	if (row)
		x = 0x40;
	x |= (col & 0x0F);
 386:	6f 70       	andi	r22, 0x0F	; 15
 388:	c6 2b       	or	r28, r22
	x |= (1 << 7);
	lcd_wait();
 38a:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_wait>
{
	uint8_t x = 0x00;
	if (row)
		x = 0x40;
	x |= (col & 0x0F);
	x |= (1 << 7);
 38e:	c0 68       	ori	r28, 0x80	; 128
	lcd_wait();
	__far_mem_write(LCD_instr, x);
 390:	80 e0       	ldi	r24, 0x00	; 0
 392:	90 ea       	ldi	r25, 0xA0	; 160
 394:	a7 e3       	ldi	r26, 0x37	; 55
 396:	b0 e0       	ldi	r27, 0x00	; 0
 398:	0b b6       	in	r0, 0x3b	; 59
 39a:	ab bf       	out	0x3b, r26	; 59
 39c:	fc 01       	movw	r30, r24
 39e:	c0 83       	st	Z, r28
 3a0:	0b be       	out	0x3b, r0	; 59
}
 3a2:	cf 91       	pop	r28
 3a4:	08 95       	ret

000003a6 <lcd_init>:
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_init(void)
{
	lcd_delay();//delay to allow device to start up
 3a6:	0e 94 83 01 	call	0x306	; 0x306 <lcd_delay>
	__far_mem_write(LCD_instr, 0x38); //LCD 8 bit, 2 line mode
 3aa:	28 e3       	ldi	r18, 0x38	; 56
 3ac:	80 e0       	ldi	r24, 0x00	; 0
 3ae:	90 ea       	ldi	r25, 0xA0	; 160
 3b0:	a7 e3       	ldi	r26, 0x37	; 55
 3b2:	b0 e0       	ldi	r27, 0x00	; 0
 3b4:	0b b6       	in	r0, 0x3b	; 59
 3b6:	ab bf       	out	0x3b, r26	; 59
 3b8:	fc 01       	movw	r30, r24
 3ba:	20 83       	st	Z, r18
 3bc:	0b be       	out	0x3b, r0	; 59
	lcd_wait();
 3be:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_wait>
	__far_mem_write(LCD_instr, 0x38); //LCD 8 bit, 2 line mode
 3c2:	28 e3       	ldi	r18, 0x38	; 56
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	90 ea       	ldi	r25, 0xA0	; 160
 3c8:	a7 e3       	ldi	r26, 0x37	; 55
 3ca:	b0 e0       	ldi	r27, 0x00	; 0
 3cc:	0b b6       	in	r0, 0x3b	; 59
 3ce:	ab bf       	out	0x3b, r26	; 59
 3d0:	fc 01       	movw	r30, r24
 3d2:	20 83       	st	Z, r18
 3d4:	0b be       	out	0x3b, r0	; 59
	lcd_wait();
 3d6:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_wait>
	__far_mem_write(LCD_instr, 0x0C); //turn LCD display on
 3da:	2c e0       	ldi	r18, 0x0C	; 12
 3dc:	80 e0       	ldi	r24, 0x00	; 0
 3de:	90 ea       	ldi	r25, 0xA0	; 160
 3e0:	a7 e3       	ldi	r26, 0x37	; 55
 3e2:	b0 e0       	ldi	r27, 0x00	; 0
 3e4:	0b b6       	in	r0, 0x3b	; 59
 3e6:	ab bf       	out	0x3b, r26	; 59
 3e8:	fc 01       	movw	r30, r24
 3ea:	20 83       	st	Z, r18
 3ec:	0b be       	out	0x3b, r0	; 59
	lcd_clr(); //clear lcd screen
 3ee:	0e 94 b0 01 	call	0x360	; 0x360 <lcd_clr>
	lcd_wait();
 3f2:	0e 94 37 01 	call	0x26e	; 0x26e <lcd_wait>
	__far_mem_write(LCD_instr, 0x06);// set cursor shift right and no screen shift
 3f6:	26 e0       	ldi	r18, 0x06	; 6
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	90 ea       	ldi	r25, 0xA0	; 160
 3fc:	a7 e3       	ldi	r26, 0x37	; 55
 3fe:	b0 e0       	ldi	r27, 0x00	; 0
 400:	0b b6       	in	r0, 0x3b	; 59
 402:	ab bf       	out	0x3b, r26	; 59
 404:	fc 01       	movw	r30, r24
 406:	20 83       	st	Z, r18
 408:	0b be       	out	0x3b, r0	; 59
	lcd_pos(0,0);	
 40a:	60 e0       	ldi	r22, 0x00	; 0
 40c:	80 e0       	ldi	r24, 0x00	; 0
 40e:	0e 94 bd 01 	call	0x37a	; 0x37a <lcd_pos>
 412:	08 95       	ret

00000414 <main>:
void lcd_outstring(char *value);
void lcd_pos(uint8_t x, uint8_t y);
	
int main(void)
{
	ebi_init();
 414:	0e 94 1e 01 	call	0x23c	; 0x23c <ebi_init>
	lcd_init();
 418:	0e 94 d3 01 	call	0x3a6	; 0x3a6 <lcd_init>
	lcd_blink_tgl();
 41c:	0e 94 45 01 	call	0x28a	; 0x28a <lcd_blink_tgl>
	
	char *first = "Adrian";
	char *last = " Alvarez";
	lcd_outstring(first);
 420:	80 e0       	ldi	r24, 0x00	; 0
 422:	90 e2       	ldi	r25, 0x20	; 32
 424:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_outstring>
	lcd_outstring(last);
 428:	87 e0       	ldi	r24, 0x07	; 7
 42a:	90 e2       	ldi	r25, 0x20	; 32
 42c:	0e 94 5e 01 	call	0x2bc	; 0x2bc <lcd_outstring>
	
	while(1);
 430:	ff cf       	rjmp	.-2      	; 0x430 <main+0x1c>

00000432 <_exit>:
 432:	f8 94       	cli

00000434 <__stop_program>:
 434:	ff cf       	rjmp	.-2      	; 0x434 <__stop_program>
