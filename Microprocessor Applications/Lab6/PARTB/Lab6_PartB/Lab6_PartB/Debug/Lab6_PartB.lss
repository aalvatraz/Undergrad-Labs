
Lab6_PartB.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001076  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000024c  00802000  00001076  0000110a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  0080224c  0080224c  00001356  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00001356  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00001388  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000b0  00000000  00000000  000013c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c8c  00000000  00000000  00001478  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000002ec  00000000  00000000  00003104  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000368  00000000  00000000  000033f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000264  00000000  00000000  00003758  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000b4e  00000000  00000000  000039bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000072f  00000000  00000000  0000450a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000b8  00000000  00000000  00004c39  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 42 01 	jmp	0x284	; 0x284 <__ctors_end>
       4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
       8:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
       c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      10:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      14:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      18:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      1c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      20:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      24:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      28:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      2c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      30:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      34:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      38:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      3c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      40:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      44:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      48:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      4c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      50:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      54:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      58:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      5c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      60:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      64:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      68:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      6c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      70:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      74:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      78:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      7c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      80:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      84:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      88:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      8c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      90:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      94:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      98:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      9c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      a0:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      a4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      a8:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      ac:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      b0:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      b4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      b8:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      bc:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      c0:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      c4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      c8:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      cc:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      d0:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      d4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      d8:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      dc:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      e0:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      e4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      e8:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      ec:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      f0:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      f4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      f8:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
      fc:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     100:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     104:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     108:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     10c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     110:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     114:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     118:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     11c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     120:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     124:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     128:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     12c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     130:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     134:	0c 94 03 06 	jmp	0xc06	; 0xc06 <__vector_77>
     138:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     13c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     140:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     144:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     148:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     14c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     150:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     154:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     158:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     15c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     160:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     164:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     168:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     16c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     170:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     174:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     178:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     17c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     180:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     184:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     188:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     18c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     190:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     194:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     198:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     19c:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1a0:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1a4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1a8:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1ac:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1b0:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1b4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1b8:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1bc:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1c0:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1c4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1c8:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1cc:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1d0:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1d4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1d8:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1dc:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1e0:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1e4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1e8:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1ec:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1f0:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1f4:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1f8:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <__bad_interrupt>
     1fc:	fd 05       	cpc	r31, r13
     1fe:	75 04       	cpc	r7, r5
     200:	75 04       	cpc	r7, r5
     202:	75 04       	cpc	r7, r5
     204:	75 04       	cpc	r7, r5
     206:	75 04       	cpc	r7, r5
     208:	75 04       	cpc	r7, r5
     20a:	00 06       	cpc	r0, r16
     20c:	75 04       	cpc	r7, r5
     20e:	75 04       	cpc	r7, r5
     210:	75 04       	cpc	r7, r5
     212:	75 04       	cpc	r7, r5
     214:	75 04       	cpc	r7, r5
     216:	76 05       	cpc	r23, r6
     218:	83 04       	cpc	r8, r3
     21a:	9e 04       	cpc	r9, r14
     21c:	b9 04       	cpc	r11, r9
     21e:	d4 04       	cpc	r13, r4
     220:	ef 04       	cpc	r14, r15
     222:	0a 05       	cpc	r16, r10
     224:	25 05       	cpc	r18, r5
     226:	40 05       	cpc	r20, r0
     228:	5b 05       	cpc	r21, r11
     22a:	75 04       	cpc	r7, r5
     22c:	75 04       	cpc	r7, r5
     22e:	75 04       	cpc	r7, r5
     230:	75 04       	cpc	r7, r5
     232:	75 04       	cpc	r7, r5
     234:	75 04       	cpc	r7, r5
     236:	75 04       	cpc	r7, r5
     238:	91 05       	cpc	r25, r1
     23a:	ac 05       	cpc	r26, r12
     23c:	c7 05       	cpc	r28, r7
     23e:	e2 05       	cpc	r30, r2

00000240 <__trampolines_start>:
     240:	0c 94 5b 05 	jmp	0xab6	; 0xab6 <main+0x1e2>
     244:	0c 94 9e 04 	jmp	0x93c	; 0x93c <main+0x68>
     248:	0c 94 76 05 	jmp	0xaec	; 0xaec <main+0x218>
     24c:	0c 94 75 04 	jmp	0x8ea	; 0x8ea <main+0x16>
     250:	0c 94 e2 05 	jmp	0xbc4	; 0xbc4 <main+0x2f0>
     254:	0c 94 83 04 	jmp	0x906	; 0x906 <main+0x32>
     258:	0c 94 b9 04 	jmp	0x972	; 0x972 <main+0x9e>
     25c:	0c 94 00 06 	jmp	0xc00	; 0xc00 <main+0x32c>
     260:	0c 94 fd 05 	jmp	0xbfa	; 0xbfa <main+0x326>
     264:	0c 94 40 05 	jmp	0xa80	; 0xa80 <main+0x1ac>
     268:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <main+0xd4>
     26c:	0c 94 91 05 	jmp	0xb22	; 0xb22 <main+0x24e>
     270:	0c 94 25 05 	jmp	0xa4a	; 0xa4a <main+0x176>
     274:	0c 94 0a 05 	jmp	0xa14	; 0xa14 <main+0x140>
     278:	0c 94 ef 04 	jmp	0x9de	; 0x9de <main+0x10a>
     27c:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <main+0x2ba>
     280:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <main+0x284>

00000284 <__ctors_end>:
     284:	11 24       	eor	r1, r1
     286:	1f be       	out	0x3f, r1	; 63
     288:	cf ef       	ldi	r28, 0xFF	; 255
     28a:	cd bf       	out	0x3d, r28	; 61
     28c:	df e3       	ldi	r29, 0x3F	; 63
     28e:	de bf       	out	0x3e, r29	; 62
     290:	00 e0       	ldi	r16, 0x00	; 0
     292:	0c bf       	out	0x3c, r16	; 60
     294:	18 be       	out	0x38, r1	; 56
     296:	19 be       	out	0x39, r1	; 57
     298:	1a be       	out	0x3a, r1	; 58
     29a:	1b be       	out	0x3b, r1	; 59

0000029c <__do_copy_data>:
     29c:	12 e2       	ldi	r17, 0x22	; 34
     29e:	a0 e0       	ldi	r26, 0x00	; 0
     2a0:	b0 e2       	ldi	r27, 0x20	; 32
     2a2:	e6 e7       	ldi	r30, 0x76	; 118
     2a4:	f0 e1       	ldi	r31, 0x10	; 16
     2a6:	00 e0       	ldi	r16, 0x00	; 0
     2a8:	0b bf       	out	0x3b, r16	; 59
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <__do_copy_data+0x14>
     2ac:	07 90       	elpm	r0, Z+
     2ae:	0d 92       	st	X+, r0
     2b0:	ac 34       	cpi	r26, 0x4C	; 76
     2b2:	b1 07       	cpc	r27, r17
     2b4:	d9 f7       	brne	.-10     	; 0x2ac <__do_copy_data+0x10>
     2b6:	1b be       	out	0x3b, r1	; 59

000002b8 <__do_clear_bss>:
     2b8:	22 e2       	ldi	r18, 0x22	; 34
     2ba:	ac e4       	ldi	r26, 0x4C	; 76
     2bc:	b2 e2       	ldi	r27, 0x22	; 34
     2be:	01 c0       	rjmp	.+2      	; 0x2c2 <.do_clear_bss_start>

000002c0 <.do_clear_bss_loop>:
     2c0:	1d 92       	st	X+, r1

000002c2 <.do_clear_bss_start>:
     2c2:	ae 34       	cpi	r26, 0x4E	; 78
     2c4:	b2 07       	cpc	r27, r18
     2c6:	e1 f7       	brne	.-8      	; 0x2c0 <.do_clear_bss_loop>
     2c8:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <main>
     2cc:	0c 94 39 08 	jmp	0x1072	; 0x1072 <_exit>

000002d0 <__bad_interrupt>:
     2d0:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002d4 <pulse_init>:

void pulse_init(void)
{
	
	//TCE for frequency generation
	TCE0.CTRLA = TC_CLKSEL_DIV1_gc; //prescaler values, do math to get good freq value
     2d4:	e0 e0       	ldi	r30, 0x00	; 0
     2d6:	fa e0       	ldi	r31, 0x0A	; 10
     2d8:	81 e0       	ldi	r24, 0x01	; 1
     2da:	80 83       	st	Z, r24
	TCE0.CTRLB = TC0_WGMODE0_bm;//WGMODE(1<<0) ***DONT ENABLE YET***
     2dc:	81 83       	std	Z+1, r24	; 0x01
	//TCE0.CTRLC = (1<<0)
	TCE0.CTRLD = 0;
     2de:	13 82       	std	Z+3, r1	; 0x03
	TCE0.CTRLE = TC_BYTEM_NORMAL_gc;
     2e0:	14 82       	std	Z+4, r1	; 0x04
	TCE0.INTCTRLA = 0;
     2e2:	16 82       	std	Z+6, r1	; 0x06
	TCE0.INTCTRLB = 0;
     2e4:	17 82       	std	Z+7, r1	; 0x07
	TCE0.CTRLFSET = 0;
     2e6:	11 86       	std	Z+9, r1	; 0x09
	//TCE0.CTRLGSET= //check bit1 to see if new value in CCxBUF

	PMIC.CTRL = 1; //enable low level interrupts
     2e8:	80 93 a2 00 	sts	0x00A2, r24

	//TCD for duration generation
	TCD0.CTRLA = TC_CLKSEL_DIV64_gc; //prescaler values, do math to get good freq value
     2ec:	e0 e0       	ldi	r30, 0x00	; 0
     2ee:	f9 e0       	ldi	r31, 0x09	; 9
     2f0:	95 e0       	ldi	r25, 0x05	; 5
     2f2:	90 83       	st	Z, r25
	TCD0.CTRLB = 0x00;//Normal mode
     2f4:	11 82       	std	Z+1, r1	; 0x01
	TCD0.CTRLD = 0;
     2f6:	13 82       	std	Z+3, r1	; 0x03
	TCD0.CTRLE = TC_BYTEM_NORMAL_gc;
     2f8:	14 82       	std	Z+4, r1	; 0x04
	TCD0.INTCTRLA = 1; //enable low level overflow interrupt
     2fa:	86 83       	std	Z+6, r24	; 0x06
	TCD0.INTCTRLB = 0;
     2fc:	17 82       	std	Z+7, r1	; 0x07
	
	sei(); //enable interrupts
     2fe:	78 94       	sei
     300:	08 95       	ret

00000302 <pulse_out>:
		x--;
	}
}

void pulse_out(float freq, float duration)
{
     302:	8f 92       	push	r8
     304:	9f 92       	push	r9
     306:	af 92       	push	r10
     308:	bf 92       	push	r11
     30a:	cf 92       	push	r12
     30c:	df 92       	push	r13
     30e:	ef 92       	push	r14
     310:	ff 92       	push	r15
     312:	4b 01       	movw	r8, r22
     314:	5c 01       	movw	r10, r24
     316:	69 01       	movw	r12, r18
     318:	7a 01       	movw	r14, r20
	if(duration != 0)
     31a:	20 e0       	ldi	r18, 0x00	; 0
     31c:	30 e0       	ldi	r19, 0x00	; 0
     31e:	a9 01       	movw	r20, r18
     320:	c7 01       	movw	r24, r14
     322:	b6 01       	movw	r22, r12
     324:	0e 94 a8 06 	call	0xd50	; 0xd50 <__cmpsf2>
     328:	88 23       	and	r24, r24
     32a:	e9 f1       	breq	.+122    	; 0x3a6 <pulse_out+0xa4>
	{
		uint16_t CCA16 = (uint16_t) ((((float) val)/(2.0*freq))-1.0);
     32c:	a5 01       	movw	r20, r10
     32e:	94 01       	movw	r18, r8
     330:	c5 01       	movw	r24, r10
     332:	b4 01       	movw	r22, r8
     334:	0e 94 3c 06 	call	0xc78	; 0xc78 <__addsf3>
     338:	9b 01       	movw	r18, r22
     33a:	ac 01       	movw	r20, r24
     33c:	60 e0       	ldi	r22, 0x00	; 0
     33e:	74 e2       	ldi	r23, 0x24	; 36
     340:	84 ef       	ldi	r24, 0xF4	; 244
     342:	99 e4       	ldi	r25, 0x49	; 73
     344:	0e 94 ad 06 	call	0xd5a	; 0xd5a <__divsf3>
     348:	20 e0       	ldi	r18, 0x00	; 0
     34a:	30 e0       	ldi	r19, 0x00	; 0
     34c:	40 e8       	ldi	r20, 0x80	; 128
     34e:	5f e3       	ldi	r21, 0x3F	; 63
     350:	0e 94 3b 06 	call	0xc76	; 0xc76 <__subsf3>
     354:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fixunssfsi>
     358:	4b 01       	movw	r8, r22
     35a:	5c 01       	movw	r10, r24
		uint16_t PER16 = (uint16_t) (((((float) val)/64.0)*duration)-0x0DFF);
     35c:	20 e0       	ldi	r18, 0x00	; 0
     35e:	34 e2       	ldi	r19, 0x24	; 36
     360:	44 ef       	ldi	r20, 0xF4	; 244
     362:	56 e4       	ldi	r21, 0x46	; 70
     364:	c7 01       	movw	r24, r14
     366:	b6 01       	movw	r22, r12
     368:	0e 94 c3 07 	call	0xf86	; 0xf86 <__mulsf3>
     36c:	20 e0       	ldi	r18, 0x00	; 0
     36e:	30 ef       	ldi	r19, 0xF0	; 240
     370:	4f e5       	ldi	r20, 0x5F	; 95
     372:	55 e4       	ldi	r21, 0x45	; 69
     374:	0e 94 3b 06 	call	0xc76	; 0xc76 <__subsf3>
     378:	0e 94 1f 07 	call	0xe3e	; 0xe3e <__fixunssfsi>
		TCE0.PER = CCA16;
     37c:	a0 e0       	ldi	r26, 0x00	; 0
     37e:	ba e0       	ldi	r27, 0x0A	; 10
     380:	96 96       	adiw	r26, 0x26	; 38
     382:	8d 92       	st	X+, r8
     384:	9c 92       	st	X, r9
     386:	97 97       	sbiw	r26, 0x27	; 39
		TCE0.CCA = CCA16;
     388:	98 96       	adiw	r26, 0x28	; 40
     38a:	8d 92       	st	X+, r8
     38c:	9c 92       	st	X, r9
     38e:	99 97       	sbiw	r26, 0x29	; 41
		TCD0.PER = PER16;
     390:	e0 e0       	ldi	r30, 0x00	; 0
     392:	f9 e0       	ldi	r31, 0x09	; 9
     394:	66 a3       	std	Z+38, r22	; 0x26
     396:	77 a3       	std	Z+39, r23	; 0x27
		TCE0.CTRLB = TC0_CCAEN_bm | TC0_WGMODE0_bm; //start frequency
     398:	81 e1       	ldi	r24, 0x11	; 17
     39a:	11 96       	adiw	r26, 0x01	; 1
     39c:	8c 93       	st	X, r24
		TCD0.CTRLFSET |= (1 << 3); //restart duration timer
     39e:	81 85       	ldd	r24, Z+9	; 0x09
     3a0:	88 60       	ori	r24, 0x08	; 8
     3a2:	81 87       	std	Z+9, r24	; 0x09
     3a4:	04 c0       	rjmp	.+8      	; 0x3ae <pulse_out+0xac>
		uint16_t PER16 = (uint16_t) (((((float) val)/64.0)*duration)-0x0DFF);
		TCD0.PER = PER16;
		TCD0.CTRLFSET |= (1 << 3); //restart duration timer
	}*/
	else
	TCE0.CTRLB &= !(1 << 4); //turn off CCA
     3a6:	e0 e0       	ldi	r30, 0x00	; 0
     3a8:	fa e0       	ldi	r31, 0x0A	; 10
     3aa:	81 81       	ldd	r24, Z+1	; 0x01
     3ac:	11 82       	std	Z+1, r1	; 0x01
	
}
     3ae:	ff 90       	pop	r15
     3b0:	ef 90       	pop	r14
     3b2:	df 90       	pop	r13
     3b4:	cf 90       	pop	r12
     3b6:	bf 90       	pop	r11
     3b8:	af 90       	pop	r10
     3ba:	9f 90       	pop	r9
     3bc:	8f 90       	pop	r8
     3be:	08 95       	ret

000003c0 <keypad_init>:
* INPUTS: None
* OUTPUTS: None
*******************************/
void keypad_init(void)
{
	PORTF_DIR = 0xF0;		//upper nibble as outputs
     3c0:	80 ef       	ldi	r24, 0xF0	; 240
     3c2:	80 93 a0 06 	sts	0x06A0, r24
	PORTF_DIRCLR = 0x0F;	//lower nibble as inputs
     3c6:	8f e0       	ldi	r24, 0x0F	; 15
     3c8:	80 93 a2 06 	sts	0x06A2, r24
	PORTF_PIN0CTRL = 0x10;	//set input pins as pulled down
     3cc:	80 e1       	ldi	r24, 0x10	; 16
     3ce:	80 93 b0 06 	sts	0x06B0, r24
	PORTF_PIN1CTRL = 0x10;
     3d2:	80 93 b1 06 	sts	0x06B1, r24
	PORTF_PIN2CTRL = 0x10;
     3d6:	80 93 b2 06 	sts	0x06B2, r24
	PORTF_PIN3CTRL = 0x10;
     3da:	80 93 b3 06 	sts	0x06B3, r24
     3de:	08 95       	ret

000003e0 <getKey>:
}

char getKey()
{
     3e0:	0f 93       	push	r16
     3e2:	1f 93       	push	r17
     3e4:	cf 93       	push	r28
     3e6:	df 93       	push	r29
     3e8:	24 e0       	ldi	r18, 0x04	; 4
     3ea:	30 e0       	ldi	r19, 0x00	; 0
	uint8_t x;
	char result= ' '; //change to 0x00 to get main() to work
     3ec:	80 e2       	ldi	r24, 0x20	; 32
	for (int i = 0; i<4; i++)
	{
		PORTF_OUT = 1 << (i+4);
     3ee:	61 e0       	ldi	r22, 0x01	; 1
     3f0:	70 e0       	ldi	r23, 0x00	; 0
     3f2:	a4 ea       	ldi	r26, 0xA4	; 164
     3f4:	b6 e0       	ldi	r27, 0x06	; 6
		asm volatile("nop");
		asm volatile("nop");
		x = (uint8_t) PORTF_IN;
     3f6:	e8 ea       	ldi	r30, 0xA8	; 168
     3f8:	f6 e0       	ldi	r31, 0x06	; 6
		if(x == 0x11)
		result = 'D';
     3fa:	c4 e4       	ldi	r28, 0x44	; 68
		else if(x == 0x12)
		result = 'C';
     3fc:	d3 e4       	ldi	r29, 0x43	; 67
		else if(x == 0x14)
		result = 'B';
     3fe:	12 e4       	ldi	r17, 0x42	; 66
		else if(x == 0x18)
		result = 'A';
     400:	01 e4       	ldi	r16, 0x41	; 65
{
	uint8_t x;
	char result= ' '; //change to 0x00 to get main() to work
	for (int i = 0; i<4; i++)
	{
		PORTF_OUT = 1 << (i+4);
     402:	ab 01       	movw	r20, r22
     404:	02 2e       	mov	r0, r18
     406:	02 c0       	rjmp	.+4      	; 0x40c <getKey+0x2c>
     408:	44 0f       	add	r20, r20
     40a:	55 1f       	adc	r21, r21
     40c:	0a 94       	dec	r0
     40e:	e2 f7       	brpl	.-8      	; 0x408 <getKey+0x28>
     410:	4c 93       	st	X, r20
		asm volatile("nop");
     412:	00 00       	nop
		asm volatile("nop");
     414:	00 00       	nop
		x = (uint8_t) PORTF_IN;
     416:	90 81       	ld	r25, Z
		if(x == 0x11)
     418:	91 31       	cpi	r25, 0x11	; 17
     41a:	01 f1       	breq	.+64     	; 0x45c <getKey+0x7c>
		result = 'D';
		else if(x == 0x12)
     41c:	92 31       	cpi	r25, 0x12	; 18
     41e:	01 f1       	breq	.+64     	; 0x460 <getKey+0x80>
		result = 'C';
		else if(x == 0x14)
     420:	94 31       	cpi	r25, 0x14	; 20
     422:	01 f1       	breq	.+64     	; 0x464 <getKey+0x84>
		result = 'B';
		else if(x == 0x18)
     424:	98 31       	cpi	r25, 0x18	; 24
     426:	01 f1       	breq	.+64     	; 0x468 <getKey+0x88>
		result = 'A';
		else if(x == 0x21)
     428:	91 32       	cpi	r25, 0x21	; 33
     42a:	01 f1       	breq	.+64     	; 0x46c <getKey+0x8c>
		result = '#';
		else if(x == 0x22)
     42c:	92 32       	cpi	r25, 0x22	; 34
     42e:	01 f1       	breq	.+64     	; 0x470 <getKey+0x90>
		result = '9';
		else if(x == 0x24)
     430:	94 32       	cpi	r25, 0x24	; 36
     432:	01 f1       	breq	.+64     	; 0x474 <getKey+0x94>
		result = '6';
		else if(x == 0x28)
     434:	98 32       	cpi	r25, 0x28	; 40
     436:	01 f1       	breq	.+64     	; 0x478 <getKey+0x98>
		result = '3';
		else if(x == 0x41)
     438:	91 34       	cpi	r25, 0x41	; 65
     43a:	01 f1       	breq	.+64     	; 0x47c <getKey+0x9c>
		result = '0';
		else if(x == 0x42)
     43c:	92 34       	cpi	r25, 0x42	; 66
     43e:	01 f1       	breq	.+64     	; 0x480 <getKey+0xa0>
		result = '8';
		else if(x == 0x44)
     440:	94 34       	cpi	r25, 0x44	; 68
     442:	01 f1       	breq	.+64     	; 0x484 <getKey+0xa4>
		result = '5';
		else if(x == 0x48)
     444:	98 34       	cpi	r25, 0x48	; 72
     446:	01 f1       	breq	.+64     	; 0x488 <getKey+0xa8>
		result = '2';
		else if(x == 0x81)
     448:	91 38       	cpi	r25, 0x81	; 129
     44a:	01 f1       	breq	.+64     	; 0x48c <getKey+0xac>
		result = '*';
		else if(x == 0x82)
     44c:	92 38       	cpi	r25, 0x82	; 130
     44e:	01 f1       	breq	.+64     	; 0x490 <getKey+0xb0>
		result = '7';
		else if(x == 0x84)
     450:	94 38       	cpi	r25, 0x84	; 132
     452:	01 f1       	breq	.+64     	; 0x494 <getKey+0xb4>
		result = '4';
		else if(x == 0x88)
     454:	98 38       	cpi	r25, 0x88	; 136
     456:	f9 f4       	brne	.+62     	; 0x496 <getKey+0xb6>
		result = '1';
     458:	81 e3       	ldi	r24, 0x31	; 49
     45a:	1d c0       	rjmp	.+58     	; 0x496 <getKey+0xb6>
		PORTF_OUT = 1 << (i+4);
		asm volatile("nop");
		asm volatile("nop");
		x = (uint8_t) PORTF_IN;
		if(x == 0x11)
		result = 'D';
     45c:	8c 2f       	mov	r24, r28
     45e:	1b c0       	rjmp	.+54     	; 0x496 <getKey+0xb6>
		else if(x == 0x12)
		result = 'C';
     460:	8d 2f       	mov	r24, r29
     462:	19 c0       	rjmp	.+50     	; 0x496 <getKey+0xb6>
		else if(x == 0x14)
		result = 'B';
     464:	81 2f       	mov	r24, r17
     466:	17 c0       	rjmp	.+46     	; 0x496 <getKey+0xb6>
		else if(x == 0x18)
		result = 'A';
     468:	80 2f       	mov	r24, r16
     46a:	15 c0       	rjmp	.+42     	; 0x496 <getKey+0xb6>
		else if(x == 0x21)
		result = '#';
     46c:	83 e2       	ldi	r24, 0x23	; 35
     46e:	13 c0       	rjmp	.+38     	; 0x496 <getKey+0xb6>
		else if(x == 0x22)
		result = '9';
     470:	89 e3       	ldi	r24, 0x39	; 57
     472:	11 c0       	rjmp	.+34     	; 0x496 <getKey+0xb6>
		else if(x == 0x24)
		result = '6';
     474:	86 e3       	ldi	r24, 0x36	; 54
     476:	0f c0       	rjmp	.+30     	; 0x496 <getKey+0xb6>
		else if(x == 0x28)
		result = '3';
     478:	83 e3       	ldi	r24, 0x33	; 51
     47a:	0d c0       	rjmp	.+26     	; 0x496 <getKey+0xb6>
		else if(x == 0x41)
		result = '0';
     47c:	80 e3       	ldi	r24, 0x30	; 48
     47e:	0b c0       	rjmp	.+22     	; 0x496 <getKey+0xb6>
		else if(x == 0x42)
		result = '8';
     480:	88 e3       	ldi	r24, 0x38	; 56
     482:	09 c0       	rjmp	.+18     	; 0x496 <getKey+0xb6>
		else if(x == 0x44)
		result = '5';
     484:	85 e3       	ldi	r24, 0x35	; 53
     486:	07 c0       	rjmp	.+14     	; 0x496 <getKey+0xb6>
		else if(x == 0x48)
		result = '2';
     488:	82 e3       	ldi	r24, 0x32	; 50
     48a:	05 c0       	rjmp	.+10     	; 0x496 <getKey+0xb6>
		else if(x == 0x81)
		result = '*';
     48c:	8a e2       	ldi	r24, 0x2A	; 42
     48e:	03 c0       	rjmp	.+6      	; 0x496 <getKey+0xb6>
		else if(x == 0x82)
		result = '7';
     490:	87 e3       	ldi	r24, 0x37	; 55
     492:	01 c0       	rjmp	.+2      	; 0x496 <getKey+0xb6>
		else if(x == 0x84)
		result = '4';
     494:	84 e3       	ldi	r24, 0x34	; 52
     496:	2f 5f       	subi	r18, 0xFF	; 255
     498:	3f 4f       	sbci	r19, 0xFF	; 255

char getKey()
{
	uint8_t x;
	char result= ' '; //change to 0x00 to get main() to work
	for (int i = 0; i<4; i++)
     49a:	28 30       	cpi	r18, 0x08	; 8
     49c:	31 05       	cpc	r19, r1
     49e:	09 f0       	breq	.+2      	; 0x4a2 <getKey+0xc2>
     4a0:	b0 cf       	rjmp	.-160    	; 0x402 <getKey+0x22>
		result = '4';
		else if(x == 0x88)
		result = '1';
	}
	return result;
}
     4a2:	df 91       	pop	r29
     4a4:	cf 91       	pop	r28
     4a6:	1f 91       	pop	r17
     4a8:	0f 91       	pop	r16
     4aa:	08 95       	ret

000004ac <ebi_init>:
* INPUTS: None
* OUTPUTS: None
*******************************/
void ebi_init(void)
{
	PORTH.DIRSET = 0x37; // Set RE, WE, CS0, CS1, ALE1 bits as output
     4ac:	e0 ee       	ldi	r30, 0xE0	; 224
     4ae:	f6 e0       	ldi	r31, 0x06	; 6
     4b0:	87 e3       	ldi	r24, 0x37	; 55
     4b2:	81 83       	std	Z+1, r24	; 0x01
	PORTH.OUTSET = 0x33;
     4b4:	93 e3       	ldi	r25, 0x33	; 51
     4b6:	95 83       	std	Z+5, r25	; 0x05
	
	PORTK.DIRSET = 0xFF; // Set PORTK to output (ADDR 7-0/15-8)
     4b8:	9f ef       	ldi	r25, 0xFF	; 255
     4ba:	90 93 21 07 	sts	0x0721, r25
	PORTJ.DIRSET = 0xFF; // Set PORTJ to output (DATA7-0)
     4be:	90 93 01 07 	sts	0x0701, r25
	
	EBI.CTRL = EBI_SRMODE_ALE1_gc | EBI_IFMODE_3PORT_gc; // Set EBI to 3 Port (H, J, K) SRAM ALE1 mode.
     4c2:	e0 e4       	ldi	r30, 0x40	; 64
     4c4:	f4 e0       	ldi	r31, 0x04	; 4
     4c6:	91 e0       	ldi	r25, 0x01	; 1
     4c8:	90 83       	st	Z, r25
	
	//IO PORT setup on CS0
	EBI.CS0.BASEADDRH = (uint8_t) (IO_ADDR>>16) & 0xFF; //Set highest byte of IO port base address on CS0
     4ca:	13 8a       	std	Z+19, r1	; 0x13
	EBI.CS0.BASEADDRL = (uint8_t) (IO_ADDR>>8) & 0xFF; // Set middle byte of IO port base address on CS0
     4cc:	90 e4       	ldi	r25, 0x40	; 64
     4ce:	92 8b       	std	Z+18, r25	; 0x12
	EBI.CS0.CTRLA = (uint8_t) 0x19; //set IO Port to 16K address size and SRAM mode
     4d0:	99 e1       	ldi	r25, 0x19	; 25
     4d2:	90 8b       	std	Z+16, r25	; 0x10
	
	//LCD setup on CS1
	EBI.CS1.BASEADDRH = (uint8_t) (CS1_ADDR>>16) & 0xFF; //Set highest byte of LCD base address on CS1
     4d4:	87 8b       	std	Z+23, r24	; 0x17
	EBI.CS1.BASEADDRL = (uint8_t) (CS1_ADDR>>8) & 0xFF; //Set middle byte of IO port base address on CS1
     4d6:	16 8a       	std	Z+22, r1	; 0x16
	EBI.CS1.CTRLA = (uint8_t) EBI_CS_ASPACE_64KB_gc | EBI_CS_MODE_SRAM_gc ;
     4d8:	81 e2       	ldi	r24, 0x21	; 33
     4da:	84 8b       	std	Z+20, r24	; 0x14
     4dc:	08 95       	ret

000004de <lcd_wait>:
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_wait(void)
{
	asm volatile ("nop");
     4de:	00 00       	nop
	asm volatile ("nop");
     4e0:	00 00       	nop
	while(( __far_mem_read(LCD_instr) >> 7) == 0x01); //wait while busy flag on bit7 is high
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 ea       	ldi	r21, 0xA0	; 160
     4e6:	67 e3       	ldi	r22, 0x37	; 55
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	0b b6       	in	r0, 0x3b	; 59
     4ec:	6b bf       	out	0x3b, r22	; 59
     4ee:	fa 01       	movw	r30, r20
     4f0:	80 81       	ld	r24, Z
     4f2:	0b be       	out	0x3b, r0	; 59
     4f4:	88 23       	and	r24, r24
     4f6:	cc f3       	brlt	.-14     	; 0x4ea <lcd_wait+0xc>
}
     4f8:	08 95       	ret

000004fa <lcd_outstring>:
* FUNCTION: Send char string to LCD. Must call ebi_init() and lcd_init() first
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_outstring(char *value)
{
     4fa:	cf 92       	push	r12
     4fc:	df 92       	push	r13
     4fe:	ef 92       	push	r14
     500:	ff 92       	push	r15
     502:	cf 93       	push	r28
     504:	df 93       	push	r29
     506:	ec 01       	movw	r28, r24
	while(*value != 0x00)
     508:	88 81       	ld	r24, Y
     50a:	88 23       	and	r24, r24
     50c:	a1 f0       	breq	.+40     	; 0x536 <lcd_outstring+0x3c>
	{
		lcd_wait();
		__far_mem_write(LCD_data, *value);
     50e:	0f 2e       	mov	r0, r31
     510:	cc 24       	eor	r12, r12
     512:	c3 94       	inc	r12
     514:	f0 ea       	ldi	r31, 0xA0	; 160
     516:	df 2e       	mov	r13, r31
     518:	f7 e3       	ldi	r31, 0x37	; 55
     51a:	ef 2e       	mov	r14, r31
     51c:	f1 2c       	mov	r15, r1
     51e:	f0 2d       	mov	r31, r0
*******************************/
void lcd_outstring(char *value)
{
	while(*value != 0x00)
	{
		lcd_wait();
     520:	0e 94 6f 02 	call	0x4de	; 0x4de <lcd_wait>
		__far_mem_write(LCD_data, *value);
     524:	89 91       	ld	r24, Y+
     526:	0b b6       	in	r0, 0x3b	; 59
     528:	eb be       	out	0x3b, r14	; 59
     52a:	f6 01       	movw	r30, r12
     52c:	80 83       	st	Z, r24
     52e:	0b be       	out	0x3b, r0	; 59
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_outstring(char *value)
{
	while(*value != 0x00)
     530:	88 81       	ld	r24, Y
     532:	81 11       	cpse	r24, r1
     534:	f5 cf       	rjmp	.-22     	; 0x520 <lcd_outstring+0x26>
	{
		lcd_wait();
		__far_mem_write(LCD_data, *value);
		value++;
	}
}
     536:	df 91       	pop	r29
     538:	cf 91       	pop	r28
     53a:	ff 90       	pop	r15
     53c:	ef 90       	pop	r14
     53e:	df 90       	pop	r13
     540:	cf 90       	pop	r12
     542:	08 95       	ret

00000544 <lcd_delay>:
* FUNCTION: For use in lcd_init to allow device powerup. Must call ebi_init()first
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_delay(void)
{
     544:	cf 93       	push	r28
     546:	df 93       	push	r29
     548:	00 d0       	rcall	.+0      	; 0x54a <lcd_delay+0x6>
     54a:	1f 92       	push	r1
     54c:	cd b7       	in	r28, 0x3d	; 61
     54e:	de b7       	in	r29, 0x3e	; 62
	volatile uint32_t ticks= 0;            //declare volatile so compiler won't optimize
     550:	19 82       	std	Y+1, r1	; 0x01
     552:	1a 82       	std	Y+2, r1	; 0x02
     554:	1b 82       	std	Y+3, r1	; 0x03
     556:	1c 82       	std	Y+4, r1	; 0x04
	while(ticks<=(F_CPU>>10))  //enough delay to allow for LCD powerup
     558:	89 81       	ldd	r24, Y+1	; 0x01
     55a:	9a 81       	ldd	r25, Y+2	; 0x02
     55c:	ab 81       	ldd	r26, Y+3	; 0x03
     55e:	bc 81       	ldd	r27, Y+4	; 0x04
     560:	82 3a       	cpi	r24, 0xA2	; 162
     562:	97 40       	sbci	r25, 0x07	; 7
     564:	a1 05       	cpc	r26, r1
     566:	b1 05       	cpc	r27, r1
     568:	a0 f4       	brcc	.+40     	; 0x592 <lcd_delay+0x4e>
	{
		ticks++;
     56a:	89 81       	ldd	r24, Y+1	; 0x01
     56c:	9a 81       	ldd	r25, Y+2	; 0x02
     56e:	ab 81       	ldd	r26, Y+3	; 0x03
     570:	bc 81       	ldd	r27, Y+4	; 0x04
     572:	01 96       	adiw	r24, 0x01	; 1
     574:	a1 1d       	adc	r26, r1
     576:	b1 1d       	adc	r27, r1
     578:	89 83       	std	Y+1, r24	; 0x01
     57a:	9a 83       	std	Y+2, r25	; 0x02
     57c:	ab 83       	std	Y+3, r26	; 0x03
     57e:	bc 83       	std	Y+4, r27	; 0x04
* OUTPUTS: None
*******************************/
void lcd_delay(void)
{
	volatile uint32_t ticks= 0;            //declare volatile so compiler won't optimize
	while(ticks<=(F_CPU>>10))  //enough delay to allow for LCD powerup
     580:	89 81       	ldd	r24, Y+1	; 0x01
     582:	9a 81       	ldd	r25, Y+2	; 0x02
     584:	ab 81       	ldd	r26, Y+3	; 0x03
     586:	bc 81       	ldd	r27, Y+4	; 0x04
     588:	82 3a       	cpi	r24, 0xA2	; 162
     58a:	97 40       	sbci	r25, 0x07	; 7
     58c:	a1 05       	cpc	r26, r1
     58e:	b1 05       	cpc	r27, r1
     590:	60 f3       	brcs	.-40     	; 0x56a <lcd_delay+0x26>
	{
		ticks++;
	}
}
     592:	24 96       	adiw	r28, 0x04	; 4
     594:	cd bf       	out	0x3d, r28	; 61
     596:	de bf       	out	0x3e, r29	; 62
     598:	df 91       	pop	r29
     59a:	cf 91       	pop	r28
     59c:	08 95       	ret

0000059e <lcd_clr>:
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_clr(void)
{
	lcd_wait();
     59e:	0e 94 6f 02 	call	0x4de	; 0x4de <lcd_wait>
	__far_mem_write(LCD_instr, 0x01);
     5a2:	21 e0       	ldi	r18, 0x01	; 1
     5a4:	80 e0       	ldi	r24, 0x00	; 0
     5a6:	90 ea       	ldi	r25, 0xA0	; 160
     5a8:	a7 e3       	ldi	r26, 0x37	; 55
     5aa:	b0 e0       	ldi	r27, 0x00	; 0
     5ac:	0b b6       	in	r0, 0x3b	; 59
     5ae:	ab bf       	out	0x3b, r26	; 59
     5b0:	fc 01       	movw	r30, r24
     5b2:	20 83       	st	Z, r18
     5b4:	0b be       	out	0x3b, r0	; 59
     5b6:	08 95       	ret

000005b8 <lcd_pos>:
* FUNCTION: Set LCD cursor to designated position. Must call ebi_init()first
* INPUTS: x position and y position
* OUTPUTS: None
*******************************/
void lcd_pos(uint8_t row, uint8_t col)
{
     5b8:	cf 93       	push	r28
	uint8_t x = 0x00;
	if (row)
     5ba:	88 23       	and	r24, r24
     5bc:	11 f0       	breq	.+4      	; 0x5c2 <lcd_pos+0xa>
	x = 0x40;
     5be:	c0 e4       	ldi	r28, 0x40	; 64
     5c0:	01 c0       	rjmp	.+2      	; 0x5c4 <lcd_pos+0xc>
* INPUTS: x position and y position
* OUTPUTS: None
*******************************/
void lcd_pos(uint8_t row, uint8_t col)
{
	uint8_t x = 0x00;
     5c2:	c0 e0       	ldi	r28, 0x00	; 0
	if (row)
	x = 0x40;
	x |= (col & 0x0F);
     5c4:	6f 70       	andi	r22, 0x0F	; 15
     5c6:	c6 2b       	or	r28, r22
	x |= (1 << 7);
	lcd_wait();
     5c8:	0e 94 6f 02 	call	0x4de	; 0x4de <lcd_wait>
{
	uint8_t x = 0x00;
	if (row)
	x = 0x40;
	x |= (col & 0x0F);
	x |= (1 << 7);
     5cc:	c0 68       	ori	r28, 0x80	; 128
	lcd_wait();
	__far_mem_write(LCD_instr, x);
     5ce:	80 e0       	ldi	r24, 0x00	; 0
     5d0:	90 ea       	ldi	r25, 0xA0	; 160
     5d2:	a7 e3       	ldi	r26, 0x37	; 55
     5d4:	b0 e0       	ldi	r27, 0x00	; 0
     5d6:	0b b6       	in	r0, 0x3b	; 59
     5d8:	ab bf       	out	0x3b, r26	; 59
     5da:	fc 01       	movw	r30, r24
     5dc:	c0 83       	st	Z, r28
     5de:	0b be       	out	0x3b, r0	; 59
}
     5e0:	cf 91       	pop	r28
     5e2:	08 95       	ret

000005e4 <lcd_init>:
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_init(void)
{
	lcd_delay();//delay to allow device to start up
     5e4:	0e 94 a2 02 	call	0x544	; 0x544 <lcd_delay>
	__far_mem_write(LCD_instr, 0x38); //LCD 8 bit, 2 line mode
     5e8:	28 e3       	ldi	r18, 0x38	; 56
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	90 ea       	ldi	r25, 0xA0	; 160
     5ee:	a7 e3       	ldi	r26, 0x37	; 55
     5f0:	b0 e0       	ldi	r27, 0x00	; 0
     5f2:	0b b6       	in	r0, 0x3b	; 59
     5f4:	ab bf       	out	0x3b, r26	; 59
     5f6:	fc 01       	movw	r30, r24
     5f8:	20 83       	st	Z, r18
     5fa:	0b be       	out	0x3b, r0	; 59
	lcd_wait();
     5fc:	0e 94 6f 02 	call	0x4de	; 0x4de <lcd_wait>
	__far_mem_write(LCD_instr, 0x38); //LCD 8 bit, 2 line mode
     600:	28 e3       	ldi	r18, 0x38	; 56
     602:	80 e0       	ldi	r24, 0x00	; 0
     604:	90 ea       	ldi	r25, 0xA0	; 160
     606:	a7 e3       	ldi	r26, 0x37	; 55
     608:	b0 e0       	ldi	r27, 0x00	; 0
     60a:	0b b6       	in	r0, 0x3b	; 59
     60c:	ab bf       	out	0x3b, r26	; 59
     60e:	fc 01       	movw	r30, r24
     610:	20 83       	st	Z, r18
     612:	0b be       	out	0x3b, r0	; 59
	lcd_wait();
     614:	0e 94 6f 02 	call	0x4de	; 0x4de <lcd_wait>
	__far_mem_write(LCD_instr, 0x0C); //turn LCD display on
     618:	2c e0       	ldi	r18, 0x0C	; 12
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	90 ea       	ldi	r25, 0xA0	; 160
     61e:	a7 e3       	ldi	r26, 0x37	; 55
     620:	b0 e0       	ldi	r27, 0x00	; 0
     622:	0b b6       	in	r0, 0x3b	; 59
     624:	ab bf       	out	0x3b, r26	; 59
     626:	fc 01       	movw	r30, r24
     628:	20 83       	st	Z, r18
     62a:	0b be       	out	0x3b, r0	; 59
	lcd_clr(); //clear lcd screen
     62c:	0e 94 cf 02 	call	0x59e	; 0x59e <lcd_clr>
	lcd_wait();
     630:	0e 94 6f 02 	call	0x4de	; 0x4de <lcd_wait>
	__far_mem_write(LCD_instr, 0x06);// set cursor shift right and no screen shift
     634:	26 e0       	ldi	r18, 0x06	; 6
     636:	80 e0       	ldi	r24, 0x00	; 0
     638:	90 ea       	ldi	r25, 0xA0	; 160
     63a:	a7 e3       	ldi	r26, 0x37	; 55
     63c:	b0 e0       	ldi	r27, 0x00	; 0
     63e:	0b b6       	in	r0, 0x3b	; 59
     640:	ab bf       	out	0x3b, r26	; 59
     642:	fc 01       	movw	r30, r24
     644:	20 83       	st	Z, r18
     646:	0b be       	out	0x3b, r0	; 59
	lcd_pos(0,0);
     648:	60 e0       	ldi	r22, 0x00	; 0
     64a:	80 e0       	ldi	r24, 0x00	; 0
     64c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <lcd_pos>
     650:	08 95       	ret

00000652 <lcd_home>:
* INPUTS: None
* OUTPUTS: None
*******************************/
void lcd_home(void)
{
	lcd_wait();
     652:	0e 94 6f 02 	call	0x4de	; 0x4de <lcd_wait>
	__far_mem_write(LCD_instr, 0x02);
     656:	22 e0       	ldi	r18, 0x02	; 2
     658:	80 e0       	ldi	r24, 0x00	; 0
     65a:	90 ea       	ldi	r25, 0xA0	; 160
     65c:	a7 e3       	ldi	r26, 0x37	; 55
     65e:	b0 e0       	ldi	r27, 0x00	; 0
     660:	0b b6       	in	r0, 0x3b	; 59
     662:	ab bf       	out	0x3b, r26	; 59
     664:	fc 01       	movw	r30, r24
     666:	20 83       	st	Z, r18
     668:	0b be       	out	0x3b, r0	; 59
	lcd_wait();
     66a:	0e 94 6f 02 	call	0x4de	; 0x4de <lcd_wait>
	lcd_pos(0,0);
     66e:	60 e0       	ldi	r22, 0x00	; 0
     670:	80 e0       	ldi	r24, 0x00	; 0
     672:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <lcd_pos>
     676:	08 95       	ret

00000678 <playZelda>:
	}
	return result;
}

void playZelda(void)
{
     678:	cf 92       	push	r12
     67a:	df 92       	push	r13
     67c:	ff 92       	push	r15
     67e:	0f 93       	push	r16
     680:	1f 93       	push	r17
     682:	cf 93       	push	r28
     684:	df 93       	push	r29
     686:	cd b7       	in	r28, 0x3d	; 61
     688:	de b7       	in	r29, 0x3e	; 62
     68a:	c0 54       	subi	r28, 0x40	; 64
     68c:	d1 40       	sbci	r29, 0x01	; 1
     68e:	cd bf       	out	0x3d, r28	; 61
     690:	de bf       	out	0x3e, r29	; 62
	cli();
     692:	f8 94       	cli
	char* name = "Zelda Theme";
	char* artist = "Koji Kondo";
	lcd_clr();
     694:	0e 94 cf 02 	call	0x59e	; 0x59e <lcd_clr>
	lcd_home();
     698:	0e 94 29 03 	call	0x652	; 0x652 <lcd_home>
	lcd_outstring(name);
     69c:	8c e5       	ldi	r24, 0x5C	; 92
     69e:	91 e2       	ldi	r25, 0x21	; 33
     6a0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
	lcd_pos(1, 0);
     6a4:	60 e0       	ldi	r22, 0x00	; 0
     6a6:	81 e0       	ldi	r24, 0x01	; 1
     6a8:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <lcd_pos>
	lcd_outstring(artist);
     6ac:	88 e6       	ldi	r24, 0x68	; 104
     6ae:	91 e2       	ldi	r25, 0x21	; 33
     6b0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
	float bpm = 90.0;
	float notes[40] = {E6, A5,  B5, Cs6,  D6,   E6,   0,  E6,   F6,  G6,  A6,  0,  A6,   0,  A6,  G6,  F6,  G6,  F6,  E6,  E6, D6,   0,   E6,  F6,  0, E6, D6,  C6, D6, E6,  D6, C6,  B5,  C6, D6,   0, F6,   0, E6};
     6b4:	80 ea       	ldi	r24, 0xA0	; 160
     6b6:	e0 e0       	ldi	r30, 0x00	; 0
     6b8:	f0 e2       	ldi	r31, 0x20	; 32
     6ba:	de 01       	movw	r26, r28
     6bc:	11 96       	adiw	r26, 0x01	; 1
     6be:	01 90       	ld	r0, Z+
     6c0:	0d 92       	st	X+, r0
     6c2:	8a 95       	dec	r24
     6c4:	e1 f7       	brne	.-8      	; 0x6be <playZelda+0x46>
	float dur[40] =  {1.0,  2, 0.5, 0.5, 0.5,  1.5,  .5, 0.5,  0.5, 0.5, 1.5, .5, .25, .25, 0.5, 0.5, 0.5, .75, 0.5, 1.5, 1.0, .5, 0.5,  0.5, 1.0, .5, .5, .5, 1.0, .5, 1.0, .5, .5, 1.5,  .5, .5, .25, .5, .25,  1.5};
     6c6:	80 ea       	ldi	r24, 0xA0	; 160
     6c8:	e0 ea       	ldi	r30, 0xA0	; 160
     6ca:	f0 e2       	ldi	r31, 0x20	; 32
     6cc:	de 01       	movw	r26, r28
     6ce:	af 55       	subi	r26, 0x5F	; 95
     6d0:	bf 4f       	sbci	r27, 0xFF	; 255
     6d2:	01 90       	ld	r0, Z+
     6d4:	0d 92       	st	X+, r0
     6d6:	8a 95       	dec	r24
     6d8:	e1 f7       	brne	.-8      	; 0x6d2 <playZelda+0x5a>
		
	for(i = 0; i < 40; i++)
     6da:	10 92 4c 22 	sts	0x224C, r1
     6de:	10 92 4d 22 	sts	0x224D, r1
     6e2:	80 91 4c 22 	lds	r24, 0x224C
     6e6:	90 91 4d 22 	lds	r25, 0x224D
     6ea:	88 97       	sbiw	r24, 0x28	; 40
     6ec:	0c f0       	brlt	.+2      	; 0x6f0 <playZelda+0x78>
     6ee:	61 c0       	rjmp	.+194    	; 0x7b2 <playZelda+0x13a>
	{
		TCD0.INTFLAGS= 1;
     6f0:	00 e0       	ldi	r16, 0x00	; 0
     6f2:	19 e0       	ldi	r17, 0x09	; 9
     6f4:	ff 24       	eor	r15, r15
     6f6:	f3 94       	inc	r15
     6f8:	f8 01       	movw	r30, r16
     6fa:	f4 86       	std	Z+12, r15	; 0x0c
		if(notes[i])
     6fc:	e0 91 4c 22 	lds	r30, 0x224C
     700:	f0 91 4d 22 	lds	r31, 0x224D
     704:	ee 0f       	add	r30, r30
     706:	ff 1f       	adc	r31, r31
     708:	ee 0f       	add	r30, r30
     70a:	ff 1f       	adc	r31, r31
     70c:	81 e0       	ldi	r24, 0x01	; 1
     70e:	90 e0       	ldi	r25, 0x00	; 0
     710:	8c 0f       	add	r24, r28
     712:	9d 1f       	adc	r25, r29
     714:	e8 0f       	add	r30, r24
     716:	f9 1f       	adc	r31, r25
     718:	20 e0       	ldi	r18, 0x00	; 0
     71a:	30 e0       	ldi	r19, 0x00	; 0
     71c:	a9 01       	movw	r20, r18
     71e:	60 81       	ld	r22, Z
     720:	71 81       	ldd	r23, Z+1	; 0x01
     722:	82 81       	ldd	r24, Z+2	; 0x02
     724:	93 81       	ldd	r25, Z+3	; 0x03
     726:	0e 94 a8 06 	call	0xd50	; 0xd50 <__cmpsf2>
     72a:	88 23       	and	r24, r24
     72c:	71 f1       	breq	.+92     	; 0x78a <playZelda+0x112>
		pulse_out(notes[i], (float) ((60.0/bpm)*dur[i]));
     72e:	e0 91 4c 22 	lds	r30, 0x224C
     732:	f0 91 4d 22 	lds	r31, 0x224D
     736:	c0 90 4c 22 	lds	r12, 0x224C
     73a:	d0 90 4d 22 	lds	r13, 0x224D
     73e:	ee 0f       	add	r30, r30
     740:	ff 1f       	adc	r31, r31
     742:	ee 0f       	add	r30, r30
     744:	ff 1f       	adc	r31, r31
     746:	81 ea       	ldi	r24, 0xA1	; 161
     748:	90 e0       	ldi	r25, 0x00	; 0
     74a:	8c 0f       	add	r24, r28
     74c:	9d 1f       	adc	r25, r29
     74e:	e8 0f       	add	r30, r24
     750:	f9 1f       	adc	r31, r25
     752:	2b ea       	ldi	r18, 0xAB	; 171
     754:	3a ea       	ldi	r19, 0xAA	; 170
     756:	4a e2       	ldi	r20, 0x2A	; 42
     758:	5f e3       	ldi	r21, 0x3F	; 63
     75a:	60 81       	ld	r22, Z
     75c:	71 81       	ldd	r23, Z+1	; 0x01
     75e:	82 81       	ldd	r24, Z+2	; 0x02
     760:	93 81       	ldd	r25, Z+3	; 0x03
     762:	0e 94 c3 07 	call	0xf86	; 0xf86 <__mulsf3>
     766:	9b 01       	movw	r18, r22
     768:	ac 01       	movw	r20, r24
     76a:	cc 0c       	add	r12, r12
     76c:	dd 1c       	adc	r13, r13
     76e:	cc 0c       	add	r12, r12
     770:	dd 1c       	adc	r13, r13
     772:	e1 e0       	ldi	r30, 0x01	; 1
     774:	f0 e0       	ldi	r31, 0x00	; 0
     776:	ec 0f       	add	r30, r28
     778:	fd 1f       	adc	r31, r29
     77a:	ec 0d       	add	r30, r12
     77c:	fd 1d       	adc	r31, r13
     77e:	60 81       	ld	r22, Z
     780:	71 81       	ldd	r23, Z+1	; 0x01
     782:	82 81       	ldd	r24, Z+2	; 0x02
     784:	93 81       	ldd	r25, Z+3	; 0x03
     786:	0e 94 81 01 	call	0x302	; 0x302 <pulse_out>
		while((TCD0.INTFLAGS & 1) == 0);
     78a:	f8 01       	movw	r30, r16
     78c:	84 85       	ldd	r24, Z+12	; 0x0c
     78e:	80 ff       	sbrs	r24, 0
     790:	fc cf       	rjmp	.-8      	; 0x78a <playZelda+0x112>
	lcd_outstring(artist);
	float bpm = 90.0;
	float notes[40] = {E6, A5,  B5, Cs6,  D6,   E6,   0,  E6,   F6,  G6,  A6,  0,  A6,   0,  A6,  G6,  F6,  G6,  F6,  E6,  E6, D6,   0,   E6,  F6,  0, E6, D6,  C6, D6, E6,  D6, C6,  B5,  C6, D6,   0, F6,   0, E6};
	float dur[40] =  {1.0,  2, 0.5, 0.5, 0.5,  1.5,  .5, 0.5,  0.5, 0.5, 1.5, .5, .25, .25, 0.5, 0.5, 0.5, .75, 0.5, 1.5, 1.0, .5, 0.5,  0.5, 1.0, .5, .5, .5, 1.0, .5, 1.0, .5, .5, 1.5,  .5, .5, .25, .5, .25,  1.5};
		
	for(i = 0; i < 40; i++)
     792:	80 91 4c 22 	lds	r24, 0x224C
     796:	90 91 4d 22 	lds	r25, 0x224D
     79a:	01 96       	adiw	r24, 0x01	; 1
     79c:	80 93 4c 22 	sts	0x224C, r24
     7a0:	90 93 4d 22 	sts	0x224D, r25
     7a4:	80 91 4c 22 	lds	r24, 0x224C
     7a8:	90 91 4d 22 	lds	r25, 0x224D
     7ac:	88 97       	sbiw	r24, 0x28	; 40
     7ae:	0c f4       	brge	.+2      	; 0x7b2 <playZelda+0x13a>
     7b0:	a3 cf       	rjmp	.-186    	; 0x6f8 <playZelda+0x80>
		TCD0.INTFLAGS= 1;
		if(notes[i])
		pulse_out(notes[i], (float) ((60.0/bpm)*dur[i]));
		while((TCD0.INTFLAGS & 1) == 0);
	}
	sei();
     7b2:	78 94       	sei
	
}
     7b4:	c0 5c       	subi	r28, 0xC0	; 192
     7b6:	de 4f       	sbci	r29, 0xFE	; 254
     7b8:	cd bf       	out	0x3d, r28	; 61
     7ba:	de bf       	out	0x3e, r29	; 62
     7bc:	df 91       	pop	r29
     7be:	cf 91       	pop	r28
     7c0:	1f 91       	pop	r17
     7c2:	0f 91       	pop	r16
     7c4:	ff 90       	pop	r15
     7c6:	df 90       	pop	r13
     7c8:	cf 90       	pop	r12
     7ca:	08 95       	ret

000007cc <playArp>:

void playArp(void)
{
     7cc:	ff 92       	push	r15
     7ce:	0f 93       	push	r16
     7d0:	1f 93       	push	r17
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	cd b7       	in	r28, 0x3d	; 61
     7d8:	de b7       	in	r29, 0x3e	; 62
     7da:	6c 97       	sbiw	r28, 0x1c	; 28
     7dc:	cd bf       	out	0x3d, r28	; 61
     7de:	de bf       	out	0x3e, r29	; 62
	cli();
     7e0:	f8 94       	cli
	lcd_clr();
     7e2:	0e 94 cf 02 	call	0x59e	; 0x59e <lcd_clr>
	lcd_home();
     7e6:	0e 94 29 03 	call	0x652	; 0x652 <lcd_home>
	lcd_outstring("C Major");
     7ea:	83 e7       	ldi	r24, 0x73	; 115
     7ec:	91 e2       	ldi	r25, 0x21	; 33
     7ee:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
	lcd_pos(1, 0);
     7f2:	60 e0       	ldi	r22, 0x00	; 0
     7f4:	81 e0       	ldi	r24, 0x01	; 1
     7f6:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <lcd_pos>
	lcd_outstring("Arpeggio");
     7fa:	8b e7       	ldi	r24, 0x7B	; 123
     7fc:	91 e2       	ldi	r25, 0x21	; 33
     7fe:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
	float notes[]= {C6, E6, G6, C7, G6, E6, C6};
     802:	8c e1       	ldi	r24, 0x1C	; 28
     804:	e0 e4       	ldi	r30, 0x40	; 64
     806:	f1 e2       	ldi	r31, 0x21	; 33
     808:	de 01       	movw	r26, r28
     80a:	11 96       	adiw	r26, 0x01	; 1
     80c:	01 90       	ld	r0, Z+
     80e:	0d 92       	st	X+, r0
     810:	8a 95       	dec	r24
     812:	e1 f7       	brne	.-8      	; 0x80c <playArp+0x40>
	float dur = 0.5678;
	for(i = 0; i < 7; i++)
     814:	10 92 4c 22 	sts	0x224C, r1
     818:	10 92 4d 22 	sts	0x224D, r1
     81c:	80 91 4c 22 	lds	r24, 0x224C
     820:	90 91 4d 22 	lds	r25, 0x224D
     824:	07 97       	sbiw	r24, 0x07	; 7
     826:	0c f0       	brlt	.+2      	; 0x82a <playArp+0x5e>
     828:	4b c0       	rjmp	.+150    	; 0x8c0 <playArp+0xf4>
	{
		TCD0.INTFLAGS= 1;
     82a:	00 e0       	ldi	r16, 0x00	; 0
     82c:	19 e0       	ldi	r17, 0x09	; 9
     82e:	ff 24       	eor	r15, r15
     830:	f3 94       	inc	r15
     832:	f8 01       	movw	r30, r16
     834:	f4 86       	std	Z+12, r15	; 0x0c
		if(notes[i])
     836:	e0 91 4c 22 	lds	r30, 0x224C
     83a:	f0 91 4d 22 	lds	r31, 0x224D
     83e:	ee 0f       	add	r30, r30
     840:	ff 1f       	adc	r31, r31
     842:	ee 0f       	add	r30, r30
     844:	ff 1f       	adc	r31, r31
     846:	81 e0       	ldi	r24, 0x01	; 1
     848:	90 e0       	ldi	r25, 0x00	; 0
     84a:	8c 0f       	add	r24, r28
     84c:	9d 1f       	adc	r25, r29
     84e:	e8 0f       	add	r30, r24
     850:	f9 1f       	adc	r31, r25
     852:	20 e0       	ldi	r18, 0x00	; 0
     854:	30 e0       	ldi	r19, 0x00	; 0
     856:	a9 01       	movw	r20, r18
     858:	60 81       	ld	r22, Z
     85a:	71 81       	ldd	r23, Z+1	; 0x01
     85c:	82 81       	ldd	r24, Z+2	; 0x02
     85e:	93 81       	ldd	r25, Z+3	; 0x03
     860:	0e 94 a8 06 	call	0xd50	; 0xd50 <__cmpsf2>
     864:	88 23       	and	r24, r24
     866:	c1 f0       	breq	.+48     	; 0x898 <playArp+0xcc>
		pulse_out(notes[i], dur);
     868:	e0 91 4c 22 	lds	r30, 0x224C
     86c:	f0 91 4d 22 	lds	r31, 0x224D
     870:	ee 0f       	add	r30, r30
     872:	ff 1f       	adc	r31, r31
     874:	ee 0f       	add	r30, r30
     876:	ff 1f       	adc	r31, r31
     878:	81 e0       	ldi	r24, 0x01	; 1
     87a:	90 e0       	ldi	r25, 0x00	; 0
     87c:	8c 0f       	add	r24, r28
     87e:	9d 1f       	adc	r25, r29
     880:	e8 0f       	add	r30, r24
     882:	f9 1f       	adc	r31, r25
     884:	60 81       	ld	r22, Z
     886:	71 81       	ldd	r23, Z+1	; 0x01
     888:	82 81       	ldd	r24, Z+2	; 0x02
     88a:	93 81       	ldd	r25, Z+3	; 0x03
     88c:	27 e5       	ldi	r18, 0x57	; 87
     88e:	3b e5       	ldi	r19, 0x5B	; 91
     890:	41 e1       	ldi	r20, 0x11	; 17
     892:	5f e3       	ldi	r21, 0x3F	; 63
     894:	0e 94 81 01 	call	0x302	; 0x302 <pulse_out>
		while((TCD0.INTFLAGS & 1) == 0);
     898:	f8 01       	movw	r30, r16
     89a:	84 85       	ldd	r24, Z+12	; 0x0c
     89c:	80 ff       	sbrs	r24, 0
     89e:	fc cf       	rjmp	.-8      	; 0x898 <playArp+0xcc>
	lcd_outstring("C Major");
	lcd_pos(1, 0);
	lcd_outstring("Arpeggio");
	float notes[]= {C6, E6, G6, C7, G6, E6, C6};
	float dur = 0.5678;
	for(i = 0; i < 7; i++)
     8a0:	80 91 4c 22 	lds	r24, 0x224C
     8a4:	90 91 4d 22 	lds	r25, 0x224D
     8a8:	01 96       	adiw	r24, 0x01	; 1
     8aa:	80 93 4c 22 	sts	0x224C, r24
     8ae:	90 93 4d 22 	sts	0x224D, r25
     8b2:	80 91 4c 22 	lds	r24, 0x224C
     8b6:	90 91 4d 22 	lds	r25, 0x224D
     8ba:	07 97       	sbiw	r24, 0x07	; 7
     8bc:	0c f4       	brge	.+2      	; 0x8c0 <playArp+0xf4>
     8be:	b9 cf       	rjmp	.-142    	; 0x832 <playArp+0x66>
		TCD0.INTFLAGS= 1;
		if(notes[i])
		pulse_out(notes[i], dur);
		while((TCD0.INTFLAGS & 1) == 0);
	}
	sei();
     8c0:	78 94       	sei
}
     8c2:	6c 96       	adiw	r28, 0x1c	; 28
     8c4:	cd bf       	out	0x3d, r28	; 61
     8c6:	de bf       	out	0x3e, r29	; 62
     8c8:	df 91       	pop	r29
     8ca:	cf 91       	pop	r28
     8cc:	1f 91       	pop	r17
     8ce:	0f 91       	pop	r16
     8d0:	ff 90       	pop	r15
     8d2:	08 95       	ret

000008d4 <main>:
volatile int i;

int main(void)
{
	//INITIALIZATIONS
	ebi_init();
     8d4:	0e 94 56 02 	call	0x4ac	; 0x4ac <ebi_init>
	lcd_init();
     8d8:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <lcd_init>
	keypad_init();
     8dc:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <keypad_init>
	pulse_init();
     8e0:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <pulse_init>
	PORTE.DIR = 0x01 ; //set OC0, 1 pin as output
     8e4:	81 e0       	ldi	r24, 0x01	; 1
     8e6:	80 93 80 06 	sts	0x0680, r24
	char note;
	//MAIN LOOP
    while(1)
	{
		note = getKey();
     8ea:	0e 94 f0 01 	call	0x3e0	; 0x3e0 <getKey>
		switch(note)
     8ee:	90 e0       	ldi	r25, 0x00	; 0
     8f0:	fc 01       	movw	r30, r24
     8f2:	b3 97       	sbiw	r30, 0x23	; 35
     8f4:	e2 32       	cpi	r30, 0x22	; 34
     8f6:	f1 05       	cpc	r31, r1
     8f8:	c0 f7       	brcc	.-16     	; 0x8ea <main+0x16>
     8fa:	88 27       	eor	r24, r24
     8fc:	e2 50       	subi	r30, 0x02	; 2
     8fe:	ff 4f       	sbci	r31, 0xFF	; 255
     900:	8f 4f       	sbci	r24, 0xFF	; 255
     902:	0c 94 30 08 	jmp	0x1060	; 0x1060 <__tablejump2__>
		{
			case '1':
			lcd_clr();
     906:	0e 94 cf 02 	call	0x59e	; 0x59e <lcd_clr>
			lcd_home();
     90a:	0e 94 29 03 	call	0x652	; 0x652 <lcd_home>
			lcd_outstring("C6");
     90e:	84 e8       	ldi	r24, 0x84	; 132
     910:	91 e2       	ldi	r25, 0x21	; 33
     912:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			lcd_pos(1, 0);
     916:	60 e0       	ldi	r22, 0x00	; 0
     918:	81 e0       	ldi	r24, 0x01	; 1
     91a:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <lcd_pos>
			lcd_outstring("1046.5 Hz");
     91e:	87 e8       	ldi	r24, 0x87	; 135
     920:	91 e2       	ldi	r25, 0x21	; 33
     922:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			pulse_out(1046.5, 0.5678);
     926:	27 e5       	ldi	r18, 0x57	; 87
     928:	3b e5       	ldi	r19, 0x5B	; 91
     92a:	41 e1       	ldi	r20, 0x11	; 17
     92c:	5f e3       	ldi	r21, 0x3F	; 63
     92e:	60 e0       	ldi	r22, 0x00	; 0
     930:	70 ed       	ldi	r23, 0xD0	; 208
     932:	82 e8       	ldi	r24, 0x82	; 130
     934:	94 e4       	ldi	r25, 0x44	; 68
     936:	0e 94 81 01 	call	0x302	; 0x302 <pulse_out>
			
			break;
     93a:	d7 cf       	rjmp	.-82     	; 0x8ea <main+0x16>
			
			case '2':
			lcd_clr();
     93c:	0e 94 cf 02 	call	0x59e	; 0x59e <lcd_clr>
			lcd_home();
     940:	0e 94 29 03 	call	0x652	; 0x652 <lcd_home>
			lcd_outstring("C#6");
     944:	81 e9       	ldi	r24, 0x91	; 145
     946:	91 e2       	ldi	r25, 0x21	; 33
     948:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			lcd_pos(1, 0);
     94c:	60 e0       	ldi	r22, 0x00	; 0
     94e:	81 e0       	ldi	r24, 0x01	; 1
     950:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <lcd_pos>
			lcd_outstring("1108.73 Hz");
     954:	85 e9       	ldi	r24, 0x95	; 149
     956:	91 e2       	ldi	r25, 0x21	; 33
     958:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			pulse_out(1108.73, 0.5678);
     95c:	27 e5       	ldi	r18, 0x57	; 87
     95e:	3b e5       	ldi	r19, 0x5B	; 91
     960:	41 e1       	ldi	r20, 0x11	; 17
     962:	5f e3       	ldi	r21, 0x3F	; 63
     964:	6c e5       	ldi	r22, 0x5C	; 92
     966:	77 e9       	ldi	r23, 0x97	; 151
     968:	8a e8       	ldi	r24, 0x8A	; 138
     96a:	94 e4       	ldi	r25, 0x44	; 68
     96c:	0e 94 81 01 	call	0x302	; 0x302 <pulse_out>
			break;
     970:	bc cf       	rjmp	.-136    	; 0x8ea <main+0x16>
			
			case '3':
			lcd_clr();
     972:	0e 94 cf 02 	call	0x59e	; 0x59e <lcd_clr>
			lcd_home();
     976:	0e 94 29 03 	call	0x652	; 0x652 <lcd_home>
			lcd_outstring("D6");
     97a:	80 ea       	ldi	r24, 0xA0	; 160
     97c:	91 e2       	ldi	r25, 0x21	; 33
     97e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			lcd_pos(1, 0);
     982:	60 e0       	ldi	r22, 0x00	; 0
     984:	81 e0       	ldi	r24, 0x01	; 1
     986:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <lcd_pos>
			lcd_outstring("1173.66 Hz");
     98a:	83 ea       	ldi	r24, 0xA3	; 163
     98c:	91 e2       	ldi	r25, 0x21	; 33
     98e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			pulse_out(1173.66, 0.5678);
     992:	27 e5       	ldi	r18, 0x57	; 87
     994:	3b e5       	ldi	r19, 0x5B	; 91
     996:	41 e1       	ldi	r20, 0x11	; 17
     998:	5f e3       	ldi	r21, 0x3F	; 63
     99a:	6f e1       	ldi	r22, 0x1F	; 31
     99c:	75 eb       	ldi	r23, 0xB5	; 181
     99e:	82 e9       	ldi	r24, 0x92	; 146
     9a0:	94 e4       	ldi	r25, 0x44	; 68
     9a2:	0e 94 81 01 	call	0x302	; 0x302 <pulse_out>
			break;
     9a6:	a1 cf       	rjmp	.-190    	; 0x8ea <main+0x16>
			
			case '4':
			lcd_clr();
     9a8:	0e 94 cf 02 	call	0x59e	; 0x59e <lcd_clr>
			lcd_home();
     9ac:	0e 94 29 03 	call	0x652	; 0x652 <lcd_home>
			lcd_outstring("D#6");
     9b0:	8e ea       	ldi	r24, 0xAE	; 174
     9b2:	91 e2       	ldi	r25, 0x21	; 33
     9b4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			lcd_pos(1, 0);
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	81 e0       	ldi	r24, 0x01	; 1
     9bc:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <lcd_pos>
			lcd_outstring("1244.51 Hz");
     9c0:	82 eb       	ldi	r24, 0xB2	; 178
     9c2:	91 e2       	ldi	r25, 0x21	; 33
     9c4:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			pulse_out(1244.51, 0.5678);
     9c8:	27 e5       	ldi	r18, 0x57	; 87
     9ca:	3b e5       	ldi	r19, 0x5B	; 91
     9cc:	41 e1       	ldi	r20, 0x11	; 17
     9ce:	5f e3       	ldi	r21, 0x3F	; 63
     9d0:	62 e5       	ldi	r22, 0x52	; 82
     9d2:	70 e9       	ldi	r23, 0x90	; 144
     9d4:	8b e9       	ldi	r24, 0x9B	; 155
     9d6:	94 e4       	ldi	r25, 0x44	; 68
     9d8:	0e 94 81 01 	call	0x302	; 0x302 <pulse_out>
			break;
     9dc:	86 cf       	rjmp	.-244    	; 0x8ea <main+0x16>
			
			case '5':
			lcd_clr();
     9de:	0e 94 cf 02 	call	0x59e	; 0x59e <lcd_clr>
			lcd_home();
     9e2:	0e 94 29 03 	call	0x652	; 0x652 <lcd_home>
			lcd_outstring("E6");
     9e6:	8d eb       	ldi	r24, 0xBD	; 189
     9e8:	91 e2       	ldi	r25, 0x21	; 33
     9ea:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			lcd_pos(1, 0);
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <lcd_pos>
			lcd_outstring("1318.51 Hz");
     9f6:	80 ec       	ldi	r24, 0xC0	; 192
     9f8:	91 e2       	ldi	r25, 0x21	; 33
     9fa:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			pulse_out(1318.51, 0.5678);
     9fe:	27 e5       	ldi	r18, 0x57	; 87
     a00:	3b e5       	ldi	r19, 0x5B	; 91
     a02:	41 e1       	ldi	r20, 0x11	; 17
     a04:	5f e3       	ldi	r21, 0x3F	; 63
     a06:	62 e5       	ldi	r22, 0x52	; 82
     a08:	70 ed       	ldi	r23, 0xD0	; 208
     a0a:	84 ea       	ldi	r24, 0xA4	; 164
     a0c:	94 e4       	ldi	r25, 0x44	; 68
     a0e:	0e 94 81 01 	call	0x302	; 0x302 <pulse_out>
			break;
     a12:	6b cf       	rjmp	.-298    	; 0x8ea <main+0x16>
			
			case '6':
			lcd_clr();
     a14:	0e 94 cf 02 	call	0x59e	; 0x59e <lcd_clr>
			lcd_home();
     a18:	0e 94 29 03 	call	0x652	; 0x652 <lcd_home>
			lcd_outstring("F6");
     a1c:	8b ec       	ldi	r24, 0xCB	; 203
     a1e:	91 e2       	ldi	r25, 0x21	; 33
     a20:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			lcd_pos(1, 0);
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	81 e0       	ldi	r24, 0x01	; 1
     a28:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <lcd_pos>
			lcd_outstring("1396.91 Hz");
     a2c:	8e ec       	ldi	r24, 0xCE	; 206
     a2e:	91 e2       	ldi	r25, 0x21	; 33
     a30:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			pulse_out(1396.91, 0.5678);
     a34:	27 e5       	ldi	r18, 0x57	; 87
     a36:	3b e5       	ldi	r19, 0x5B	; 91
     a38:	41 e1       	ldi	r20, 0x11	; 17
     a3a:	5f e3       	ldi	r21, 0x3F	; 63
     a3c:	6f e1       	ldi	r22, 0x1F	; 31
     a3e:	7d e9       	ldi	r23, 0x9D	; 157
     a40:	8e ea       	ldi	r24, 0xAE	; 174
     a42:	94 e4       	ldi	r25, 0x44	; 68
     a44:	0e 94 81 01 	call	0x302	; 0x302 <pulse_out>
			break;
     a48:	50 cf       	rjmp	.-352    	; 0x8ea <main+0x16>
			
			case '7':
			lcd_clr();
     a4a:	0e 94 cf 02 	call	0x59e	; 0x59e <lcd_clr>
			lcd_home();
     a4e:	0e 94 29 03 	call	0x652	; 0x652 <lcd_home>
			lcd_outstring("F#6");
     a52:	89 ed       	ldi	r24, 0xD9	; 217
     a54:	91 e2       	ldi	r25, 0x21	; 33
     a56:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			lcd_pos(1, 0);
     a5a:	60 e0       	ldi	r22, 0x00	; 0
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <lcd_pos>
			lcd_outstring("1479.98 Hz");
     a62:	8d ed       	ldi	r24, 0xDD	; 221
     a64:	91 e2       	ldi	r25, 0x21	; 33
     a66:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			pulse_out(1479.98, 0.5678);
     a6a:	27 e5       	ldi	r18, 0x57	; 87
     a6c:	3b e5       	ldi	r19, 0x5B	; 91
     a6e:	41 e1       	ldi	r20, 0x11	; 17
     a70:	5f e3       	ldi	r21, 0x3F	; 63
     a72:	6c e5       	ldi	r22, 0x5C	; 92
     a74:	7f ef       	ldi	r23, 0xFF	; 255
     a76:	88 eb       	ldi	r24, 0xB8	; 184
     a78:	94 e4       	ldi	r25, 0x44	; 68
     a7a:	0e 94 81 01 	call	0x302	; 0x302 <pulse_out>
			break;
     a7e:	35 cf       	rjmp	.-406    	; 0x8ea <main+0x16>
			
			case '8':
			lcd_clr();
     a80:	0e 94 cf 02 	call	0x59e	; 0x59e <lcd_clr>
			lcd_home();
     a84:	0e 94 29 03 	call	0x652	; 0x652 <lcd_home>
			lcd_outstring("G6");
     a88:	88 ee       	ldi	r24, 0xE8	; 232
     a8a:	91 e2       	ldi	r25, 0x21	; 33
     a8c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			lcd_pos(1, 0);
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	81 e0       	ldi	r24, 0x01	; 1
     a94:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <lcd_pos>
			lcd_outstring("1567.98 Hz");
     a98:	8b ee       	ldi	r24, 0xEB	; 235
     a9a:	91 e2       	ldi	r25, 0x21	; 33
     a9c:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			pulse_out(1567.98, 0.5678);
     aa0:	27 e5       	ldi	r18, 0x57	; 87
     aa2:	3b e5       	ldi	r19, 0x5B	; 91
     aa4:	41 e1       	ldi	r20, 0x11	; 17
     aa6:	5f e3       	ldi	r21, 0x3F	; 63
     aa8:	6c e5       	ldi	r22, 0x5C	; 92
     aaa:	7f ef       	ldi	r23, 0xFF	; 255
     aac:	83 ec       	ldi	r24, 0xC3	; 195
     aae:	94 e4       	ldi	r25, 0x44	; 68
     ab0:	0e 94 81 01 	call	0x302	; 0x302 <pulse_out>
			break;
     ab4:	1a cf       	rjmp	.-460    	; 0x8ea <main+0x16>
			
			case '9':
			lcd_clr();
     ab6:	0e 94 cf 02 	call	0x59e	; 0x59e <lcd_clr>
			lcd_home();
     aba:	0e 94 29 03 	call	0x652	; 0x652 <lcd_home>
			lcd_outstring("G#6");
     abe:	86 ef       	ldi	r24, 0xF6	; 246
     ac0:	91 e2       	ldi	r25, 0x21	; 33
     ac2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			lcd_pos(1, 0);
     ac6:	60 e0       	ldi	r22, 0x00	; 0
     ac8:	81 e0       	ldi	r24, 0x01	; 1
     aca:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <lcd_pos>
			lcd_outstring("1661.22 Hz");
     ace:	8a ef       	ldi	r24, 0xFA	; 250
     ad0:	91 e2       	ldi	r25, 0x21	; 33
     ad2:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			pulse_out(1661.22, 0.5678);
     ad6:	27 e5       	ldi	r18, 0x57	; 87
     ad8:	3b e5       	ldi	r19, 0x5B	; 91
     ada:	41 e1       	ldi	r20, 0x11	; 17
     adc:	5f e3       	ldi	r21, 0x3F	; 63
     ade:	6a e0       	ldi	r22, 0x0A	; 10
     ae0:	77 ea       	ldi	r23, 0xA7	; 167
     ae2:	8f ec       	ldi	r24, 0xCF	; 207
     ae4:	94 e4       	ldi	r25, 0x44	; 68
     ae6:	0e 94 81 01 	call	0x302	; 0x302 <pulse_out>
			break;
     aea:	ff ce       	rjmp	.-514    	; 0x8ea <main+0x16>
			
			case '0':
			lcd_clr();
     aec:	0e 94 cf 02 	call	0x59e	; 0x59e <lcd_clr>
			lcd_home();
     af0:	0e 94 29 03 	call	0x652	; 0x652 <lcd_home>
			lcd_outstring("A6");
     af4:	85 e0       	ldi	r24, 0x05	; 5
     af6:	92 e2       	ldi	r25, 0x22	; 34
     af8:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			lcd_pos(1, 0);
     afc:	60 e0       	ldi	r22, 0x00	; 0
     afe:	81 e0       	ldi	r24, 0x01	; 1
     b00:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <lcd_pos>
			lcd_outstring("1760.0 Hz");
     b04:	88 e0       	ldi	r24, 0x08	; 8
     b06:	92 e2       	ldi	r25, 0x22	; 34
     b08:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			pulse_out(1760.0, 0.5678);
     b0c:	27 e5       	ldi	r18, 0x57	; 87
     b0e:	3b e5       	ldi	r19, 0x5B	; 91
     b10:	41 e1       	ldi	r20, 0x11	; 17
     b12:	5f e3       	ldi	r21, 0x3F	; 63
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	70 e0       	ldi	r23, 0x00	; 0
     b18:	8c ed       	ldi	r24, 0xDC	; 220
     b1a:	94 e4       	ldi	r25, 0x44	; 68
     b1c:	0e 94 81 01 	call	0x302	; 0x302 <pulse_out>
			break;
     b20:	e4 ce       	rjmp	.-568    	; 0x8ea <main+0x16>
			
			case 'A':
			lcd_clr();
     b22:	0e 94 cf 02 	call	0x59e	; 0x59e <lcd_clr>
			lcd_home();
     b26:	0e 94 29 03 	call	0x652	; 0x652 <lcd_home>
			lcd_outstring("A#6");
     b2a:	82 e1       	ldi	r24, 0x12	; 18
     b2c:	92 e2       	ldi	r25, 0x22	; 34
     b2e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			lcd_pos(1, 0);
     b32:	60 e0       	ldi	r22, 0x00	; 0
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <lcd_pos>
			lcd_outstring("1864.66 Hz");
     b3a:	86 e1       	ldi	r24, 0x16	; 22
     b3c:	92 e2       	ldi	r25, 0x22	; 34
     b3e:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			pulse_out(1864.66, 0.5678);
     b42:	27 e5       	ldi	r18, 0x57	; 87
     b44:	3b e5       	ldi	r19, 0x5B	; 91
     b46:	41 e1       	ldi	r20, 0x11	; 17
     b48:	5f e3       	ldi	r21, 0x3F	; 63
     b4a:	6f e1       	ldi	r22, 0x1F	; 31
     b4c:	75 e1       	ldi	r23, 0x15	; 21
     b4e:	89 ee       	ldi	r24, 0xE9	; 233
     b50:	94 e4       	ldi	r25, 0x44	; 68
     b52:	0e 94 81 01 	call	0x302	; 0x302 <pulse_out>
			break;
     b56:	c9 ce       	rjmp	.-622    	; 0x8ea <main+0x16>
			
			case 'B':
			lcd_clr();
     b58:	0e 94 cf 02 	call	0x59e	; 0x59e <lcd_clr>
			lcd_home();
     b5c:	0e 94 29 03 	call	0x652	; 0x652 <lcd_home>
			lcd_outstring("B6");
     b60:	81 e2       	ldi	r24, 0x21	; 33
     b62:	92 e2       	ldi	r25, 0x22	; 34
     b64:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			lcd_pos(1, 0);
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	81 e0       	ldi	r24, 0x01	; 1
     b6c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <lcd_pos>
			lcd_outstring("1975.53 Hz");
     b70:	84 e2       	ldi	r24, 0x24	; 36
     b72:	92 e2       	ldi	r25, 0x22	; 34
     b74:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			pulse_out(1975.53, 0.5678);
     b78:	27 e5       	ldi	r18, 0x57	; 87
     b7a:	3b e5       	ldi	r19, 0x5B	; 91
     b7c:	41 e1       	ldi	r20, 0x11	; 17
     b7e:	5f e3       	ldi	r21, 0x3F	; 63
     b80:	66 ef       	ldi	r22, 0xF6	; 246
     b82:	70 ef       	ldi	r23, 0xF0	; 240
     b84:	86 ef       	ldi	r24, 0xF6	; 246
     b86:	94 e4       	ldi	r25, 0x44	; 68
     b88:	0e 94 81 01 	call	0x302	; 0x302 <pulse_out>
			break;
     b8c:	ae ce       	rjmp	.-676    	; 0x8ea <main+0x16>
			
			case 'C':
			lcd_clr();
     b8e:	0e 94 cf 02 	call	0x59e	; 0x59e <lcd_clr>
			lcd_home();
     b92:	0e 94 29 03 	call	0x652	; 0x652 <lcd_home>
			lcd_outstring("C7");
     b96:	8f e2       	ldi	r24, 0x2F	; 47
     b98:	92 e2       	ldi	r25, 0x22	; 34
     b9a:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			lcd_pos(1, 0);
     b9e:	60 e0       	ldi	r22, 0x00	; 0
     ba0:	81 e0       	ldi	r24, 0x01	; 1
     ba2:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <lcd_pos>
			lcd_outstring("2093.0 Hz");
     ba6:	82 e3       	ldi	r24, 0x32	; 50
     ba8:	92 e2       	ldi	r25, 0x22	; 34
     baa:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			pulse_out(2093.0, 0.5678);
     bae:	27 e5       	ldi	r18, 0x57	; 87
     bb0:	3b e5       	ldi	r19, 0x5B	; 91
     bb2:	41 e1       	ldi	r20, 0x11	; 17
     bb4:	5f e3       	ldi	r21, 0x3F	; 63
     bb6:	60 e0       	ldi	r22, 0x00	; 0
     bb8:	70 ed       	ldi	r23, 0xD0	; 208
     bba:	82 e0       	ldi	r24, 0x02	; 2
     bbc:	95 e4       	ldi	r25, 0x45	; 69
     bbe:	0e 94 81 01 	call	0x302	; 0x302 <pulse_out>
			break;
     bc2:	93 ce       	rjmp	.-730    	; 0x8ea <main+0x16>
			
			case 'D':
			lcd_clr();
     bc4:	0e 94 cf 02 	call	0x59e	; 0x59e <lcd_clr>
			lcd_home();
     bc8:	0e 94 29 03 	call	0x652	; 0x652 <lcd_home>
			lcd_outstring("Db7");
     bcc:	8c e3       	ldi	r24, 0x3C	; 60
     bce:	92 e2       	ldi	r25, 0x22	; 34
     bd0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			lcd_pos(1, 0);
     bd4:	60 e0       	ldi	r22, 0x00	; 0
     bd6:	81 e0       	ldi	r24, 0x01	; 1
     bd8:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <lcd_pos>
			lcd_outstring("2217.46 Hz");
     bdc:	80 e4       	ldi	r24, 0x40	; 64
     bde:	92 e2       	ldi	r25, 0x22	; 34
     be0:	0e 94 7d 02 	call	0x4fa	; 0x4fa <lcd_outstring>
			pulse_out(2217.46, 0.5678);
     be4:	27 e5       	ldi	r18, 0x57	; 87
     be6:	3b e5       	ldi	r19, 0x5B	; 91
     be8:	41 e1       	ldi	r20, 0x11	; 17
     bea:	5f e3       	ldi	r21, 0x3F	; 63
     bec:	6c e5       	ldi	r22, 0x5C	; 92
     bee:	77 e9       	ldi	r23, 0x97	; 151
     bf0:	8a e0       	ldi	r24, 0x0A	; 10
     bf2:	95 e4       	ldi	r25, 0x45	; 69
     bf4:	0e 94 81 01 	call	0x302	; 0x302 <pulse_out>
			break;
     bf8:	78 ce       	rjmp	.-784    	; 0x8ea <main+0x16>
			
			case '#':
			playZelda();
     bfa:	0e 94 3c 03 	call	0x678	; 0x678 <playZelda>
			break;
     bfe:	75 ce       	rjmp	.-790    	; 0x8ea <main+0x16>
			
			case '*':
			playArp();
     c00:	0e 94 e6 03 	call	0x7cc	; 0x7cc <playArp>
			break;
     c04:	72 ce       	rjmp	.-796    	; 0x8ea <main+0x16>

00000c06 <__vector_77>:
	lcd_wait();
	__far_mem_write(LCD_instr, x);
}

ISR(TCD0_OVF_vect)
{
     c06:	1f 92       	push	r1
     c08:	0f 92       	push	r0
     c0a:	0f b6       	in	r0, 0x3f	; 63
     c0c:	0f 92       	push	r0
     c0e:	11 24       	eor	r1, r1
     c10:	08 b6       	in	r0, 0x38	; 56
     c12:	0f 92       	push	r0
     c14:	18 be       	out	0x38, r1	; 56
     c16:	09 b6       	in	r0, 0x39	; 57
     c18:	0f 92       	push	r0
     c1a:	19 be       	out	0x39, r1	; 57
     c1c:	0b b6       	in	r0, 0x3b	; 59
     c1e:	0f 92       	push	r0
     c20:	1b be       	out	0x3b, r1	; 59
     c22:	2f 93       	push	r18
     c24:	3f 93       	push	r19
     c26:	4f 93       	push	r20
     c28:	5f 93       	push	r21
     c2a:	6f 93       	push	r22
     c2c:	7f 93       	push	r23
     c2e:	8f 93       	push	r24
     c30:	9f 93       	push	r25
     c32:	af 93       	push	r26
     c34:	bf 93       	push	r27
     c36:	ef 93       	push	r30
     c38:	ff 93       	push	r31
	pulse_out(0, 0);
     c3a:	20 e0       	ldi	r18, 0x00	; 0
     c3c:	30 e0       	ldi	r19, 0x00	; 0
     c3e:	a9 01       	movw	r20, r18
     c40:	ca 01       	movw	r24, r20
     c42:	b9 01       	movw	r22, r18
     c44:	0e 94 81 01 	call	0x302	; 0x302 <pulse_out>
     c48:	ff 91       	pop	r31
     c4a:	ef 91       	pop	r30
     c4c:	bf 91       	pop	r27
     c4e:	af 91       	pop	r26
     c50:	9f 91       	pop	r25
     c52:	8f 91       	pop	r24
     c54:	7f 91       	pop	r23
     c56:	6f 91       	pop	r22
     c58:	5f 91       	pop	r21
     c5a:	4f 91       	pop	r20
     c5c:	3f 91       	pop	r19
     c5e:	2f 91       	pop	r18
     c60:	0f 90       	pop	r0
     c62:	0b be       	out	0x3b, r0	; 59
     c64:	0f 90       	pop	r0
     c66:	09 be       	out	0x39, r0	; 57
     c68:	0f 90       	pop	r0
     c6a:	08 be       	out	0x38, r0	; 56
     c6c:	0f 90       	pop	r0
     c6e:	0f be       	out	0x3f, r0	; 63
     c70:	0f 90       	pop	r0
     c72:	1f 90       	pop	r1
     c74:	18 95       	reti

00000c76 <__subsf3>:
     c76:	50 58       	subi	r21, 0x80	; 128

00000c78 <__addsf3>:
     c78:	bb 27       	eor	r27, r27
     c7a:	aa 27       	eor	r26, r26
     c7c:	0e 94 53 06 	call	0xca6	; 0xca6 <__addsf3x>
     c80:	0c 94 89 07 	jmp	0xf12	; 0xf12 <__fp_round>
     c84:	0e 94 7b 07 	call	0xef6	; 0xef6 <__fp_pscA>
     c88:	38 f0       	brcs	.+14     	; 0xc98 <__addsf3+0x20>
     c8a:	0e 94 82 07 	call	0xf04	; 0xf04 <__fp_pscB>
     c8e:	20 f0       	brcs	.+8      	; 0xc98 <__addsf3+0x20>
     c90:	39 f4       	brne	.+14     	; 0xca0 <__addsf3+0x28>
     c92:	9f 3f       	cpi	r25, 0xFF	; 255
     c94:	19 f4       	brne	.+6      	; 0xc9c <__addsf3+0x24>
     c96:	26 f4       	brtc	.+8      	; 0xca0 <__addsf3+0x28>
     c98:	0c 94 78 07 	jmp	0xef0	; 0xef0 <__fp_nan>
     c9c:	0e f4       	brtc	.+2      	; 0xca0 <__addsf3+0x28>
     c9e:	e0 95       	com	r30
     ca0:	e7 fb       	bst	r30, 7
     ca2:	0c 94 72 07 	jmp	0xee4	; 0xee4 <__fp_inf>

00000ca6 <__addsf3x>:
     ca6:	e9 2f       	mov	r30, r25
     ca8:	0e 94 9a 07 	call	0xf34	; 0xf34 <__fp_split3>
     cac:	58 f3       	brcs	.-42     	; 0xc84 <__addsf3+0xc>
     cae:	ba 17       	cp	r27, r26
     cb0:	62 07       	cpc	r22, r18
     cb2:	73 07       	cpc	r23, r19
     cb4:	84 07       	cpc	r24, r20
     cb6:	95 07       	cpc	r25, r21
     cb8:	20 f0       	brcs	.+8      	; 0xcc2 <__addsf3x+0x1c>
     cba:	79 f4       	brne	.+30     	; 0xcda <__addsf3x+0x34>
     cbc:	a6 f5       	brtc	.+104    	; 0xd26 <__addsf3x+0x80>
     cbe:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_zero>
     cc2:	0e f4       	brtc	.+2      	; 0xcc6 <__addsf3x+0x20>
     cc4:	e0 95       	com	r30
     cc6:	0b 2e       	mov	r0, r27
     cc8:	ba 2f       	mov	r27, r26
     cca:	a0 2d       	mov	r26, r0
     ccc:	0b 01       	movw	r0, r22
     cce:	b9 01       	movw	r22, r18
     cd0:	90 01       	movw	r18, r0
     cd2:	0c 01       	movw	r0, r24
     cd4:	ca 01       	movw	r24, r20
     cd6:	a0 01       	movw	r20, r0
     cd8:	11 24       	eor	r1, r1
     cda:	ff 27       	eor	r31, r31
     cdc:	59 1b       	sub	r21, r25
     cde:	99 f0       	breq	.+38     	; 0xd06 <__addsf3x+0x60>
     ce0:	59 3f       	cpi	r21, 0xF9	; 249
     ce2:	50 f4       	brcc	.+20     	; 0xcf8 <__addsf3x+0x52>
     ce4:	50 3e       	cpi	r21, 0xE0	; 224
     ce6:	68 f1       	brcs	.+90     	; 0xd42 <__addsf3x+0x9c>
     ce8:	1a 16       	cp	r1, r26
     cea:	f0 40       	sbci	r31, 0x00	; 0
     cec:	a2 2f       	mov	r26, r18
     cee:	23 2f       	mov	r18, r19
     cf0:	34 2f       	mov	r19, r20
     cf2:	44 27       	eor	r20, r20
     cf4:	58 5f       	subi	r21, 0xF8	; 248
     cf6:	f3 cf       	rjmp	.-26     	; 0xcde <__addsf3x+0x38>
     cf8:	46 95       	lsr	r20
     cfa:	37 95       	ror	r19
     cfc:	27 95       	ror	r18
     cfe:	a7 95       	ror	r26
     d00:	f0 40       	sbci	r31, 0x00	; 0
     d02:	53 95       	inc	r21
     d04:	c9 f7       	brne	.-14     	; 0xcf8 <__addsf3x+0x52>
     d06:	7e f4       	brtc	.+30     	; 0xd26 <__addsf3x+0x80>
     d08:	1f 16       	cp	r1, r31
     d0a:	ba 0b       	sbc	r27, r26
     d0c:	62 0b       	sbc	r22, r18
     d0e:	73 0b       	sbc	r23, r19
     d10:	84 0b       	sbc	r24, r20
     d12:	ba f0       	brmi	.+46     	; 0xd42 <__addsf3x+0x9c>
     d14:	91 50       	subi	r25, 0x01	; 1
     d16:	a1 f0       	breq	.+40     	; 0xd40 <__addsf3x+0x9a>
     d18:	ff 0f       	add	r31, r31
     d1a:	bb 1f       	adc	r27, r27
     d1c:	66 1f       	adc	r22, r22
     d1e:	77 1f       	adc	r23, r23
     d20:	88 1f       	adc	r24, r24
     d22:	c2 f7       	brpl	.-16     	; 0xd14 <__addsf3x+0x6e>
     d24:	0e c0       	rjmp	.+28     	; 0xd42 <__addsf3x+0x9c>
     d26:	ba 0f       	add	r27, r26
     d28:	62 1f       	adc	r22, r18
     d2a:	73 1f       	adc	r23, r19
     d2c:	84 1f       	adc	r24, r20
     d2e:	48 f4       	brcc	.+18     	; 0xd42 <__addsf3x+0x9c>
     d30:	87 95       	ror	r24
     d32:	77 95       	ror	r23
     d34:	67 95       	ror	r22
     d36:	b7 95       	ror	r27
     d38:	f7 95       	ror	r31
     d3a:	9e 3f       	cpi	r25, 0xFE	; 254
     d3c:	08 f0       	brcs	.+2      	; 0xd40 <__addsf3x+0x9a>
     d3e:	b0 cf       	rjmp	.-160    	; 0xca0 <__addsf3+0x28>
     d40:	93 95       	inc	r25
     d42:	88 0f       	add	r24, r24
     d44:	08 f0       	brcs	.+2      	; 0xd48 <__addsf3x+0xa2>
     d46:	99 27       	eor	r25, r25
     d48:	ee 0f       	add	r30, r30
     d4a:	97 95       	ror	r25
     d4c:	87 95       	ror	r24
     d4e:	08 95       	ret

00000d50 <__cmpsf2>:
     d50:	0e 94 4e 07 	call	0xe9c	; 0xe9c <__fp_cmp>
     d54:	08 f4       	brcc	.+2      	; 0xd58 <__cmpsf2+0x8>
     d56:	81 e0       	ldi	r24, 0x01	; 1
     d58:	08 95       	ret

00000d5a <__divsf3>:
     d5a:	0e 94 c1 06 	call	0xd82	; 0xd82 <__divsf3x>
     d5e:	0c 94 89 07 	jmp	0xf12	; 0xf12 <__fp_round>
     d62:	0e 94 82 07 	call	0xf04	; 0xf04 <__fp_pscB>
     d66:	58 f0       	brcs	.+22     	; 0xd7e <__divsf3+0x24>
     d68:	0e 94 7b 07 	call	0xef6	; 0xef6 <__fp_pscA>
     d6c:	40 f0       	brcs	.+16     	; 0xd7e <__divsf3+0x24>
     d6e:	29 f4       	brne	.+10     	; 0xd7a <__divsf3+0x20>
     d70:	5f 3f       	cpi	r21, 0xFF	; 255
     d72:	29 f0       	breq	.+10     	; 0xd7e <__divsf3+0x24>
     d74:	0c 94 72 07 	jmp	0xee4	; 0xee4 <__fp_inf>
     d78:	51 11       	cpse	r21, r1
     d7a:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__fp_szero>
     d7e:	0c 94 78 07 	jmp	0xef0	; 0xef0 <__fp_nan>

00000d82 <__divsf3x>:
     d82:	0e 94 9a 07 	call	0xf34	; 0xf34 <__fp_split3>
     d86:	68 f3       	brcs	.-38     	; 0xd62 <__divsf3+0x8>

00000d88 <__divsf3_pse>:
     d88:	99 23       	and	r25, r25
     d8a:	b1 f3       	breq	.-20     	; 0xd78 <__divsf3+0x1e>
     d8c:	55 23       	and	r21, r21
     d8e:	91 f3       	breq	.-28     	; 0xd74 <__divsf3+0x1a>
     d90:	95 1b       	sub	r25, r21
     d92:	55 0b       	sbc	r21, r21
     d94:	bb 27       	eor	r27, r27
     d96:	aa 27       	eor	r26, r26
     d98:	62 17       	cp	r22, r18
     d9a:	73 07       	cpc	r23, r19
     d9c:	84 07       	cpc	r24, r20
     d9e:	38 f0       	brcs	.+14     	; 0xdae <__divsf3_pse+0x26>
     da0:	9f 5f       	subi	r25, 0xFF	; 255
     da2:	5f 4f       	sbci	r21, 0xFF	; 255
     da4:	22 0f       	add	r18, r18
     da6:	33 1f       	adc	r19, r19
     da8:	44 1f       	adc	r20, r20
     daa:	aa 1f       	adc	r26, r26
     dac:	a9 f3       	breq	.-22     	; 0xd98 <__divsf3_pse+0x10>
     dae:	35 d0       	rcall	.+106    	; 0xe1a <__divsf3_pse+0x92>
     db0:	0e 2e       	mov	r0, r30
     db2:	3a f0       	brmi	.+14     	; 0xdc2 <__divsf3_pse+0x3a>
     db4:	e0 e8       	ldi	r30, 0x80	; 128
     db6:	32 d0       	rcall	.+100    	; 0xe1c <__divsf3_pse+0x94>
     db8:	91 50       	subi	r25, 0x01	; 1
     dba:	50 40       	sbci	r21, 0x00	; 0
     dbc:	e6 95       	lsr	r30
     dbe:	00 1c       	adc	r0, r0
     dc0:	ca f7       	brpl	.-14     	; 0xdb4 <__divsf3_pse+0x2c>
     dc2:	2b d0       	rcall	.+86     	; 0xe1a <__divsf3_pse+0x92>
     dc4:	fe 2f       	mov	r31, r30
     dc6:	29 d0       	rcall	.+82     	; 0xe1a <__divsf3_pse+0x92>
     dc8:	66 0f       	add	r22, r22
     dca:	77 1f       	adc	r23, r23
     dcc:	88 1f       	adc	r24, r24
     dce:	bb 1f       	adc	r27, r27
     dd0:	26 17       	cp	r18, r22
     dd2:	37 07       	cpc	r19, r23
     dd4:	48 07       	cpc	r20, r24
     dd6:	ab 07       	cpc	r26, r27
     dd8:	b0 e8       	ldi	r27, 0x80	; 128
     dda:	09 f0       	breq	.+2      	; 0xdde <__divsf3_pse+0x56>
     ddc:	bb 0b       	sbc	r27, r27
     dde:	80 2d       	mov	r24, r0
     de0:	bf 01       	movw	r22, r30
     de2:	ff 27       	eor	r31, r31
     de4:	93 58       	subi	r25, 0x83	; 131
     de6:	5f 4f       	sbci	r21, 0xFF	; 255
     de8:	3a f0       	brmi	.+14     	; 0xdf8 <__divsf3_pse+0x70>
     dea:	9e 3f       	cpi	r25, 0xFE	; 254
     dec:	51 05       	cpc	r21, r1
     dee:	78 f0       	brcs	.+30     	; 0xe0e <__divsf3_pse+0x86>
     df0:	0c 94 72 07 	jmp	0xee4	; 0xee4 <__fp_inf>
     df4:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__fp_szero>
     df8:	5f 3f       	cpi	r21, 0xFF	; 255
     dfa:	e4 f3       	brlt	.-8      	; 0xdf4 <__divsf3_pse+0x6c>
     dfc:	98 3e       	cpi	r25, 0xE8	; 232
     dfe:	d4 f3       	brlt	.-12     	; 0xdf4 <__divsf3_pse+0x6c>
     e00:	86 95       	lsr	r24
     e02:	77 95       	ror	r23
     e04:	67 95       	ror	r22
     e06:	b7 95       	ror	r27
     e08:	f7 95       	ror	r31
     e0a:	9f 5f       	subi	r25, 0xFF	; 255
     e0c:	c9 f7       	brne	.-14     	; 0xe00 <__divsf3_pse+0x78>
     e0e:	88 0f       	add	r24, r24
     e10:	91 1d       	adc	r25, r1
     e12:	96 95       	lsr	r25
     e14:	87 95       	ror	r24
     e16:	97 f9       	bld	r25, 7
     e18:	08 95       	ret
     e1a:	e1 e0       	ldi	r30, 0x01	; 1
     e1c:	66 0f       	add	r22, r22
     e1e:	77 1f       	adc	r23, r23
     e20:	88 1f       	adc	r24, r24
     e22:	bb 1f       	adc	r27, r27
     e24:	62 17       	cp	r22, r18
     e26:	73 07       	cpc	r23, r19
     e28:	84 07       	cpc	r24, r20
     e2a:	ba 07       	cpc	r27, r26
     e2c:	20 f0       	brcs	.+8      	; 0xe36 <__divsf3_pse+0xae>
     e2e:	62 1b       	sub	r22, r18
     e30:	73 0b       	sbc	r23, r19
     e32:	84 0b       	sbc	r24, r20
     e34:	ba 0b       	sbc	r27, r26
     e36:	ee 1f       	adc	r30, r30
     e38:	88 f7       	brcc	.-30     	; 0xe1c <__divsf3_pse+0x94>
     e3a:	e0 95       	com	r30
     e3c:	08 95       	ret

00000e3e <__fixunssfsi>:
     e3e:	0e 94 a2 07 	call	0xf44	; 0xf44 <__fp_splitA>
     e42:	88 f0       	brcs	.+34     	; 0xe66 <__fixunssfsi+0x28>
     e44:	9f 57       	subi	r25, 0x7F	; 127
     e46:	98 f0       	brcs	.+38     	; 0xe6e <__fixunssfsi+0x30>
     e48:	b9 2f       	mov	r27, r25
     e4a:	99 27       	eor	r25, r25
     e4c:	b7 51       	subi	r27, 0x17	; 23
     e4e:	b0 f0       	brcs	.+44     	; 0xe7c <__fixunssfsi+0x3e>
     e50:	e1 f0       	breq	.+56     	; 0xe8a <__fixunssfsi+0x4c>
     e52:	66 0f       	add	r22, r22
     e54:	77 1f       	adc	r23, r23
     e56:	88 1f       	adc	r24, r24
     e58:	99 1f       	adc	r25, r25
     e5a:	1a f0       	brmi	.+6      	; 0xe62 <__fixunssfsi+0x24>
     e5c:	ba 95       	dec	r27
     e5e:	c9 f7       	brne	.-14     	; 0xe52 <__fixunssfsi+0x14>
     e60:	14 c0       	rjmp	.+40     	; 0xe8a <__fixunssfsi+0x4c>
     e62:	b1 30       	cpi	r27, 0x01	; 1
     e64:	91 f0       	breq	.+36     	; 0xe8a <__fixunssfsi+0x4c>
     e66:	0e 94 bc 07 	call	0xf78	; 0xf78 <__fp_zero>
     e6a:	b1 e0       	ldi	r27, 0x01	; 1
     e6c:	08 95       	ret
     e6e:	0c 94 bc 07 	jmp	0xf78	; 0xf78 <__fp_zero>
     e72:	67 2f       	mov	r22, r23
     e74:	78 2f       	mov	r23, r24
     e76:	88 27       	eor	r24, r24
     e78:	b8 5f       	subi	r27, 0xF8	; 248
     e7a:	39 f0       	breq	.+14     	; 0xe8a <__fixunssfsi+0x4c>
     e7c:	b9 3f       	cpi	r27, 0xF9	; 249
     e7e:	cc f3       	brlt	.-14     	; 0xe72 <__fixunssfsi+0x34>
     e80:	86 95       	lsr	r24
     e82:	77 95       	ror	r23
     e84:	67 95       	ror	r22
     e86:	b3 95       	inc	r27
     e88:	d9 f7       	brne	.-10     	; 0xe80 <__fixunssfsi+0x42>
     e8a:	3e f4       	brtc	.+14     	; 0xe9a <__fixunssfsi+0x5c>
     e8c:	90 95       	com	r25
     e8e:	80 95       	com	r24
     e90:	70 95       	com	r23
     e92:	61 95       	neg	r22
     e94:	7f 4f       	sbci	r23, 0xFF	; 255
     e96:	8f 4f       	sbci	r24, 0xFF	; 255
     e98:	9f 4f       	sbci	r25, 0xFF	; 255
     e9a:	08 95       	ret

00000e9c <__fp_cmp>:
     e9c:	99 0f       	add	r25, r25
     e9e:	00 08       	sbc	r0, r0
     ea0:	55 0f       	add	r21, r21
     ea2:	aa 0b       	sbc	r26, r26
     ea4:	e0 e8       	ldi	r30, 0x80	; 128
     ea6:	fe ef       	ldi	r31, 0xFE	; 254
     ea8:	16 16       	cp	r1, r22
     eaa:	17 06       	cpc	r1, r23
     eac:	e8 07       	cpc	r30, r24
     eae:	f9 07       	cpc	r31, r25
     eb0:	c0 f0       	brcs	.+48     	; 0xee2 <__fp_cmp+0x46>
     eb2:	12 16       	cp	r1, r18
     eb4:	13 06       	cpc	r1, r19
     eb6:	e4 07       	cpc	r30, r20
     eb8:	f5 07       	cpc	r31, r21
     eba:	98 f0       	brcs	.+38     	; 0xee2 <__fp_cmp+0x46>
     ebc:	62 1b       	sub	r22, r18
     ebe:	73 0b       	sbc	r23, r19
     ec0:	84 0b       	sbc	r24, r20
     ec2:	95 0b       	sbc	r25, r21
     ec4:	39 f4       	brne	.+14     	; 0xed4 <__fp_cmp+0x38>
     ec6:	0a 26       	eor	r0, r26
     ec8:	61 f0       	breq	.+24     	; 0xee2 <__fp_cmp+0x46>
     eca:	23 2b       	or	r18, r19
     ecc:	24 2b       	or	r18, r20
     ece:	25 2b       	or	r18, r21
     ed0:	21 f4       	brne	.+8      	; 0xeda <__fp_cmp+0x3e>
     ed2:	08 95       	ret
     ed4:	0a 26       	eor	r0, r26
     ed6:	09 f4       	brne	.+2      	; 0xeda <__fp_cmp+0x3e>
     ed8:	a1 40       	sbci	r26, 0x01	; 1
     eda:	a6 95       	lsr	r26
     edc:	8f ef       	ldi	r24, 0xFF	; 255
     ede:	81 1d       	adc	r24, r1
     ee0:	81 1d       	adc	r24, r1
     ee2:	08 95       	ret

00000ee4 <__fp_inf>:
     ee4:	97 f9       	bld	r25, 7
     ee6:	9f 67       	ori	r25, 0x7F	; 127
     ee8:	80 e8       	ldi	r24, 0x80	; 128
     eea:	70 e0       	ldi	r23, 0x00	; 0
     eec:	60 e0       	ldi	r22, 0x00	; 0
     eee:	08 95       	ret

00000ef0 <__fp_nan>:
     ef0:	9f ef       	ldi	r25, 0xFF	; 255
     ef2:	80 ec       	ldi	r24, 0xC0	; 192
     ef4:	08 95       	ret

00000ef6 <__fp_pscA>:
     ef6:	00 24       	eor	r0, r0
     ef8:	0a 94       	dec	r0
     efa:	16 16       	cp	r1, r22
     efc:	17 06       	cpc	r1, r23
     efe:	18 06       	cpc	r1, r24
     f00:	09 06       	cpc	r0, r25
     f02:	08 95       	ret

00000f04 <__fp_pscB>:
     f04:	00 24       	eor	r0, r0
     f06:	0a 94       	dec	r0
     f08:	12 16       	cp	r1, r18
     f0a:	13 06       	cpc	r1, r19
     f0c:	14 06       	cpc	r1, r20
     f0e:	05 06       	cpc	r0, r21
     f10:	08 95       	ret

00000f12 <__fp_round>:
     f12:	09 2e       	mov	r0, r25
     f14:	03 94       	inc	r0
     f16:	00 0c       	add	r0, r0
     f18:	11 f4       	brne	.+4      	; 0xf1e <__fp_round+0xc>
     f1a:	88 23       	and	r24, r24
     f1c:	52 f0       	brmi	.+20     	; 0xf32 <__fp_round+0x20>
     f1e:	bb 0f       	add	r27, r27
     f20:	40 f4       	brcc	.+16     	; 0xf32 <__fp_round+0x20>
     f22:	bf 2b       	or	r27, r31
     f24:	11 f4       	brne	.+4      	; 0xf2a <__fp_round+0x18>
     f26:	60 ff       	sbrs	r22, 0
     f28:	04 c0       	rjmp	.+8      	; 0xf32 <__fp_round+0x20>
     f2a:	6f 5f       	subi	r22, 0xFF	; 255
     f2c:	7f 4f       	sbci	r23, 0xFF	; 255
     f2e:	8f 4f       	sbci	r24, 0xFF	; 255
     f30:	9f 4f       	sbci	r25, 0xFF	; 255
     f32:	08 95       	ret

00000f34 <__fp_split3>:
     f34:	57 fd       	sbrc	r21, 7
     f36:	90 58       	subi	r25, 0x80	; 128
     f38:	44 0f       	add	r20, r20
     f3a:	55 1f       	adc	r21, r21
     f3c:	59 f0       	breq	.+22     	; 0xf54 <__fp_splitA+0x10>
     f3e:	5f 3f       	cpi	r21, 0xFF	; 255
     f40:	71 f0       	breq	.+28     	; 0xf5e <__fp_splitA+0x1a>
     f42:	47 95       	ror	r20

00000f44 <__fp_splitA>:
     f44:	88 0f       	add	r24, r24
     f46:	97 fb       	bst	r25, 7
     f48:	99 1f       	adc	r25, r25
     f4a:	61 f0       	breq	.+24     	; 0xf64 <__fp_splitA+0x20>
     f4c:	9f 3f       	cpi	r25, 0xFF	; 255
     f4e:	79 f0       	breq	.+30     	; 0xf6e <__fp_splitA+0x2a>
     f50:	87 95       	ror	r24
     f52:	08 95       	ret
     f54:	12 16       	cp	r1, r18
     f56:	13 06       	cpc	r1, r19
     f58:	14 06       	cpc	r1, r20
     f5a:	55 1f       	adc	r21, r21
     f5c:	f2 cf       	rjmp	.-28     	; 0xf42 <__fp_split3+0xe>
     f5e:	46 95       	lsr	r20
     f60:	f1 df       	rcall	.-30     	; 0xf44 <__fp_splitA>
     f62:	08 c0       	rjmp	.+16     	; 0xf74 <__fp_splitA+0x30>
     f64:	16 16       	cp	r1, r22
     f66:	17 06       	cpc	r1, r23
     f68:	18 06       	cpc	r1, r24
     f6a:	99 1f       	adc	r25, r25
     f6c:	f1 cf       	rjmp	.-30     	; 0xf50 <__fp_splitA+0xc>
     f6e:	86 95       	lsr	r24
     f70:	71 05       	cpc	r23, r1
     f72:	61 05       	cpc	r22, r1
     f74:	08 94       	sec
     f76:	08 95       	ret

00000f78 <__fp_zero>:
     f78:	e8 94       	clt

00000f7a <__fp_szero>:
     f7a:	bb 27       	eor	r27, r27
     f7c:	66 27       	eor	r22, r22
     f7e:	77 27       	eor	r23, r23
     f80:	cb 01       	movw	r24, r22
     f82:	97 f9       	bld	r25, 7
     f84:	08 95       	ret

00000f86 <__mulsf3>:
     f86:	0e 94 d6 07 	call	0xfac	; 0xfac <__mulsf3x>
     f8a:	0c 94 89 07 	jmp	0xf12	; 0xf12 <__fp_round>
     f8e:	0e 94 7b 07 	call	0xef6	; 0xef6 <__fp_pscA>
     f92:	38 f0       	brcs	.+14     	; 0xfa2 <__mulsf3+0x1c>
     f94:	0e 94 82 07 	call	0xf04	; 0xf04 <__fp_pscB>
     f98:	20 f0       	brcs	.+8      	; 0xfa2 <__mulsf3+0x1c>
     f9a:	95 23       	and	r25, r21
     f9c:	11 f0       	breq	.+4      	; 0xfa2 <__mulsf3+0x1c>
     f9e:	0c 94 72 07 	jmp	0xee4	; 0xee4 <__fp_inf>
     fa2:	0c 94 78 07 	jmp	0xef0	; 0xef0 <__fp_nan>
     fa6:	11 24       	eor	r1, r1
     fa8:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__fp_szero>

00000fac <__mulsf3x>:
     fac:	0e 94 9a 07 	call	0xf34	; 0xf34 <__fp_split3>
     fb0:	70 f3       	brcs	.-36     	; 0xf8e <__mulsf3+0x8>

00000fb2 <__mulsf3_pse>:
     fb2:	95 9f       	mul	r25, r21
     fb4:	c1 f3       	breq	.-16     	; 0xfa6 <__mulsf3+0x20>
     fb6:	95 0f       	add	r25, r21
     fb8:	50 e0       	ldi	r21, 0x00	; 0
     fba:	55 1f       	adc	r21, r21
     fbc:	62 9f       	mul	r22, r18
     fbe:	f0 01       	movw	r30, r0
     fc0:	72 9f       	mul	r23, r18
     fc2:	bb 27       	eor	r27, r27
     fc4:	f0 0d       	add	r31, r0
     fc6:	b1 1d       	adc	r27, r1
     fc8:	63 9f       	mul	r22, r19
     fca:	aa 27       	eor	r26, r26
     fcc:	f0 0d       	add	r31, r0
     fce:	b1 1d       	adc	r27, r1
     fd0:	aa 1f       	adc	r26, r26
     fd2:	64 9f       	mul	r22, r20
     fd4:	66 27       	eor	r22, r22
     fd6:	b0 0d       	add	r27, r0
     fd8:	a1 1d       	adc	r26, r1
     fda:	66 1f       	adc	r22, r22
     fdc:	82 9f       	mul	r24, r18
     fde:	22 27       	eor	r18, r18
     fe0:	b0 0d       	add	r27, r0
     fe2:	a1 1d       	adc	r26, r1
     fe4:	62 1f       	adc	r22, r18
     fe6:	73 9f       	mul	r23, r19
     fe8:	b0 0d       	add	r27, r0
     fea:	a1 1d       	adc	r26, r1
     fec:	62 1f       	adc	r22, r18
     fee:	83 9f       	mul	r24, r19
     ff0:	a0 0d       	add	r26, r0
     ff2:	61 1d       	adc	r22, r1
     ff4:	22 1f       	adc	r18, r18
     ff6:	74 9f       	mul	r23, r20
     ff8:	33 27       	eor	r19, r19
     ffa:	a0 0d       	add	r26, r0
     ffc:	61 1d       	adc	r22, r1
     ffe:	23 1f       	adc	r18, r19
    1000:	84 9f       	mul	r24, r20
    1002:	60 0d       	add	r22, r0
    1004:	21 1d       	adc	r18, r1
    1006:	82 2f       	mov	r24, r18
    1008:	76 2f       	mov	r23, r22
    100a:	6a 2f       	mov	r22, r26
    100c:	11 24       	eor	r1, r1
    100e:	9f 57       	subi	r25, 0x7F	; 127
    1010:	50 40       	sbci	r21, 0x00	; 0
    1012:	9a f0       	brmi	.+38     	; 0x103a <__mulsf3_pse+0x88>
    1014:	f1 f0       	breq	.+60     	; 0x1052 <__mulsf3_pse+0xa0>
    1016:	88 23       	and	r24, r24
    1018:	4a f0       	brmi	.+18     	; 0x102c <__mulsf3_pse+0x7a>
    101a:	ee 0f       	add	r30, r30
    101c:	ff 1f       	adc	r31, r31
    101e:	bb 1f       	adc	r27, r27
    1020:	66 1f       	adc	r22, r22
    1022:	77 1f       	adc	r23, r23
    1024:	88 1f       	adc	r24, r24
    1026:	91 50       	subi	r25, 0x01	; 1
    1028:	50 40       	sbci	r21, 0x00	; 0
    102a:	a9 f7       	brne	.-22     	; 0x1016 <__mulsf3_pse+0x64>
    102c:	9e 3f       	cpi	r25, 0xFE	; 254
    102e:	51 05       	cpc	r21, r1
    1030:	80 f0       	brcs	.+32     	; 0x1052 <__mulsf3_pse+0xa0>
    1032:	0c 94 72 07 	jmp	0xee4	; 0xee4 <__fp_inf>
    1036:	0c 94 bd 07 	jmp	0xf7a	; 0xf7a <__fp_szero>
    103a:	5f 3f       	cpi	r21, 0xFF	; 255
    103c:	e4 f3       	brlt	.-8      	; 0x1036 <__mulsf3_pse+0x84>
    103e:	98 3e       	cpi	r25, 0xE8	; 232
    1040:	d4 f3       	brlt	.-12     	; 0x1036 <__mulsf3_pse+0x84>
    1042:	86 95       	lsr	r24
    1044:	77 95       	ror	r23
    1046:	67 95       	ror	r22
    1048:	b7 95       	ror	r27
    104a:	f7 95       	ror	r31
    104c:	e7 95       	ror	r30
    104e:	9f 5f       	subi	r25, 0xFF	; 255
    1050:	c1 f7       	brne	.-16     	; 0x1042 <__mulsf3_pse+0x90>
    1052:	fe 2b       	or	r31, r30
    1054:	88 0f       	add	r24, r24
    1056:	91 1d       	adc	r25, r1
    1058:	96 95       	lsr	r25
    105a:	87 95       	ror	r24
    105c:	97 f9       	bld	r25, 7
    105e:	08 95       	ret

00001060 <__tablejump2__>:
    1060:	ee 0f       	add	r30, r30
    1062:	ff 1f       	adc	r31, r31
    1064:	88 1f       	adc	r24, r24
    1066:	8b bf       	out	0x3b, r24	; 59
    1068:	07 90       	elpm	r0, Z+
    106a:	f6 91       	elpm	r31, Z
    106c:	e0 2d       	mov	r30, r0
    106e:	1b be       	out	0x3b, r1	; 59
    1070:	19 94       	eijmp

00001072 <_exit>:
    1072:	f8 94       	cli

00001074 <__stop_program>:
    1074:	ff cf       	rjmp	.-2      	; 0x1074 <__stop_program>
