Depth = 256;
Width = 32;
Address_radix = hex;
Data_radix = bin;
% Program RAM Data %					-- This program will test these instructions :
							-- lw, addu, and, xor, or, sub, multu, and j
Content
  Begin
00 : 10001100000100010000000000101100	;		-- lw $s1, 2C($Zero)	 / 	load word in adress 2C + zero to s1	// s1/r17 = 4
04 : 10001110001100100000000000101100	;		-- lw $s2, 2C($s1) 	 / 	load word in adress 2C + s1 to s2	// s2/r18 = 5
08 : 00000010001100101001100000100001	;		-- addu $s3, $s1, $s2 	 / 	s3 = s1 + s2				// s3/r19 = 9
0C : 00000010010100111010000000100100	;		-- and $s4, $s2, $s3	 /	s4 = s2 and s3				// s4/r20 = 1
10 : 00000010011101001010100000100110	;		-- xor $s5, $s3, $s4	 / 	s5 = s3 xor s4				// s5/r21 = 8
14 : 00000010011100011011000000100101	;		-- or  $s6, $s3, $s1     / 	s6 = s3 or  s1				// s6/r22 = D
18 : 00000010110101001011100000100011	;		-- sub $s7, $s6, $s4     /      s7 = s6 - s4				// s7/r23 = C
1C : 10001100000000110000000000110100   ;               -- lw $s8, 34($Zero)     /     load word in address 34 + zero to s8     // s8/r3 = 0x38
20 : 10101100011100110000000000000000	;		-- sw $s3, 38($Zero)     /     store word in s3/r19=9 to address in s8=addr(38)
24 : 10001100000000110000000000111000   ;               -- lw $s8, 38($Zero)     /     load word in address 38 + zero to s8     //s8/r3 = 9
28 : 00001000000000000000000000001010	;		-- j  20		 / 	infinite loop
2C : 00000000000000000000000000000100	;		-- 4
30 : 00000000000000000000000000000101	;		-- 5
34 : 00000000000000000000000000111000   ;               -- 0x38
38 :

End;